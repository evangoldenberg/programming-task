URL,Type,Status,Priority,Resolution,Affects Version/s,Fix Version/s,Component/s,Estimated Complexity,Assignee,Reporter,Created,Updated,Description,Comments
https://issues.apache.org/jira/browse/CAMEL-21753,Bug,Open,Major,Unresolved,4.10.0,"4.11.0,4.10.3",camel-jbang,Unknown,Thomas Diesler,Thomas Diesler,17/Feb/25 14:29,6 hours ago,camel.oauth.baseUri=https: //keycloak.local:30443/realms/camel camel.oauth.redirectUri=http: //127.0.0.1:8080/auth camel.oauth.logout.redirectUri=http: //127.0.0.1:8080/ camel.oauth.clientId=camel-client camel.main.basePackageScan=examples.platformhttpoauth camel.oauth.baseUri=https: //keycloak.local:30443/realms/camel camel.oauth.redirectUri=http: //127.0.0.1:8080/auth camel.oauth.logout.redirectUri=http: //127.0.0.1:8080/ camel.oauth.clientId=camel-client camel.server.enabled= true camel.oauth.baseUri=https: //keycloak.local:30443/realms/camel camel.oauth.redirectUri=http: //127.0.0.1:8080/auth camel.oauth.logout.redirectUri=http: //127.0.0.1:8080/ camel.oauth.clientId=camel-client camel.server.health-check-enabled= true camel.oauth.baseUri=https: //keycloak.local:30443/realms/camel camel.oauth.redirectUri=http: //127.0.0.1:8080/auth camel.oauth.logout.redirectUri=http: //127.0.0.1:8080/ camel.oauth.clientId=camel-client,
https://issues.apache.org/jira/browse/CAMEL-21827,Task,In Progress,Major,Unresolved,None,4.11.0,documentation,Unknown,Pasquale Congiusti,Claus Ibsen,3 days ago 09:26,10 hours ago,MDC logging is not good with a async routing engine in Camel and is a legacy logging feature. We should add some docs about using this feature can have some issue and that eventually it will be deprecated.,Claus Ibsen: Claus Ibsen added a comment - 3 days ago cc squakez | Pasquale Congiusti: Pasquale Congiusti added a comment - 11 hours ago https://github.com/apache/camel/pull/17389
https://issues.apache.org/jira/browse/CAMEL-21843,Improvement,Open,Major,Unresolved,None,4.11.0,camel-kamelet,Unknown,Andrea Cosentino,Claus Ibsen,Yesterday 11:50,11 hours ago,,Claus Ibsen: Claus Ibsen added a comment - Yesterday kafka jackson mongodb langchain4j jackson-avro djl
https://issues.apache.org/jira/browse/CAMEL-21841,Bug,In Progress,Major,Unresolved,4.10.1,None,camel-jbang,Unknown,Claudio Miranda,Claudio Miranda,Yesterday 10:52,11 hours ago,"the kubernetes plugin fails to fetch the container image when using the knative-service trait in minikube camel kubernetes run --verbose HttpLog.java --kamelets-version=4.9.0 --trait knative-service.enabled= true --trait container.image-pull-policy=IfNotPresent The minikube registry addon was exposed in the shell console with eval $(minikube docker-env) The container image is correctly published in the registry $ docker images|grep localhost localhost:5000/http-log 1.0-SNAPSHOT 6545efede2e4 18 hours ago 463MB The route public class HttpLog extends RouteBuilder { @Override public void configure() throws Exception { from( ""platform-http:/hello?httpMethodRestrict=GET"" ) .setBody(simple( ""Hello ${header.name}"" )) .log( ""${header.name}"" ); } } The deployed knative-service manifest contains the Image Pull Policy: IfNotPresent The pod and knative revision fails with: Revision ""kn-http-log-00001"" failed with message: Unable to fetch image ""localhost:5000/kn-http-log:1.0-SNAPSHOT"" : failed to resolve image to digest: Get ""https: //localhost:5000/v2/"" : dial tcp 127.0.0.1:5000: connect: connection refused; Get ""http://localhost:5000/v2/"" : dial tcp 127.0.0.1:5000: connect: connection refused.",
https://issues.apache.org/jira/browse/CAMEL-21842,Bug,In Progress,Major,Unresolved,None,None,camel-jbang,Unknown,Claudio Miranda,Claudio Miranda,Yesterday 11:31,11 hours ago,"Due to the new observability-services dependency is set the camel-jbang exports, the kubernetes plugin should fix the http get path to the ""/observe"" prefix, otherwise the container pod will fail with: Container non-http-log failed startup probe, will be restarted Startup probe failed: HTTP probe failed with statuscode: 404",
https://issues.apache.org/jira/browse/CAMEL-21816,Bug,Open,Major,Unresolved,4.10.0,None,"camel-ai,(1)camel-langchain4j-tools",Unknown,Otavio Rodolfo Piske,Bruno Meseguer,1 week ago 09:34,Yesterday 10:05,"When a Camel route uses the LangChain4J-tools component, it calls the LLM, providing metadata about the tools (tool routes) available the LLM can use. The LLM computes the request and decides if a tool call is necessary or not. If the LLM performs a tool call, Camel executes the tool and returns the result to the LLM. However, the current implementation does not provide the Tools metadata (tools available) when returning the tool result. The consequence of Camel not including Tools metadata when returning the tool response is that the LLM understands there are no more Tools available, and concludes that subsequent tool calls are not allowed, forcing the LLM to compose a final response. The expected behaviour from Camel is to always provide a full history of tool calls and results, including the metadata of available tools the LLM can use at all times. Let's assume Camel asks the LLM the following question: ""what is the weather in London?"" Camel calls the LLM and provides metadata listing the tools available to the LLM. In this example, it would provide: Tool to find the geo-coordinates for a given city Tool to obtain weather information for a given longitude and latitude The LLM needs to first obtain from Camel the geo-coordinates for London, and in a subsequent call, invoke the second tool to obtain the weather passing the geo-coordinates obtained in the first call. When Camel returns the result of the geo-coordinates tool call, the current implementation is missing to provide tools metadata. The sample below shows all the data Camel needs to provide to allow the LLM to call a second time: Request: - method: POST - url: http: //localhost:11434/api/chat - headers: [Accept: application/json], [Content-Type: application/json], [User-Agent: Apache Camel], [content-length: 2257] - body: { ""model"" : ""qwen2.5:7b-instruct"" , ""messages"" : [ { ""role"" : ""system"" , ""content"" : "" You are a meteorologist, and you need to answer questions asked by the user about weather using at most 3 lines.\n\n The weather information is a JSON object and has the following fields:\n\n maxTemperature is the maximum temperature of the day in Celsius degrees\n minTemperature is the minimum temperature of the day in Celsius degrees\n precipitation is the amount of water in mm\n windSpeed is the speed of wind in kilometers per hour\n weather is the overall weather.\n"" }, { ""role"" : ""user"" , ""content"" : ""What is the weather in london ?"" }, { ""role"" : ""assistant"" , ""tool_calls"" : [ { ""function"" : { ""name"" : ""findCity"" , ""arguments"" : { ""name"" : ""london"" } } } ] }, { ""role"" : ""tool"" , ""content"" : ""{\n \"" results\ "" : [ {\n \"" latitude\ "" : 51.50853,\n \"" longitude\ "" : -0.12574\n } ]\n}"" } ], ""tools"" : [ { ""type"" : ""function"" , ""function"" : { ""name"" : ""forecast"" , ""description"" : ""Forecasts the weather for the given latitude and longitude"" , ""parameters"" : { ""type"" : ""object"" , ""properties"" : { ""latitude"" : { ""type"" : ""number"" }, ""longitude"" : { ""type"" : ""number"" } }, ""required"" : [ ""latitude"" , ""longitude"" ] } } }, { ""type"" : ""function"" , ""function"" : { ""name"" : ""findCity"" , ""description"" : ""Finds the latitude and longitude of a given city"" , ""parameters"" : { ""type"" : ""object"" , ""properties"" : { ""name"" : { ""type"" : ""string"" } }, ""required"" : [ ""name"" ] } } } ], ""options"" : { ""temperature"" : 0.0, ""top_k"" : 40, ""top_p"" : 0.9 }, ""stream"" : false } Note in the JSON data above that Camel provides both the result of the tool call (provides latitude and longitude for the city of London), and also provides (again) the list of available tools the LLM can use at all times if it decides to call again.",Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - Yesterday Root cause: missing loop between lines 102 and 108 on the LangChain4jToolsProducer. It needs to re-evaluate the tools until it gets a not tools execution request response.
https://issues.apache.org/jira/browse/CAMEL-21839,Bug,Open,Major,Unresolved,None,None,camel-langchain4j-tools,Unknown,Otavio Rodolfo Piske,Otavio Rodolfo Piske,Yesterday 09:38,Yesterday 09:44,Ref: https://camel.zulipchat.com/#narrow/channel/257302-camel-quarkus/topic/LangChain4j.20Tools.20.3A.20There.20are.20no.20tools.20to.20be.20executed/near/503646001,
https://issues.apache.org/jira/browse/CAMEL-20367,Test,Open,Major,Unresolved,None,4.x,camel-jbang,Unknown,Marco Carletti,Claus Ibsen,24/Jan/24 18:50,3 days ago 11:19,"After first set of tests for 4.4, then we should add more tests for 4.x onwards.",
https://issues.apache.org/jira/browse/CAMEL-21801,New Feature,Open,Major,Unresolved,None,4.x,None,Unknown,Unassigned,Claus Ibsen,26/Feb/25 08:06,4 days ago 19:12,https://docs.spring.io/spring-cloud-config/docs/current/reference/html/ So you can use their config server to lookup username / password / urls to various configuration and use them as {{spring-config:xxx}} placeholders in Camel routes.,Claus Ibsen: Claus Ibsen added a comment - 4 days ago acosentino you are welcome to look at this with all your work on vaults
https://issues.apache.org/jira/browse/CAMEL-21825,Improvement,Open,Major,Unresolved,None,None,camel-ai,Unknown,Unassigned,Otavio Rodolfo Piske,4 days ago 16:58,4 days ago 16:58,LangChain4j comes with a MCP client that we can leverage on Camel to implement a MCP component. This would allow Camel to integrate with all sorts of new MCP servers that are appearing lately.,
https://issues.apache.org/jira/browse/CAMEL-21802,New Feature,Open,Major,Unresolved,None,None,camel-pinecone,Unknown,Nikita_Konovalov,Zineb Bendhiba,26/Feb/25 10:14,1 week ago 08:07,Similar to https://issues.apache.org/jira/browse/CAMEL-21718,Nikita_Konovalov: Nikita_Konovalov added a comment - 27/Feb/25 10:35 Started working on this
https://issues.apache.org/jira/browse/CAMEL-21760,New Feature,Reopened,Major,Unresolved,None,4.11.0,camel-oauth,Unknown,Thomas Diesler,Thomas Diesler,19/Feb/25 11:04,1 week ago 08:07,,"Thomas Diesler: Thomas Diesler added a comment - 19/Feb/25 12:07 - edited The camel-oauth module comes with a set of Processors that can be added the route on the client and resource owner side Supported OIDC, OAuth functionality is ... OIDC Authentication using Authorization Code Flow (OAuthCodeFlowProcessor, OAuthCodeFlowCallbackProcessor) OAuth Client Credentials Grant (OAuthClientCredentialsProcessor, OAuthBearerTokenProcessor) Identity Provider (Keycloak only) logout (OAuthLogoutProcessor) Keycloak can be deployed to a local k8s cluster with a helm chart that comes with camel-oauth There are two test cases that show the above (KeycloakOAuthWebAppTest, KeycloakOAuthRestTest) The respective jbang projects live here When this has found it's proper place and acceptance, I'd start to work on docs. For Kafka we can use strimzi kafka-oauth-client directly, which can also be documented as part of camel-oauth. | Thomas Diesler: Thomas Diesler added a comment - 27/Feb/25 10:01 Done | Claus Ibsen: Claus Ibsen added a comment - 27/Feb/25 10:13 You need to add a docs in src/main/docs (see for example camel-headersmap/src/main/docs/headersmap.adoc) | Claus Ibsen: Claus Ibsen added a comment - 27/Feb/25 10:14 It may not need to be a lot of docs, but some basic that tell what this component is, and have those metadata, and the name of the file is `oauth.adoc`"
https://issues.apache.org/jira/browse/CAMEL-21812,Improvement,Open,Major,Unresolved,None,None,"camel-jbang,(1)camel-oauth",Unknown,Thomas Diesler,Thomas Diesler,27/Feb/25 15:40,27/Feb/25 16:26,"Communication with Keycloak should not happen over an insecure channel. Specifically, some OAuth/OIDC protocols require TLS before they are willing to send sensitive data across the wire.",
https://issues.apache.org/jira/browse/CAMEL-21751,Bug,Open,Major,Unresolved,None,None,camel-jbang,Unknown,Thomas Diesler,Thomas Diesler,17/Feb/25 12:34,27/Feb/25 12:59,"I have a plugin configuration like this ... <plugin> <groupId> org.eclipse.jkube </groupId> <artifactId> kubernetes-maven-plugin </artifactId> <version> 1.18.1 </version> <configuration> <buildStrategy> docker </buildStrategy> <images> <image> <build> <from> eclipse-temurin:17 </from> <entryPoint> <exec> <arg> __cacert_entrypoint.sh </arg> <arg> java </arg> <arg> -jar </arg> <arg> /maven/${project.artifactId}-${project.version}.jar </arg> </exec> </entryPoint> <assembly> <layers> <layer> <id> trusted-certs </id> <fileSets> <fileSet> <directory> src/main/certs </directory> <outputDirectory> /tmp </outputDirectory> <includes> <include> *crt </include> </includes> </fileSet> </fileSets> </layer> </layers> </assembly> </build> </image> </images> </configuration> <executions> <execution> <goals> <goal> build </goal> <goal> resource </goal> <goal> push </goal> </goals> <phase> package </phase> </execution> </executions> </plugin> and get [INFO] k8s: [examples/platform-http-oauth:1.0.0]: Created docker-build.tar in 86 milliseconds [INFO] k8s: Step 1/4 : FROM eclipse-temurin:17 [INFO] k8s: [INFO] k8s: ---> 1e83e0efd1de [INFO] k8s: Step 2/4 : COPY /trusted-certs/maven /maven/ [INFO] k8s: [ERROR] k8s: Failed to execute the build [Error while trying to build the image: Unable to build image [examples/platform-http-oauth:1.0.0] : ""COPY failed: file not found in build context or excluded by .dockerignore: stat trusted-certs/maven: file does not exist"" ] or [ERROR] k8s: Failed to execute the build [Error while trying to build the image: Cannot create directory '/certificates' .] CrossRef: https://github.com/eclipse-jkube/jkube/issues/3672",Thomas Diesler: Thomas Diesler added a comment - 27/Feb/25 12:57 - edited We can get this to work when we provide our own entrypoint (a slight variation of __cacert_entrypoint.sh) and add the trusted certificate like this ... <assembly> <layers> <layer> <id> cacert-entrypoint </id> <files> <file> <source> etc/cacert_entrypoint.sh </source> <outputDirectory> . </outputDirectory> <fileMode> 755 </fileMode> </file> </files> </layer> <layer> <id> trusted-cert </id> <fileSets> <fileSet> <directory> etc/tls </directory> <outputDirectory> tls </outputDirectory> </fileSet> </fileSets> </layer> </layers> </assembly>
https://issues.apache.org/jira/browse/CAMEL-21811,Improvement,Open,Major,Unresolved,None,None,camel-oauth,Unknown,Thomas Diesler,Thomas Diesler,27/Feb/25 10:25,27/Feb/25 10:47,... this would have the benefit of not using NodePort and reuse the same TLS certificate for various services behind the SSL terminating proxy (e.g. Traefik),
https://issues.apache.org/jira/browse/CAMEL-21696,New Feature,In Progress,Major,Unresolved,None,4.11.0,camel-ai,Unknown,Zineb Bendhiba,Zineb Bendhiba,31/Jan/25 19:44,26/Feb/25 10:16,"When retrieving embeddings with similarity search, they need to be decoded back to String This is for RAG","Zineb Bendhiba: Zineb Bendhiba added a comment - 05/Feb/25 10:11 After investigating, we don't decode with the Langchain4j Embedding Model. What we need to do is to create another data transformer in the vector databases components to retrieve the text, as created with the Embedding Data Transformer. I already done some code for Qdrant and ready to push something for Camel 4.10 . I can't quickly do same with Neo4j. I will move this Jira to 4.11 and will open as many issues as needed for the camel vector database component. This one is to be closed when all tasks are complete"
https://issues.apache.org/jira/browse/CAMEL-21803,New Feature,Open,Major,Unresolved,None,None,None,Unknown,Unassigned,Zineb Bendhiba,26/Feb/25 10:16,26/Feb/25 10:16,Similar to https://issues.apache.org/jira/browse/CAMEL-21718,
https://issues.apache.org/jira/browse/CAMEL-21796,Task,Open,Major,Unresolved,None,4.11.0,None,Unknown,Thomas Cunningham,Thomas Cunningham,26/Feb/25 00:10,26/Feb/25 06:18,"In the pinecone component, collection is marked as mandatory : https://github.com/apache/camel/blob/main/components/camel-ai/camel-pinecone/src/main/java/org/apache/camel/component/pinecone/PineconeVectorDbEndpoint.java#L47-L49 My reading of the pinecone docs is that collection is not a mandatory thing, and that collections really only apply to pod-based indexes, and not to servlerless indexes ( https://docs.pinecone.io/guides/indexes/pods/understanding-collections) https://docs.pinecone.io/reference/api/2024-10/control-plane/create_collection I think we should remove the requirement that collection be mandatory.",
https://issues.apache.org/jira/browse/CAMEL-21797,Improvement,Open,Major,Unresolved,None,4.11.0,camel-pinecone,Unknown,Thomas Cunningham,Thomas Cunningham,26/Feb/25 00:12,26/Feb/25 06:18,"While researching pinecone, I noticed a number of operations we could add to the component : list collection describe collection delete collection rerank list imports describe import",
https://issues.apache.org/jira/browse/CAMEL-21791,Improvement,Open,Major,Unresolved,None,4.11.0,camel-kafka,Unknown,Unassigned,Claus Ibsen,25/Feb/25 11:01,25/Feb/25 11:01,"We should make it possible to use by setting transacted=true, and allow optional transaction.id prefix (need to generate uid). See for example how spring-kafka does it. Also it may be that we need to have support for invoking being/commit/abort transaction methods, and if we can integrate this with spring-transaction / jta via Camel transacted EIP.",
https://issues.apache.org/jira/browse/CAMEL-21787,New Feature,Open,Major,Unresolved,None,4.x,camel-kamelet,Unknown,Unassigned,Claus Ibsen,24/Feb/25 13:33,24/Feb/25 13:33,"The source and sink kamelets are using a camel component under the hood. However the kamelet have only N options, and when you know there is a option from the component you want to use but its not in the kamelet, then its not possible today. We should have some advanced mode, where you can then declare the option still.",
https://issues.apache.org/jira/browse/CAMEL-21765,Task,Open,Major,Unresolved,4.10.0,4.x,None,Unknown,Unassigned,Aurélien Pupier,19/Feb/25 15:34,22/Feb/25 16:05,"Final release is planned for the 18th March https://openjdk.org/projects/jdk/24/ this is the last release before the next Java LTS 25, planned for September 2025). it would be nice to to ensure there is no major issue before the LTS. I guess the most impacting part is potentially the removal of the SecurityManager https://openjdk.org/jeps/486 . In case, not using the removed API, might be time to remove surrounding deprecated API (see removing related APIs in https://openjdk.org/jeps/486#Advice-to-maintainers-of-libraries-that-support-the-Security-Manager ) another interesting thing are the first Quantum-Resistant modules https://openjdk.org/jeps/496 and https://openjdk.org/jeps/497",
https://issues.apache.org/jira/browse/CAMEL-19037,New Feature,Open,Major,Unresolved,None,Future,camel-jbang,Unknown,Unassigned,Claus Ibsen,10/Feb/23 17:04,21/Feb/25 17:17,We should look at if we can build native binaries of camel-jbang CLI so we can release that and have it as downloads - like the Camel K kamel CLI. We can then get it distributed in various package manager. jrelease is a project that can do that.,Claus Ibsen: Claus Ibsen added a comment - 21/Feb/25 17:17 this project is using jreleaser and quarkus to compile to native https://github.com/kcctl/kcctl
https://issues.apache.org/jira/browse/CAMEL-20045,New Feature,Open,Major,Unresolved,None,4.x,camel-opentelemetry,Unknown,Pasquale Congiusti,Claus Ibsen,25/Oct/23 09:11,20/Feb/25 09:52,"A dev console that can give insight into opentelemtry, that can benefit during development and trouble shooting.","Adriano Machado: Adriano Machado added a comment - 25/Oct/23 22:05 You mean integrating a tracing UI like Jaeger on the dev console? | Claus Ibsen: Claus Ibsen added a comment - 26/Oct/23 06:52 - edited No - a basic text based console - Also we need a prometheus exporter that can be used with camel-main / jbang. And an idea could be for the dev console to dump in prometheus format. DONE (camel-micrometer-prometheus) | Claus Ibsen: Claus Ibsen added a comment - 19/Aug/24 14:12 ammachado with your recent PR you mention some testing support that render otel in a textual graph like style. Maybe some of that work can be made into a camel devconsole. camel get XXXX or some new command name that prints this information nicely. At first the deb console can do dump to text via web browser, and later add CLI output in jbang. Then you can run it via --console, and type /q/dev/console-name-here | Adriano Machado: Adriano Machado added a comment - 20/Aug/24 18:12 davsclaus , with that PR, OTEL tests are showing something like this: - Span tree: - └─ span: d501c472b6e48010 (CLIENT) - start (direct://start) 4.295668708s - └─ span: d651aa0e09d1cb10 (INTERNAL) - start (direct://start) 4.295379875s - └─ span: 299848b818c8bd2b (CLIENT) - a (seda://a) 4.295030916s - └─ span: a16aedc7cac2324b (INTERNAL) - a (seda://a) 3.290733542s - ├─ span: e4a49484f330c7f0 (CLIENT) - b (seda://b) 1.180611917s - │ └─ span: 999cac56ad511dad (INTERNAL) - b (seda://b) 1.174607208s - └─ span: 375172c8f34adbe6 (CLIENT) - c (seda://c) 0.101531334s - └─ span: d3ea22ac1cc8dacd (INTERNAL) - c (seda://c) 0.100613333s I can try to get this working on a devconsole | Claus Ibsen: Claus Ibsen added a comment - 20/Aug/24 18:59 Thank you very much, that is exactly what is needed | Claus Ibsen: Claus Ibsen added a comment - 10/Oct/24 15:58 Adriano, I guess you did not find time. If you have any pointers / links to that code that can help generate that span tree above, then we can add in this Jira so its easier to get started later | Adriano Machado: Adriano Machado added a comment - 11/Oct/24 03:33 - edited davsclaus , I've been very busy lately, unfortunately. The code to print that span tree, in fact is already on Camel: https://github.com/apache/camel/blob/main/components/camel-opentelemetry/src/test/java/org/apache/camel/opentelemetry/SpanTreePrinter.java. | Claus Ibsen: Claus Ibsen added a comment - 17/Feb/25 12:37 squakez would be great to add a camel dev-console to your new component that can dump trace details which we can make avaiable for camel-jbang as a new command, and also in /q/dev when you run camel (also possible to see in CSB and CEQ) | Pasquale Congiusti: Pasquale Congiusti added a comment - 17/Feb/25 13:03 Sure. I'll have a look at this to understand if/how we could implement something like that. | Pasquale Congiusti: Pasquale Congiusti added a comment - 20/Feb/25 09:26 I had a look at this. So, here the outcome of a first analysis. Related to Opentelemetry The availability of traces would be available on the same JVM running the process (ie, the Camel application) via an ""in memory"" exporter . This is clearly an implementation though exclusively for unit test as it requires the ""inspector"" to be on the same process running the application. Also, for performance and consistency reason we cannot think to have traces collected inmemory. Related to TelemetryDev The new telemetry component is a kind of toy used to validate the telemetry abstraction more than anything else. It could only be used for simple tracing or for debugging purposes, but definitely not on more complex applications. The technology rely on logging traces with the same logging mechanism available in the application. If it makes sense, a separate appender can be created for the purpose so the user can later ingest the feed to some third party observability tool. If we want to collect the traces here, we'd need to parse the specific logging configuration (which can vary based on the logging technology) in order to figure it out where the file database is. We should also play with log rotation and any other implementation detail. In general I think it's not a good idea to have any telemetry collection directly in the application as it creates a high coupling with the telemetry technology used. IMO the telemetry collection should be a separate specialized process with its specific logic and tooling (possibly asynchronously) as it already happens with the agents which are taking care to push traces to a collector which is later used to analyze and render the traces for observability purposes. | Claus Ibsen: Claus Ibsen added a comment - 20/Feb/25 09:52 The dev console is only for development and to quickly be able to see what happens when you code/design a prototype. So having it in-memory in the same process for a single camel app is fine. Its for a single Camel app only, and something to make it quick/easy for a developer to type /q/trace or whatever in a web browser to see traces (in just some text format) and similar in a camel jbang command. So with the new telemetry-dev component it fits there. No its not intended for 3rd party tool integration or whatever, but for a easy all-in-a-box tool for building low-code prototypes Users that want to push to a seperate collector and all of that can surely do that, but this ticket is about to do all from camel during prototyping"
https://issues.apache.org/jira/browse/CAMEL-21736,Improvement,Open,Major,Unresolved,None,4.x,camel-google-bigquery,Unknown,Unassigned,Luis Sergio Faria Carneiro,11/Feb/25 18:05,19/Feb/25 11:10,"As I developer I would like to use the Google BigQuery SQL Standard component to fetch data from Google Big Query. Currently, when I run an Integration with the following snippet: - to: uri: google-bigquery-sql: //my_project_id:select * from poc_bigquery.employees where true parameters: serviceAccountKey: key.json I get the number of rows selected in the message body after the component runs, but not the data. The docs mention that we currently support only DML queries, so I'm opening this as a feature request;","Claus Ibsen: Claus Ibsen added a comment - 18/Feb/25 08:18 Thanks are you able to work on this, we love contributions. | Luis Sergio Faria Carneiro: Luis Sergio Faria Carneiro added a comment - 19/Feb/25 11:10 davsclaus yes, I'll try and implement this. I don't know yet how much effort it would require, as it's my first attempt implementing something on the Camel Core, but let's see how it works."
https://issues.apache.org/jira/browse/CAMEL-21749,New Feature,Open,Major,Unresolved,4.10.0,None,camel-nats,Unknown,Unassigned,Mikael Koskinen,17/Feb/25 09:57,18/Feb/25 10:57,"Currently NATS Producer and Consumer both only use some of the headers included in the NATS msg: exchange.getIn().setHeader(NatsConstants.NATS_REPLY_TO, msg.getReplyTo()); exchange.getIn().setHeader(NatsConstants.NATS_SID, msg.getSID()); exchange.getIn().setHeader(NatsConstants.NATS_SUBJECT, msg.getSubject()); exchange.getIn().setHeader(NatsConstants.NATS_QUEUE_NAME, msg.getSubscription().getQueueName()); exchange.getIn().setHeader(NatsConstants.NATS_MESSAGE_TIMESTAMP, System .currentTimeMillis()); This is problematic in couple of ways: NATS nowadays has quite many headers which are missing from the list. And also as NATS itself doesn't limit what headers are used, the headers often contain app specific metadata which would be helpful to have in Camel Integrations. Does the NATS component have to limit the headers that it reads? Could it read them all? Or could we use something like headerFilterStrategy in this? I'm happy to help with implementing the code but would appreciate if someone can provide guidance on design.","Andrea Cosentino: Andrea Cosentino added a comment - 17/Feb/25 10:03 We could map more of them if it makes sense. What are the headers present as default? | Claus Ibsen: Claus Ibsen added a comment - 17/Feb/25 10:06 Yes header filter strategy would be better, and then if you have suggestions for more default headers to include then in the top list. Also if you are aware of any object type that NATS does not allow then the filter should skip those, like its done in JMS etc. | Mikael Koskinen: Mikael Koskinen added a comment - 18/Feb/25 10:57 Some of the often used headers are: Nats-Service-Error Nats-Service-Error-Code NATS has this Services framework nowadays build-in and the services use headers to communicate the response statuses (exceptions etc): https://github.com/nats-io/nats-architecture-and-design/blob/main/adr/ADR-32.md#error-handling . Also tracing uses headers: https://github.com/nats-io/nats-architecture-and-design/blob/main/adr/ADR-41.md#ad-hoc-activation And the other aspect is the custom application specific headers. Regarding NATS component overall, currently it is missing the JetStream support. JetStream contains most of the NATS' functionality, including streams, pull/push consumers, KV and object storage so they are not available. At some point it would be great to have JS-support included too, but I wonder if it is better to do this in a separate JetStream-component."
https://issues.apache.org/jira/browse/CAMEL-21744,Task,Open,Major,Unresolved,None,None,None,Unknown,Unassigned,Federico Mariani,14/Feb/25 13:06,14/Feb/25 13:06,"https://swagger.io/specification/#fixed-fields From the spec, the security field is a declaration of which security mechanisms can be used across the API. The list of values includes alternative Security Requirement Objects that can be used. Only one of the Security Requirement Objects need to be satisfied to authorize a request. Individual operations can override this definition. The list can be incomplete, up to being empty or absent. To make security explicitly optional, an empty security requirement ({}) can be included in the array. This integration may be harder to implement, and most probably runtimes should provide custom implementations.",
https://issues.apache.org/jira/browse/CAMEL-21743,Task,Open,Major,Unresolved,None,None,None,Unknown,Unassigned,Federico Mariani,14/Feb/25 13:04,14/Feb/25 13:04,"https://swagger.io/specification/#fixed-fields From the spec, the webhooks field represents the incoming webhooks that MAY be received as part of this API and that the API consumer MAY choose to implement. Closely related to the callbacks feature, this section describes requests initiated other than by an API call, for example by an out of band registration. The key name is a unique string to refer to each webhook, while the (optionally referenced) Path Item Object describes a request that may be initiated by the API provider and the expected responses. An example is available.",
https://issues.apache.org/jira/browse/CAMEL-21742,Task,Open,Major,Unresolved,None,None,None,Unknown,Unassigned,Federico Mariani,14/Feb/25 13:03,14/Feb/25 13:03,https://swagger.io/specification/#fixed-fields jsonSchemaDialect is a String representing the default value for the $schema keyword within Schema Objects contained within this OAS document. This MUST be in the form of a URI.,
https://issues.apache.org/jira/browse/CAMEL-21278,Improvement,In Progress,Major,Unresolved,4.x,4.11.0,camel-jbang,Unknown,Gaelle Fournier,Gaelle Fournier,26/Sep/24 13:11,13/Feb/25 10:24,This is a follow-up from https://issues.apache.org/jira/browse/CAMEL-21152 . Clean-up identified: remove unused parameters and setters/getters add some model builder refactor the tests to improve the performance move some trait specific code from KubernetesExport to the XxxTrait class,Claus Ibsen: Claus Ibsen added a comment - 01/Feb/25 08:20 Is there more work to do here | Gaelle Fournier: Gaelle Fournier added a comment - 13/Feb/25 10:24 The test refactoring part is still needed.
https://issues.apache.org/jira/browse/CAMEL-21636,Task,Open,Major,Unresolved,None,4.x,upgrade-recipes,Unknown,Jiri Ondrusek,Jiri Ondrusek,20/Jan/25 09:22,06/Feb/25 10:51,Cover migrations described by migration guide,
https://issues.apache.org/jira/browse/CAMEL-21722,Improvement,Open,Major,Unresolved,None,4.11.0,camel-core,Unknown,Unassigned,Claus Ibsen,05/Feb/25 12:42,05/Feb/25 12:42,"We should make it possible to enable capturing attachments details in the tracer. This can assist trouble shooting and tooling to show details. Attachments can contain headers, and data (name, content-type) such as emails with attached files, or HTTP post with form-data etc. The trace/debug command in jbang could also be improved to show attachment data.",
https://issues.apache.org/jira/browse/CAMEL-21587,New Feature,In Progress,Major,Unresolved,None,None,None,Unknown,Zineb Bendhiba,Zineb Bendhiba,03/Jan/25 13:51,04/Feb/25 10:50,"Problem: Apache Camel Langchain4j and Vector databases (Qdrant/Pinecone) can't perform similarity search for RAG. This limitation hinders our ability to use Apache Camel with Vector databases with Langchain4j for robust search capabilities. While creating an example of RAG using Apache Camel Langchain4j and Apache Camel Vector databases, I realized that the Vector databases components cannot handle similarity search for the Langchain4j scenarios. Despite trying both Qdrant and Pinecone, I encountered issues when attempting to perform RAG (Relevance-based Active Learning) with these databases. Research I've analyzed various existing issues related to Search with Qdrant and Pinecone. For example, the Camel Qdrant component doesn't provide similarity search capabilities. In contrast, Pinecone allows for searching based on similarity. However, when trying to use Pinecone with Apache Camel, I encountered a challenge: we need to convert text to Embeddings using Camel Langchain4j Embeddings Component. The resulting list of Embeddings cannot be used directly with RAG. Proposed Solution To address this limitation, I propose implementing a new feature (or new camel AI component) that enables easy similarity search for RAG using Apache Camel and Vector databases. This could involve leveraging the abstraction from Embedding stores in Langchain4j to provide an easy way to perform similarity searches.","Zineb Bendhiba: Zineb Bendhiba added a comment - 06/Jan/25 16:03 I started working on the idea of adding the similarity search for Langchain4j as high abstract. However, while starting coding it, I'm realizing it's not that compatible with my idea of using our own vector databases components. So here's a thing, I'm first of all adding the vector search for camel-qdrant. here's the JIRA: https://issues.apache.org/jira/browse/CAMEL-21596 And once this one is pushed, I'll do some PoC and brainstorm on the next step for this | Zineb Bendhiba: Zineb Bendhiba added a comment - 31/Jan/25 19:46 Decoding those embeddings retrieved from Qdrant is missing . the issue https://issues.apache.org/jira/browse/CAMEL-21696 will add this feature"
https://issues.apache.org/jira/browse/CAMEL-21438,Test,Open,Major,Unresolved,4.9.0,None,"camel-core,(2)camel-file,camel-lumberjack",Novice,Unassigned,Otavio Rodolfo Piske,12/Nov/24 09:36,31/Jan/25 12:30,"We have multiple tests that run unreliably on platforms such as ppc64le, s390x and aarch64. At lot of these tests are related to concurrency and threading scenarios, which could indicate incorrect assumptions about the memory model behavior on these platforms.","Jang-Vijay Singh: Jang-Vijay Singh added a comment - 03/Jan/25 21:39 Please share some observations of currently flaky tests. Some of the camel-kafka BreakOnFirstError* tests that were enabled on those platforms after significant changes seemed quite stable. eg. https://issues.apache.org/jira/browse/CAMEL-20722 Not all were enabled but worth examining the enabled ones, and identifying some examples of ones that are flaky now. I’d like to look in to this if that’s ok | Jang-Vijay Singh: Jang-Vijay Singh added a comment - 03/Jan/25 21:41 PS: Checking linked PRs for disabled tests | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 29/Jan/25 08:16 Added several more flakies: components/camel-barcode/src/test/java/org/apache/camel/dataformat/barcode/BarcodeDataFormatSpringTest.java core/camel-core/src/test/java/org/apache/camel/component/file/AntPathMatcherGenericFileFilterTest.java core/camel-core/src/test/java/org/apache/camel/component/file/FileConsumeDoneFileIssueTest.java core/camel-core/src/test/java/org/apache/camel/component/file/FileConsumerBeginAndCommitExpressionRenameStrategyTest.java core/camel-core/src/test/java/org/apache/camel/component/file/FileConsumerDirectoryMustExistBridgeErrorHandlerTest.java core/camel-core/src/test/java/org/apache/camel/component/file/FileConsumerFileFilterOptimizedTest.java core/camel-core/src/test/java/org/apache/camel/component/file/FileConsumerFilterFileTest.java core/camel-core/src/test/java/org/apache/camel/component/file/FileConsumerResumeFromOffsetStrategyTest.java core/camel-core/src/test/java/org/apache/camel/component/file/FileKeepLastModifiedTest.java core/camel-core/src/test/java/org/apache/camel/component/file/FileNoOpLockFileTest.java core/camel-core/src/test/java/org/apache/camel/component/seda/SedaWaitForTaskNewerOnCompletionTest.java core/camel-core/src/test/java/org/apache/camel/component/validator/ValidatorResourceResolverFactoryTest.java core/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeEntityResolverTest.java core/camel-core/src/test/java/org/apache/camel/impl/DefaultCamelContextSuspendResumeRouteStartupOrderTest.java core/camel-core/src/test/java/org/apache/camel/impl/DefaultProducerCacheTest.java core/camel-core/src/test/java/org/apache/camel/impl/DurationRoutePolicyMaxSecondsTest.java core/camel-core/src/test/java/org/apache/camel/impl/engine/DefaultSupervisingRouteControllerTest.java core/camel-core/src/test/java/org/apache/camel/processor/MulticastParallelStreamingTest.java core/camel-core/src/test/java/org/apache/camel/processor/MulticastParallelStreamingTimeoutTest.java core/camel-core/src/test/java/org/apache/camel/processor/MulticastParallelStressTest.java core/camel-core/src/test/java/org/apache/camel/processor/ShutdownCompleteCurrentTaskOnlyTest.java core/camel-core/src/test/java/org/apache/camel/processor/WireTapBeanAsProcessorTest.java core/camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateCompleteAllOnStopTest.java core/camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateControllerTest.java core/camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateForceCompletionOnStopParallelTest.java core/camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateForceCompletionOnStopTest.java core/camel-core/src/test/java/org/apache/camel/processor/throttle/ThrottlingExceptionRoutePolicyHalfOpenHandlerSedaTest.java core/camel-core/src/test/java/org/apache/camel/processor/throttle/ThrottlingExceptionRoutePolicyKeepOpenOnInitTest.java core/camel-core/src/test/java/org/apache/camel/processor/throttle/concurrent/ConcurrentRequestsThrottlerTest.java core/camel-core/src/test/java/org/apache/camel/processor/throttle/requests/ThrottlerTest.java | Jang-Vijay Singh: Jang-Vijay Singh added a comment - 30/Jan/25 11:35 Hi orpiske Do you have some logs related to the component.file flakies? I couldn't spot AntPathMatcherGenericFileFilterTest in the flakes in Jenkins builds 713 for main branch (earliest build that's still available). Didn't spot it in flakes in build 712 either as I downloaded the log a few days ago. I can see that in newer builds its skipped in build 716 onwards. JV"
https://issues.apache.org/jira/browse/CAMEL-21195,Test,Open,Major,Unresolved,4.8.0,4.x,camel-core,Novice,Unassigned,Otavio Rodolfo Piske,11/Sep/24 08:06,31/Jan/25 08:49,Fix flaky tests for Camel 4.9. Some flakies: https://ge.apache.org/scans/tests?search.rootProjectNames=Camel&search.tasks=verify&search.timeZoneId=Europe%2FParis,"Claus Ibsen: Claus Ibsen added a comment - 28/Nov/24 10:28 Can that flaky report (link above) be made to only show for linux/ubuntu. As the IBM platforms is too flaky and not for our community to support. | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 29/Nov/24 09:04 - edited davsclaus yes, you have to enter the following information on the fields: hostname: *gridcore* label: main The first one filters all x86 machines and the second filters only the main branch. | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 29/Nov/24 09:06 I am currently unassigning this from Nikita as he is currently focusing on CSB stuff. | Claus Ibsen: Claus Ibsen added a comment - 30/Jan/25 20:16 Error mock://result Received message count. Expected: <1> but was: <0> Stacktrace java.lang.AssertionError: mock://result Received message count. Expected: <1> but was: <0> at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:2015) at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1950) at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:453) at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:431) at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:421) at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:220) at org.apache.camel.ContextTestSupport.assertMockEndpointsSatisfied(ContextTestSupport.java:900) at org.apache.camel.component.xslt.XsltFromFileExceptionTest.testXsltFromFileExceptionOk(XsltFromFileExceptionTest.java:36) at java.base/java.lang.reflect.Method.invoke(Method.java:580) at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387) at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312) at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843) at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808) at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188) | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 31/Jan/25 08:49 BTW, our builds disappeared from develocity, so we don't have updated information about flakies. I opened a ticket for infra. https://issues.apache.org/jira/browse/INFRA-26486"
https://issues.apache.org/jira/browse/CAMEL-21598,Task,Open,Major,Unresolved,None,4.11.0,None,Unknown,Andrea Cosentino,Andrea Cosentino,07/Jan/25 11:21,30/Jan/25 20:02,"Some have been removed, some got new versions.",Claus Ibsen: Claus Ibsen added a comment - 30/Jan/25 16:17 is this work done | Andrea Cosentino: Andrea Cosentino added a comment - 30/Jan/25 16:20 Not yet. Moving to 4.11.0
https://issues.apache.org/jira/browse/CAMEL-21669,Improvement,Open,Major,Unresolved,None,4.x,camel-jbang,Unknown,Unassigned,Christoph Deppisch,28/Jan/25 12:03,28/Jan/25 13:31,"The Camel JBang Kubernetes plugin has hit some regressions recently. The unit tests of the plugin are disabled right now, mainly because they have the requirement to access Kubernetes/Docker on the host machine. This is quite resource consuming and limits the test execution on some environments. This is why the tests are restricted to manual execution right now. We should improve the unit tests to work with only lightweight infrastructure (e.g. using the fabric8 Kubenretes mock server and Jib) so we can run the tests also on hosts without any Kubernetes or Docker installed. Also the tests have shown some flakiness in the past that needs to be fixed. As soon as we have some stable tests that do not require Kubernetes or Docker on the host we can (re)enable the unit tests (maybe limited to nightly execution) to ensure the stability of the plugin and avoid introducing too many regressions.",
https://issues.apache.org/jira/browse/CAMEL-21667,New Feature,Open,Major,Unresolved,None,4.x,camel-spring-boot-starters,Unknown,Unassigned,Felix Huisinga,28/Jan/25 08:39,28/Jan/25 10:09,"Proposal: In order to use the new Spring Hot-Reload for the SSL context, we need to be able to use SSL bundle and also use the updated one after reloading in http component. Spring Docs: https://spring.io/blog/2023/11/07/ssl-hot-reload-in-spring-boot-3-2-0","Claus Ibsen: Claus Ibsen added a comment - 28/Jan/25 08:49 This is spring boot specific, and such feature should be in camel-http-starter | Felix Huisinga: Felix Huisinga added a comment - 28/Jan/25 09:07 Agreed, this is a `camel-http-starter` feature. I adjusted the assigned component. | Claus Ibsen: Claus Ibsen added a comment - 28/Jan/25 09:43 You are welcome to work on this and send a PR if you have time | Felix Huisinga: Felix Huisinga added a comment - 28/Jan/25 10:09 I will try to work on it and send a proposal"
https://issues.apache.org/jira/browse/CAMEL-20199,Improvement,Open,Major,Unresolved,None,4.x,came-core,Unknown,Guillaume Nodet,Nicolas Filotto,06/Dec/23 14:09,28/Jan/25 08:00,"For full support of Virtual Threads, several sub-tasks need to be done: Avoid Lengthy and Frequent Pinning by replacing synchronized blocks with ReentrantLocks (use the option -Djdk.tracePinnedThreads=full to print stack traces when a thread blocks while pinned) Don't Cache Expensive Reusable Objects in Thread-Local Variables by avoiding thread locals when possible since when using Virtual Threads, the objects will never be reused so if the thread-local variables are never reset, it will end up with an OOME. Use Semaphores to Limit Concurrency instead of relying on the size of the thread pool when applicable Allow to expose ThreadPerTaskExecutor through JMX indeed so far it is limited to ThreadPoolExecutor References https://docs.oracle.com/en/java/javase/21/core/virtual-threads.html","Claus Ibsen: Claus Ibsen added a comment - 05/Aug/24 08:41 Thanks Nicolas for working on this | Claus Ibsen: Claus Ibsen added a comment - 27/Aug/24 17:52 Nicolas are you able to work on this, and if not can you maybe write a few comments about the outstanding work that you are currentely doing (I think it was something about synchronized code and doing this for all the components). | Nicolas Filotto: Nicolas Filotto added a comment - 04/Sep/24 06:08 - edited FYI I still work on it but I can hardly work full time on it. gnodet Maybe we can discuss about how to split the task, if you want to get involved. Since I started to work on the synchronized block issue, maybe you can simply pick another item in the list. WDYT? | Guillaume Nodet: Guillaume Nodet added a comment - 04/Sep/24 06:42 nfilotto sounds good, I'll investigate the thread locals... | Nicolas Filotto: Nicolas Filotto added a comment - 04/Sep/24 07:00 Awesome, thank you for your help and understanding | Raymond: Raymond added a comment - 02/Nov/24 23:29 I have a couple of questions based on this ticket: 1. When the support of virtual threads is complete, can it be considered production-ready? 2. Is it enough to set the System Property camel.threads.virtual.enabled = true or do you also need to add some code to enable virtual threads? (assuming JDK21+ is used). 3. When is the system property used? Only on the command line? Or is it also possible to do this: System.setProperty( ""camel.threads.virtual.enabled"" , ""true"" ) ; Does this only work when the property is set before a new CamelContext is created, or can it also set after it? 4. In the ticket, there is mention of semaphores to limit the amount of tasks. Isn't it clearer to not speak of a ThreadPool when technically it uses a different executor? For example, by using a VirtualThreadProfileBuilder and register that, instead of a ThreadPoolProfileBuilder? 5. As virtual threads are considered lightweight, what would be considered a good limit for tasks for a default profile? 10, 1000, 1000000? What would be the rules to set the right profile for virtual threads? | Claus Ibsen: Claus Ibsen added a comment - 08/Jan/25 14:51 nfilotto do you get time to finish the last set of components ? | Claus Ibsen: Claus Ibsen added a comment - 18/Jan/25 08:26 I think Nicolas has finished preparing the components now. The big work for full virtual threads support is still outstanding and would take time over a number of releases. | Nicolas Filotto: Nicolas Filotto added a comment - 28/Jan/25 07:42 Hi gnodet , did you have the chance to start working on the thread locals? I have potentially an idea for it so let me know if you want to do it or if I can take it over? | Guillaume Nodet: Guillaume Nodet added a comment - 28/Jan/25 08:00 nfilotto go for it ! Thx !"
https://issues.apache.org/jira/browse/CAMEL-21190,Task,In Progress,Major,Unresolved,None,4.x,build system,Unknown,Aurélien Pupier,Claus Ibsen,09/Sep/24 07:37,27/Jan/25 13:58,There is some cruft that says java 8 and so on. We had trouble with the CSB release and its outdated javadoc plugin,
https://issues.apache.org/jira/browse/CAMEL-21652,Improvement,Open,Major,Unresolved,None,None,camel-core,Unknown,Unassigned,Bruno Meseguer,24/Jan/25 12:53,27/Jan/25 08:57,"For certain data manipulations, we need to set the type of the Variable to a particular class. That step forces the user to add extra actions. For XML transformations for instance, the process needs to work with `Document` when applying XLSTs. In the old days, to get it right we needed 4 steps: Call backend convertBodyTo (Document) Body -> SetHeader Execute XSLT (Data Mapper) Then Variables were added to Camel Core and now we can save 1 step: Call backend -> store in Variable convertVariableTo (Document) Execute XSLT (Data Mapper) The request is to enhance the ""Receive Variable"" feature to also define the Type of the variable, to save an extra step, so the user just needs: Call backend -> store in Variable with Type (Document) Execute XSLT (Data Mapper)","Claus Ibsen: Claus Ibsen added a comment - 25/Jan/25 07:27 Using type converter is not an ideal way for data transformation - its just happen that XML has that Document type from the JDK. But most others would need transformation via data formats such as jackson and the many data formats Camel have. We have to be careful to not make the DSL more complex with more options | Bruno Meseguer: Bruno Meseguer added a comment - 27/Jan/25 08:57 I understand, yes, it makes sense."
https://issues.apache.org/jira/browse/CAMEL-21658,New Feature,Open,Major,Unresolved,None,4.x,camel-jbang,Unknown,Unassigned,Claus Ibsen,25/Jan/25 13:45,25/Jan/25 13:45,"Pre build a fat-jar with all dependencies included and easy to run via java -jar / jbang or launch scripts / or similar to spring boot packaging executable=true. camel-jbang uses its own dynamic dependency resolver (also maven) - this would be better / easier / quicker than today with first jbang running parsing the .java file and seeing the // DEPS etc and doing its ""work"" and then calling camel-jbang main class for the CLI that then does its own thing aftetwards. The fat-jar can still be launched from jbang. Also each fat-jar is its own release so there is no complexity of mixed versions of Camel.",
https://issues.apache.org/jira/browse/CAMEL-21644,New Feature,Open,Major,Unresolved,None,4.x,None,Unknown,Tomohisa Igarashi,Claus Ibsen,22/Jan/25 14:43,22/Jan/25 16:14,Look at Apache Daffodil and see if it makes sense to have some kind of camel component for this.,
https://issues.apache.org/jira/browse/CAMEL-21539,New Feature,Open,Major,Unresolved,None,None,None,Unknown,James Netherton,Zineb Bendhiba,12/Dec/24 15:30,21/Jan/25 09:44,Implement Vector search capabilities for Infinispan. Also add the langchain4j Embeddings DataFormat for Infinispan + an Integration test in the langchain4j embeddings directory https://github.com/apache/camel/tree/main/components/camel-ai/camel-langchain4j-embeddings/src/test/java/org/apache/camel/component/langchain4j/embeddings,"James Netherton: James Netherton added a comment - 15/Jan/25 12:02 I have a POC where I can store and query an embedding created by Langchain4j. It works in a similar way to the Langchain4j Infinispan embedding store. I added options so you can configure the vector dimension, similarity and the distance value to use in kNN searches. Example usage with langchain4j-embeddings: // Store an embedding from( ""direct:put"" ) .to( ""langchain4j-embeddings:test"" ) .transform( new DataType( ""infinispan:embeddings"" )) .to( ""infinispan:test%s?embeddingStoreDimension=3"" ); // Query embeddings using a pre-baked kNN query from( ""direct:query"" ) .to( ""langchain4j-embeddings:test"" ) .setHeader(InfinispanConstants.OPERATION).constant(InfinispanOperation.QUERY) .transform( new DataType( ""infinispan:embeddings"" )) .to( ""infinispan:test?embeddingStoreDimension=3"" ); zbendhiba WDYT? | Zineb Bendhiba: Zineb Bendhiba added a comment - 15/Jan/25 16:16 that sounds great ! Many thanks jamesnetherton | James Netherton: James Netherton added a comment - 21/Jan/25 09:44 Thinking that it may be safer to do this for 4.11 given that we are close(ish) to the next LTS release. I am more or less done with development. I've got a branch with my current WIP here: https://github.com/jamesnetherton/camel/tree/CAMEL-21539"
https://issues.apache.org/jira/browse/CAMEL-21619,Improvement,Open,Major,Unresolved,None,4.x,camel-kamelet,Unknown,Unassigned,Claus Ibsen,14/Jan/25 09:40,14/Jan/25 09:40,"When using some kamelets such as database or messaging systems, then the runtime like SB or Q comes with their standard connection pooling. It may be desirable to have a way for a kamelet to adapt and use this from the same kamelet, so we do not have runtime specific kamelets. Also consider camel-main runtime should have a way for connection pooling. This is mostly applicable to only JMS / Artemis / SQL kamelets.",
https://issues.apache.org/jira/browse/CAMEL-21610,Improvement,Open,Major,Unresolved,None,4.11.0,camel-jbang,Unknown,Unassigned,Claus Ibsen,11/Jan/25 13:30,11/Jan/25 13:30,"Sometimes when using a kamelet you may want to debug inside the kamelet for trouble shooting if something is mysterious. Or when you build custom kamelets and want to try them. Also for route templates in general then dynamic routes can be added from the template, so the debugger needs to know about its source location and debug in the templates.",
https://issues.apache.org/jira/browse/CAMEL-21597,New Feature,Open,Major,Unresolved,None,4.11.0,None,Unknown,Andrea Cosentino,Andrea Cosentino,07/Jan/25 11:20,10/Jan/25 10:09,,
https://issues.apache.org/jira/browse/CAMEL-21284,Improvement,Open,Major,Unresolved,4.9.0,4.x,None,Moderate,Unassigned,Nicolò Scarpa,27/Sep/24 09:34,09/Jan/25 09:19,"The new camel-clickup component relies on the camel-webhook (meta-)component for providing webhook functionality. This is actually the encouraged design for implementing new webhooks capable components, but it's a bit hacky since the specialized component won't be actually used as an endpoint, but it would be rather used as the delegate for the camel-webhook component (i.e. the URI for creating a camel-clickup endpoint is ""webhook:clickup:<workspaceId>"" , instead of ""clickup:<workspaceId>"" ). See if it's possibile to make camel-webhook reusable by other components, so no code duplication is needed to implement webhook functionality. Its fine to have camel-webhook in pom.xml, but make the clickup as a pure component without the ""webhook:xxx"" prefix in its URI. In other words, the goal is to make clickup a first-class component that is like others and also tooling/dsl friendly.",
https://issues.apache.org/jira/browse/CAMEL-21424,Improvement,Open,Major,Unresolved,None,4.11.0,camel-jbang,Unknown,Unassigned,Claus Ibsen,10/Nov/24 06:36,09/Jan/25 09:19,This can be needed when users want to trouble shoot and something does not work as expected then they can try to export in verbose mode that can help clarify where the problem is.,
https://issues.apache.org/jira/browse/CAMEL-21425,New Feature,Open,Major,Unresolved,None,4.11.0,camel-jbang,Unknown,Unassigned,Claus Ibsen,10/Nov/24 06:40,09/Jan/25 09:19,"Installing camel jbang CLI is done the standard jbang way, but then you get the lastest release, and jbang has this auto-update checker that calls the internet which you may not want. We should have some camel command that can upgrade or dowgrade the CLI. Then users can be in more control and only use one CLI tool (not need to learn jbang first).",
https://issues.apache.org/jira/browse/CAMEL-8249,New Feature,Open,Major,Unresolved,None,Future,None,Unknown,Unassigned,Claus Ibsen,15/Jan/15 07:02,07/Jan/25 12:30,We should have a camel-keycloak component that integrates with keycloak https://www.keycloak.org/ For example similar to as camel-spring-security http://camel.apache.org/security https://camel.apache.org/components/next/others/spring-security.html,"Andrea Cosentino: Andrea Cosentino added a comment - 07/Jul/16 09:52 I'll take a look here. | Onder Sezgin: Onder Sezgin added a comment - 19/Feb/21 12:40 I would like to take a look at this if there is no progress yet.. | Vignesh Nayak Manel: Vignesh Nayak Manel added a comment - 28/May/23 12:47 davsclaus Can I pickup this ticket, if anyone else is not working on this? | Claus Ibsen: Claus Ibsen added a comment - 28/May/23 15:05 Yes you are welcome to work on this, thanks | Kipchumba Bett: Kipchumba Bett added a comment - 11/Jan/24 06:24 Is anyone currently working on this ticket? If not, I'd like to pick it up. If there's a Pull Request in progress, could you please share the link? Thanks! | Andrea Cosentino: Andrea Cosentino added a comment - 11/Jan/24 06:46 Hello, you're welcome to help. There is no PR in progress. | Kipchumba Bett: Kipchumba Bett added a comment - 11/Jan/24 07:19 Thanks for the prompt reply. Kindly consider updating the issue; some links appear to be non-existent. Alternatively, may I request the appropriate permissions to modify the ticket description? | Andrea Cosentino: Andrea Cosentino added a comment - 11/Jan/24 08:31 Updated. I don't know if vmanel is working on that or not, but it is from May we don't have news about this issue. | Kipchumba Bett: Kipchumba Bett added a comment - 23/Jan/24 10:20 I've been looking at the `camel-spring-security` component. From my understanding and definition here: The Camel Spring Security component provides role-based authorization for Camel routes. It leverages the authentication and user services provided by Spring Security (formerly Acegi Security) and adds a declarative, role-based policy system to control whether a route can be executed by a given principal. The `camel-spring-security` component is used to control and restrict access to Camel routes based on user roles. So adding a `camel-keycloak` similar to `camel-spring-security` doesn't quite fit with our use case. I'm proposing a `camel-keycloak` component that will allow developers to interact with Keycloak Admin's REST API in a more straightforward and Java-idiomatic way, leveraging the power of Apache Camel's integration capabilities. For our case, apart from the standard authentication and authorization use cases, another significant use case is to synchronize roles from System A to Keycloak. System A, in this context, is an external system that does not fully utilize Keycloak for its user and role management. However, it is beneficial to have the roles from System A available in Keycloak for assignment. This synchronization will ensure that the roles defined in System A are consistently available in Keycloak, providing a unified view of roles across both systems. This synchronization can be achieved by periodically polling System A for its roles or consuming events from System A and updating the roles in Keycloak accordingly. For instance; having camel-keycloak component with the syntax: keycloak://role/read?clientUuid=ox&realm=ozone&roleName=SystemAdmin&keycloakClient=#keycloakClient or keycloak://client/create?realm=ozone&client=client-to-create&keycloakClient=#keycloakClient acosentino , What do you think about this approach? References: https://www.keycloak.org/docs-api/21.1.1/rest-api/# https://mvnrepository.com/artifact/org.keycloak/keycloak-admin-client https://camel.apache.org/components/next/others/spring-security.html | Andrea Cosentino: Andrea Cosentino added a comment - 23/Jan/24 10:25 In my opinion camel-keycloak should work in the same way as Camel-Spring-security does. This means leveraging Keycloak to allow execution of routes. Once we have that, we can think about supporting operations like read, create etc. But the original aim of the component should be authentication/authorization of routes execution. | Kipchumba Bett: Kipchumba Bett added a comment - 23/Jan/24 10:50 I'm more interested in the second part(adding support for read, create, ... operations) but sure, let's have camel-keyloak work the same way as camel-spring-security does first. | Naman Gupta: Naman Gupta added a comment - 19/Dec/24 19:15 This seems interesting, Can we work together on this? | Claus Ibsen: Claus Ibsen added a comment - 07/Jan/25 12:30 corneliouzbett okay a component to manage keycloak is also interesting so you can use it to sync users as you talk about."
https://issues.apache.org/jira/browse/CAMEL-21095,New Feature,Open,Major,Unresolved,None,4.x,camel-core,Unknown,Unassigned,Claus Ibsen,18/Aug/24 08:58,02/Jan/25 16:29,You can configure this in classic XML DSL (spring) (see CAMEL-20774 ) and in camel-main/SB you can configure this via properties in camel.ssl. However it would be great to have it first-class in XML IO and YAML DSL as well so its easier to configure there also and for tooling. Configure SSL is complex and this can help with better tooling assistance.,
https://issues.apache.org/jira/browse/CAMEL-21577,Task,Open,Major,Unresolved,4.10.0,None,camel-test-infra,Novice,Unassigned,Otavio Rodolfo Piske,02/Jan/25 09:04,02/Jan/25 09:23,We have a few components that are NOT using the container properties file. This should be fixed: camel-test-infra-cli camel-test-infra-hivemq camel-test-infra-smb,
https://issues.apache.org/jira/browse/CAMEL-20686,Task,In Progress,Major,Unresolved,4.6.0,4.x,camel-core,Novice,Jang-Vijay Singh,Otavio Rodolfo Piske,18/Apr/24 07:42,02/Jan/25 06:23,"We have lots of file tests in core that run in parallel and try to write to the same file. This leads to a lot of flakiness in file tests. Look for tests doing things like testFile(""output.txt"") or testFile(""input.txt"") or other similar repetitive names (i.e.: foo , bar , etc) should be considered suspicious and need careful review. The tests should be adjusted to one of the following (in order of preference): Use separate resources for each test (i.e: "" input."" + TestClass.class.getSimpleName() + "".txt"" ) Use JUnit's 5 temporary file provider Use resource locks via JUnit's @ResourceLock annotation. Or Isolated if safe to do so","Jang-Vijay Singh: Jang-Vijay Singh added a comment - 04/May/24 11:39 Hi orpiske , davsclaus , I did some searches through the camel-core code and spotted some such examples. I might keep making changes and create pull requests if there are no objections | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 16/Jun/24 06:47 Thank you! Please, feel free to look and fix them. | Jang-Vijay Singh: Jang-Vijay Singh added a comment - 20/Jun/24 12:06 Created initial pr with three tests that had the maximum number of occurrences of static filenames (hello.txt, howdy.txt etc.): https://github.com/apache/camel/pull/14608 This document is to track progress: IN_PROGRESS_With_occurrence_count.rtf | Jang-Vijay Singh: Jang-Vijay Singh added a comment - 10/Jul/24 15:46 I notice that there are a large number of issues flagged on Sonar in relation to camel-core. For the set of tests identified here, I am also making those fixes though they are not directly related. PR with set 4 submitted: https://github.com/apache/camel/pull/14781 | Jang-Vijay Singh: Jang-Vijay Singh added a comment - 16/Jul/24 07:29 Hi orpiske & davsclaus Based on Devlocity observations: Relatively few of org.apache.camel.component.file. * tests are flaky (see screenshot sorted by FLAKY % desc) , so I am prioritising the ones flagged up there. The reason a lot of them don't seem to have problems is that the test-specific files like ""hello.txt"" are created within JUnit runtime temp folders that are fairly unique (e.g. \Temp\junit8522201667184135259) Not all of org.apache.camel.component.file.* tests are in core/camel-core - Many of these are spread out in other components like camel-ftp - the lists I have attached are only after searching core/camel-core , as the ticket description refers to camel-core If I do change tests in multiple different projects, I will submit separate PR's Tried an automated scripted approach to change all - might use that later if viable | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 16/Jul/24 07:31 Thanks for looking at this jvsingh ! | Jang-Vijay Singh: Jang-Vijay Singh added a comment - 17/Dec/24 03:20 Picking this up again. Submitted a PR. List of in-progress files here: IN_PROGRESS.csv (and added affected test files from camel-ftp to this list as well)"
https://issues.apache.org/jira/browse/CAMEL-21573,Task,Open,Major,Unresolved,None,4.x,camel-spring-boot,Unknown,Unassigned,Claus Ibsen,28/Dec/24 17:10,28/Dec/24 17:10,When using CSB then you should use camel-platform-http-starter to integrate Camel with the HTTP server from SB. We should deprecate 3rd party http servers like undertow and jetty.,
https://issues.apache.org/jira/browse/CAMEL-21429,Dependency upgrade,Open,Major,Unresolved,None,4.x,camel-kafka,Unknown,Unassigned,Claus Ibsen,11/Nov/24 12:00,27/Dec/24 10:59,There may be some new options we can include in the camel-kafka component https://kafka.apache.org/39/documentation.html#upgrade,Claus Ibsen: Claus Ibsen added a comment - 12/Nov/24 17:41 Spring Boot is based on Kafka Client 3.8.x for the upcoming 3.4.0 release.
https://issues.apache.org/jira/browse/CAMEL-21540,New Feature,Open,Major,Unresolved,None,None,None,Unknown,Unassigned,Zineb Bendhiba,12/Dec/24 15:34,12/Dec/24 15:34,Implement Vector search capabilities for PostgreSQL. Also add the langchain4j Embeddings DataFormat for PostgreSQL + an Integration test in the langchain4j embeddings directory https://github.com/apache/camel/tree/main/components/camel-ai/camel-langchain4j-embeddings/src/test/java/org/apache/camel/component/langchain4j/embeddings,
https://issues.apache.org/jira/browse/CAMEL-21527,New Feature,Open,Major,Unresolved,4.8.0,4.x,upgrade-recipes,Unknown,Unassigned,Federico Mariani,09/Dec/24 16:32,10/Dec/24 13:39,"A recipe for Camel Spring Boot users can be added with the following features: Upgrade to the Spring Boot version supported by Camel via UpgradeSpringBoot_3_3 Upgrade the camel-spring-boot-bom version to the latest released provide all the Camel recipes in one place For example, a recipe for Camel Spring Boot 4.8 would be like this: --- type: specs.openrewrite.org/v 1 beta/recipe name: org.apache.camel.upgrade.camel 48 .CamelSpringBootMigrationRecipe displayName: Migrates `camel Spring Boot` application to `Camel Spring Boot 4 . 8 ` description: Migrates `camel Spring Boot` application to `Camel Spring Boot 4 . 8 ` recipeList: - org.openrewrite.java.spring.boot 3 .UpgradeSpringBoot_ 3 _ 3 - org.apache.camel.upgrade.camel 47 .CamelMigrationRecipe - org.apache.camel.upgrade.camel 46 .CamelMigrationRecipe - org.apache.camel.upgrade.camel 45 .CamelMigrationRecipe - org.apache.camel.upgrade.camel 44 .CamelMigrationRecipe - org.apache.camel.upgrade.camel 40 .CamelMigrationRecipe - org.openrewrite.maven. UpgradeDependencyVersion: groupId: '*camel*' artifactId: 'camel-spring-boot-bom' newVersion: 4 . 8 . 0 once we ship a recipe like this, the following configuration can be used in the pom.xml openrewrite plugin section: <plugin> <groupId> org.openrewrite.maven </groupId> <artifactId> rewrite-maven-plugin </artifactId> <version> 5.46.1 </version> <configuration> <exportDatatables> true </exportDatatables> <activeRecipes> <recipe> org.apache.camel.upgrade.camel48.CamelSpringBootMigrationRecipe </recipe> </activeRecipes> </configuration> <dependencies> <dependency> <groupId> org.openrewrite.recipe </groupId> <artifactId> rewrite-spring </artifactId> <version> 5.24.1 </version> </dependency> <dependency> <groupId> org.apache.camel.upgrade </groupId> <artifactId> camel-upgrade-recipes </artifactId> <version> 4.8.0 </version> </dependency> </dependencies> </plugin> In this case, rewrite-spring:5.24.1 will do the upgrade to the Spring Boot version supported by Camel 4.8.",Federico Mariani: Federico Mariani added a comment - 09/Dec/24 16:39 fyi jondruse
https://issues.apache.org/jira/browse/CAMEL-21254,Improvement,Open,Major,Unresolved,None,None,camel-google,Unknown,Andrea Cosentino,Andrea Cosentino,24/Sep/24 07:15,25/Nov/24 07:58,"https://camel.zulipchat.com/#narrow/stream/257301-camel-spring-boot/topic/camel.20google-biqquery The use case is particular, the user needs to move stuff from one GCP project to another one, in Kubernetes environment.",
https://issues.apache.org/jira/browse/CAMEL-21426,New Feature,Open,Major,Unresolved,None,4.x,"camel-jbang,(1)examples",Unknown,Unassigned,Claus Ibsen,10/Nov/24 09:28,12/Nov/24 19:55,We have a lot of mixed stuff at https://github.com/apache/camel-kamelets-examples We should create a new camel-jbang-examples folder with a smaller set of examples that are better documented and aimed for users new to Camel or quickly want to try and see Camel in action. We should generate a table of content (like we do for the other examples repo) that has a summary and category so users can better find what they are looking for.,"Claus Ibsen: Claus Ibsen added a comment - 12/Nov/24 19:51 Lets start small and have a few examples that are doing basic from -> to for the most common components that shows correct configuration (database / bean / etc) And for EIPs is not a requirement but if anything then a small filter / choice etc. See the MQTT demo that is perfect. Include up to date and clear instructions how to run and use the example for users that are not familiar with Camel. And show how to load this example into UI designer. And then talk about going from jbang -> export to SB/Q -> and if you need k8s/ocp/k3s. And if we have a single data transformation example using xslt / and another for json (maybe via jolt / jsonnet etc) | Claus Ibsen: Claus Ibsen added a comment - 12/Nov/24 19:52 Also an example for SOAP/WS would be good, ie calling an existing WS (not exposing). And and example of exposing rest via code first, and another for contract first. | Claus Ibsen: Claus Ibsen added a comment - 12/Nov/24 19:55 The examples should be automated to self install data in SQL tables (if needed) etc so they are very quick to startup / try / demo / show without many manual steps and stuff to do."
https://issues.apache.org/jira/browse/CAMEL-21080,Improvement,Open,Major,Unresolved,4.7.0,4.x,camel-test,Unknown,Otavio Rodolfo Piske,Otavio Rodolfo Piske,14/Aug/24 08:31,23/Oct/24 11:05,Create a few legacy interfaces for code that relies on deprecated methods.,
https://issues.apache.org/jira/browse/CAMEL-21313,Test,Open,Major,Unresolved,4.9.0,None,camel-clickup,Novice,Unassigned,Otavio Rodolfo Piske,03/Oct/24 13:35,03/Oct/24 13:41,"The tests do too much. Ideally, each test should test one thing and only one. The actual test code should NOT: 1. Setup the environment, routes or the test itself 2. Manage the context lifecycle (unless the context lifecycle is primarily relevant to the test itself) 3. Should not isolate the test in an anonymous code block Ideally, the test should do one thing and one thing only: assert that the condition under test pass or fail. Everything else is either setup, cleanup or management and should not be in the test method.","Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 03/Oct/24 13:40 Ideally, it should also: 1. replace lots of those concatenations in the routes with fromF as well. 2. use assertDoesNotThrow instead of try/catch"
https://issues.apache.org/jira/browse/CAMEL-16403,Improvement,Open,Major,Unresolved,None,4.x,camel-core,Unknown,Unassigned,Claus Ibsen,25/Mar/21 11:52,21/Sep/24 10:14,"With SensitiveUtils we know have a full list of known property names that are sensitive. We can use this in endpoint uri parsing to know that its value should be used as-is (eg like it was RAW( )) Thought with RAW() there is still some decoding due to URI invalid chars, eg you can't have special chars in the uri, so they get decimal encoded. Another approach: We could also just generate a random uuid as placeholder for the value, which is backed in some internal registry/vault which then is used to lookup the actual value, when in use. However the uri may be used to call external service, like a http / ftp with username:password combination, so you may want an uri representation with the actual value. Likewise if there is some api tokens in the uri.",
https://issues.apache.org/jira/browse/CAMEL-21208,Improvement,Open,Major,Unresolved,"4.7.0,4.8.0",None,camel-jbang,Unknown,Unassigned,Otavio Rodolfo Piske,12/Sep/24 08:01,13/Sep/24 09:53,"We have several places were we create the export files by code . Not only this bug-prone, but this is also extremely hard to read, test, maintain and evolve . The code on Camel JBang is full of code like this. Using a template engine allow us to separate the template source, from the text/code generation logic, resulting in a code that is easier to maintain. We should pick a template engine, convert the all that code to the appropriate format and cleanup the code generation.","Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 12/Sep/24 08:02 There is some similarity with CAMEL-21181 , but I feel that one is more about serializing objects, than generating code. Nonetheless, it may be possible to come up with a solution that fits both of the problems."
https://issues.apache.org/jira/browse/CAMEL-21181,Improvement,Open,Major,Unresolved,None,None,None,Unknown,Unassigned,Otavio Rodolfo Piske,05/Sep/24 13:59,12/Sep/24 08:02,"Currently our code has a very rudimentary way to generate String-based output (i.e.: such as those used for the DevConsole). Typically, we generate those strings appending code using a StringBuilder over multiple append calls, spawning several lines of code and, in many cases, generating transient objects in the process. In some other (much worse) cases, we concatenate them. The code snippets below present some examples of the kind of thing we do. JvmDevConsoleFile : sb.append( String .format( ""Java Name: %s\n"" , mb.getVmName())); ... String cp = String .join( ""\n "" , mb.getBootClassPath().split( ""[:|;]"" )); sb.append( ""\n "" ).append(cp).append( ""\n"" ); DefaultAsyncProcessorAwaitManager : sb.append(style( ""Id:"" )).append(entry.getBlockedThread().getId()).append( ""\n"" ); BacklogTracer : private static String wrapAroundRootTag(List<BacklogTracerEventMessage> events) { StringBuilder sb = new StringBuilder(512); sb.append( ""<"" ).append(BacklogTracerEventMessage.ROOT_TAG).append( ""s>"" ); for (BacklogTracerEventMessage event : events) { sb.append( ""\n"" ).append(event.toXml(2)); } sb.append( ""\n</"" ).append(BacklogTracerEventMessage.ROOT_TAG).append( ""s>"" ); return sb.toString(); } This approach has several problems: 1. Maintenance hell: this approach leads to code that is hard to read, modify and maintain. It is also usually hard to test due to tightly coupling the String generation with the data sources. 2. It leads to performance degradation if the underlying buffer is not properly sized. 3. It can also lead to performance degradation due to increased GC pressure caused by an excessive creation of transient objects. 4. Typically, the methods generating the objects are so large that they are not inlinable by JIT. -In particular, problem number 3 makes the whole set of *Console classes entirely unsuitable for high-performing / low-latency integrations. - Update : I had originally singled out console code as a pain point, but looking further, there are other places that could lead to code like this in production (i.e.: the code in camel-management is also badly affected by this).","Claus Ibsen: Claus Ibsen added a comment - 05/Sep/24 15:10 Ad 3) The * consoles * are NOT intended for production use - they are development only. | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 06/Sep/24 10:52 davsclaus thanks for the clarification. Fair enough and certainly very good that we don't endorse this feature for production usage. It makes the point 3 a lot less worse .... but still, we shouldn't pessimize the experience for the users (specially those not lucky enough to have decent computers). | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 06/Sep/24 11:00 BTW, although I had singled out the DevConsoles are the worst offenders, they are not the only ones abusing this bad practice. We have quite a few other places with code that is just as bad (i.e.: CSimpleCodeGenerator, DefaultBacklogTracerEventMessage, DefaultManagementObjectNameStrategy) ... camel-management is pretty full of these as well."
https://issues.apache.org/jira/browse/CAMEL-21132,Task,Open,Major,Unresolved,None,None,upgrade-recipes,Unknown,Unassigned,Jiri Ondrusek,28/Aug/24 10:45,28/Aug/24 10:45,Automatic CLI tests are missing in https://github.com/apache/camel-upgrade-recipes/,
https://issues.apache.org/jira/browse/CAMEL-21122,Improvement,Open,Major,Unresolved,4.7.0,4.x,camel-test,Moderate,Unassigned,Otavio Rodolfo Piske,27/Aug/24 12:07,27/Aug/24 12:33,"Currently, AvailablePort only works when defined as a static field. Some components, such as Jetty, need them to be transient (i.e.: regenerated after every test), as such the current implementation is not compatible (it causes flakiness on camel-jetty).",
https://issues.apache.org/jira/browse/CAMEL-20915,Task,Open,Major,Unresolved,4.7.0,4.x,test-infra,Novice,Unassigned,Otavio Rodolfo Piske,25/Jun/24 08:51,21/Aug/24 17:37,"We use a lot of containers as part of our tests. With time, they become outdated and we have to manually check for upgrades. This tasks is to create a script to automate checking for new versions of the containers. You can find all the containers used in Camel by running the following command: find . -iname 'container.properties' -ipath '*src*' -exec sh -c ""cat {} | grep container | cut -d = -f 2 "" \;","Aurélien Pupier: Aurélien Pupier added a comment - 25/Jun/24 09:19 I think we can try to follow the convention from github depdenabot which will provide automatic PR for the upgrade then https://github.blog/changelog/2024-01-24-dependabot-version-updates-support-devcontainers/ | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 30/Jun/24 06:07 apupier that's a good idea! | Aurélien Pupier: Aurélien Pupier added a comment - 12/Aug/24 09:45 Note that these properties are used by testcontainers https://testcontainers.com/ which is not based on devcontainers specification. A better way would be to have Dependabot to support testcontainers, vote for https://github.com/dependabot/dependabot-core/issues/6893 | Aurélien Pupier: Aurélien Pupier added a comment - 21/Aug/24 17:37 interesting workaround idea: https://testcontainers.slack.com/archives/C04RM836XUP/p1724255963491499?thread_ts=1724252316.421289&cid=C04RM836XUP Put the versions in Dockerfiles, point Dependabot to the Dockerfiles, and have your Java code parse the first line of the Dockerfile."
https://issues.apache.org/jira/browse/CAMEL-19667,Improvement,Open,Major,Unresolved,"3.20.5,(3)3.20.6,3.21.0,4.0-M3",4.x,"camel-opentelemetry,(1)camel-tracing",Moderate,Unassigned,Roman Kvasnytskyi,27/Jul/23 12:30,20/Aug/24 07:49,"I am using OpenTelemetry Agent for tracing along with camel-opentelemetry-starter that configures OpenTelemetryTracer for Camel aligned with camel-tracing. I see my spans for Camel inside a single trace, but after control is passed to the Processor process method next spans are disassociated from the trace and are created in the separate trace. The tracing context does not seem to get propagated, and the resulting spans end up being disassociated. For example: from(""timer:tick?period=5s) .process( ""myProcessor"" ); public class MyProcessor implements Processor { private final HttpClient someClient = new HttpClient(); @Override public void process(Exchange exchange) { // http client is instrumented and also produces spans someClient.get( '/example' ); } } This results in 2 spans. One for timer:tick & another for a client call. The problem is that the parent span for client calls is not set, so they appear as 2 distinct traces. My exchange headers contain traceparent header with all data which should be put inside the OpenTelemetry context, but they do not. I have come up with a workaround. The idea is trivial - get traceparent header if it is present in exchange, parse trace metadata from it, create a SpanContext object, and put it as a parent for the current OpenTelemetry context. It looks like this: public class TraceEnrichingProcessor implements Processor { private final Processor delegate; public TraceEnrichingProcessor(Processor delegate) { this .delegate = delegate; } @Override public void process(Exchange exchange) throws Exception { // Get the existing traceparent header from the Exchange String traceparent = exchange.getIn().getHeader( ""traceparent"" , String .class); if (traceparent != null && !traceparent.isEmpty()) { // Extract the traceId, parentSpanId and sampleFlag String [] parts = traceparent.split( ""-"" ); String traceId = parts[1]; String parentSpanId = parts[2]; boolean isSampled = parts[3].equals( ""01"" ); // Create the parent SpanContext SpanContext parentContext = SpanContext.create( traceId, parentSpanId, isSampled ? TraceFlags.getSampled() : TraceFlags.getDefault(), TraceState.getDefault() ); // Attach the parent SpanContext to the current Context try (Scope scope = Context.current().with(Span.wrap(parentContext)).makeCurrent()) { // Now, the current Context has the parent SpanContext attached, // and any new spans created within this scope will use it as their parent // Pass control to the delegate processor delegate.process(exchange); } } else { // If no traceparent header is found, just delegate without modifying the Context delegate.process(exchange); } } } Inside OpenTelemetry Agent, they dropped support of Camel 3.x+, because Camel provides its module for tracing, and they will not help with it. Link I wonder if that can be done inside Camel to propagate context from the processor implicitly without manual propagation of context. UPD1: I have verified that these behaviour is consistent across Camel 3.20.5, 3.20.6, 3.21.0 and 4.0.0-RC1","Roman Kvasnytskyi: Roman Kvasnytskyi added a comment - 27/Jul/23 12:37 Seems like related issues | Claus Ibsen: Claus Ibsen added a comment - 27/Jul/23 17:09 And if you do not use a processor, but a log or something else, or another endpoint what happens then. ie is it only when you use a custom processor or not | Roman Kvasnytskyi: Roman Kvasnytskyi added a comment - 27/Jul/23 17:48 - edited davsclaus , well, I can only make new spans not connected to Camel if I will process them(either via lambda in process( () -> {}) or via Processor.process. Like in that case I am making a call from the HTTP client. When I route my message even like direct -> seda -> custom processor I still see headers in Exchange headers on my Processor. So, I believe Camel propagates everything during the routing of the message but fails to set up OpenTelemetry Context for ""process"" in the end. I would gladly contribute to fixing that issue, but I am not sure where should I start, or what is the best way to handle that thing. I am thinking about propagating Camel trace context to OpenTelemetry trace context on receiver, but it may be suboptimal... | Roman Kvasnytskyi: Roman Kvasnytskyi added a comment - 02/Aug/23 08:46 davsclaus can you give me a tip how I can approach that issue? | Claus Ibsen: Claus Ibsen added a comment - 09/Aug/23 09:00 A good place to look is CamelInternalProcessor as an internal advice. And for this advice somehow to be part of camel-tracing as camel-core cannot have compiled with opentracing JARs. | Claus Ibsen: Claus Ibsen added a comment - 22/Dec/23 10:17 Can you try with latest release as stuff has likely has been improved | Roman Kvasnytskyi: Roman Kvasnytskyi added a comment - 22/Dec/23 20:33 davsclaus what exact latest release you mean? 4.3.0 or 3.21.3? Could you please point to a specific issue/PR that may have helped the cause? | Claus Ibsen: Claus Ibsen added a comment - 23/Dec/23 07:01 No sorry I dont have time for that, always try with 4.x. | Davin Taddeo: Davin Taddeo added a comment - 13/Mar/24 14:51 Can confirm that this is still an issue in 4.4.0. Been trying to get the workaround working but struggling (I'm not a Java person), but can definitely say that trace context is not properly being maintained. I have a repo to reproduce this based off the repo linked in CAMEL-19469 : camel-kafka-demo-tracing . If you run through that, it will produce 4 traces. One will be the majority of work, two will be manually spans that should be part of the main trace as well. Another will be a ""pageviews-process"" span that I believe should be the real root of the main trace, but isn't even part of manual instrumentation, It's just not getting the context... The attached screenshot shows a single event, where a single message to the kafka topic triggers work by both services. This should all still land in one trace... | Davin Taddeo: Davin Taddeo added a comment - 21/Mar/24 14:57 - edited Another workaround, in v4.4.0. Going against the recommended operations was really the only way we were able to get things working. You can use the `ActiveSpanManager` from the `camel-tracing` component to get the current span context and make it current. Looking at this branch of my example app , we've got a couple examples of doing this You can use ActiveSpanManager the way the camel-opentelemetry component does, to cast the processor's span as a camelSpan, then you can use that span with the makeCurrent function to get an AutoCloseable for your functions. from( ""kafka:pageviews?brokers=localhost:9092"" ) .process(exchange -> { // We're not supposed to use ActiveSpanManager directly, but // camel-opentelemetry doesn't seem to provide a way to get the current span. OpenTelemetrySpanAdapter camelSpan = (OpenTelemetrySpanAdapter) ActiveSpanManager.getSpan(exchange); try (AutoCloseable scope = camelSpan.makeCurrent()) { // Custom processing logic modifyBody(exchange); } }) .to( ""kafka:viewedpages?brokers=localhost:9092"" ) .to( ""log:partone-done"" ); You could also just skip the OpenTelemetrySpanAdapter bit and just grab the AutoCloseable from the ActiveSpanManager class in camel-tracing. We were trying to do this without going to the option, since it says don't do it... But there's no way to get the context working an not do it that we can see, aside from the workaround from the OP to manually break down the kafka header to get the traceparent header and link into the trace that way. from( ""kafka:viewedpages?brokers=localhost:9092"" ) .process(exchange -> { try (AutoCloseable scope = ActiveSpanManager.getSpan(exchange).makeCurrent()) { modifyBody(exchange); } }) .to( ""kafka:processedviews?brokers=localhost:9092"" ) .to( ""log:processedviews"" ); davsclaus , If something could be added to camel-opentelemetry's OpenTelemetryTracer class, that would work like the getSpan method, that would at least make this easier, without having to dip into classes from the camel-tracing compoent. Assuming the camel-opentelemetry component itself can't be updated to just play nice with OTEL's @WithSpan decorators nicely on its own... This will at least get people a simpler method to get into current context where they can then use the @WithSpan decorator later on. | John Poth: John Poth added a comment - 21/Mar/24 17:08 Unfortunately, naively putting, from(""timer:tick?period=5s) .process( ""myProcessor"" ); public class MyProcessor implements Processor { @Override public void process(Exchange exchange) { // OpenTelemetry Context is here } } In a Unit Test does not reproduce the issue and the Context is correctly propagated. We also have an OpenTelemetry example using Kafka [1] which correctly propagates the Context. [1] https://github.com/apache/camel-spring-boot-examples/tree/main/opentelemetry | Claus Ibsen: Claus Ibsen added a comment - 03/Jun/24 12:49 There is a new option to turn on tracing processors (camel 4.7) https://github.com/apache/camel/blob/main/components/camel-opentelemetry/src/main/docs/opentelemetry.adoc#configuration | Adriano Machado: Adriano Machado added a comment - 11/Aug/24 21:14 If I may, I was checking an issue on DynaTrace reporting, and looks like there's an issue in context propagation, even for internal processors. I changed the OpenTelemetry testing a little bit also log traces. Here's a commit with my changes: https://github.com/ammachado/camel/commit/fc386e47c6f0295cb996321c2cf5a0f852337a2c. Even with the tracing processors option that davsclaus mentioned, the problem is reproducible. | John Poth: John Poth added a comment - 14/Aug/24 10:51 Thanks ammachado for looking into this! Does your commit contain a reproducer ? I noticed you also did some refactoring which makes it harder to see. Thanks ! | Adriano Machado: Adriano Machado added a comment - 19/Aug/24 14:04 - edited jpoth I created a PR with these changes ( https://github.com/apache/camel/pull/15182 ). The new test code displays a tree of the spans created during the tests and is also using the Leak Span Detector from the OTEL SDK. You can try to add the Leak processor to your project and test, but I suspect that the issues are happening due to spans being closed more than once, which is also identified by the new test code. | John Poth: John Poth added a comment - 19/Aug/24 15:09 - edited Thanks ammachado for all the work! I will try it out once merged! Were you able to reproduce the original issue ? I feel like Spans being closed more than once shouldn't cause the tracing context to be lost though"
https://issues.apache.org/jira/browse/CAMEL-20609,Improvement,Open,Major,Unresolved,None,4.x,camel-core,Unknown,Claus Ibsen,Claus Ibsen,23/Mar/24 12:28,19/Aug/24 06:37,See CAMEL-20607 When using variableReceive you want the processing to be more separated,
https://issues.apache.org/jira/browse/CAMEL-21049,Improvement,Open,Major,Unresolved,None,4.x,camel-kamelet,Unknown,Unassigned,Christoph Deppisch,06/Aug/24 13:17,12/Aug/24 07:29,"Kamelets represent declarative route templates in Apache Camel. The Kamelets were born out of Camel K but soon became part of the Apache Camel project, too. This means today you can use Kamelets in Apache Camel also without Camel K being involved. Kamelets are still kind of separated from the Camel core project. The Kamelets live in a separate GitHub project repository ( https://github.com/apache/camel-kamelets ) and follow a separate release lifecycle. This means we do a follow-up release of the Kamelet catalog after each Apache Camel release in order to keep the Kamelets aligned with the most recent Camel versions. In addition to that, writing and maintaining Kamelets is no fun as it boils down to writing YAML files manually. Testing and verifying the Kamelets is separated from the Camel core project, too. Problems that arise due to separate GitHub repositories for Apache Camel and Kamelets: Separate Kamelet catalog release lifecycle camel-kamelets-utils library that provides useful exchange body manipulation utilities (e.g. hoist-flied) is only available with Kamelets Cyclic dependency between project versions: Kamelets → Apache Camel → Camel JBang → Kamelets Separate issue tracking system: Camel JIRA vs. GitHub issues Testing and verification of Kamelets separate from Camel release. It is hard to sense changes in Camel components that affect Kamelets and potential issues are revealed and fixed late in the release life cycle Problems with YAML as Kamelet definition: No compile time checks Poor code assistance Writing YAML files is cumbersome Separated from usual Camel component development The proposal is to bring Kamelets to the Camel core project in order to make them a natural part of the Camel components.",
https://issues.apache.org/jira/browse/CAMEL-21030,New Feature,Open,Major,Unresolved,None,None,None,Unknown,Guillaume Nodet,Guillaume Nodet,30/Jul/24 07:34,08/Aug/24 11:32,The java.io.File class should really only be used for compatibility.,Claus Ibsen: Claus Ibsen added a comment - 08/Aug/24 11:32 End users need stability of the existing camel-file component and how it works. So be a big careful about any big refactor or changes. There is the camel-file-watch component that uses a different mode for receiving files. This component is maybe more suitable for nio2 refactorings.
https://issues.apache.org/jira/browse/CAMEL-18562,Task,Open,Major,Unresolved,None,None,None,Unknown,Unassigned,Otavio Rodolfo Piske,27/Sep/22 08:57,30/Jul/24 07:52,"Multiple components have overlapping functionality and/or duplicated logic that could possibly be consolidated into abstract platforms. These abstract platforms would provide a reusable interface for components handling things as: HTTP clients HTTP servers WebSocket servers JMS clients Messaging Servlet containers Socket-based I/O Web Services frameworks Concrete example: For instance, the Telegram component: In Camel version 3.18x, it allowed the users to provide a custom AsyncHttpClient through the `client` parameter. In Camel version 3.19.x and newer, the `client` parameter changed to use the Java's own HTTP client (due to CAMEL-18506 ). With a core platform, instead of using a concrete client, it would use an abstract HTTP platform that would provide the functionality required for the component. Among other things, this would prevent situations such as the one we now have with Whatsapp and Telegram components, where both implement their own HTTP multi-part body handling logic on top of the Java's HTTP client. Benefits: Reduce duplicated code Increase testability and test coverage Increase flexiblity by allowing users to implement their own pluggable platforms if they wish Increase flexiblity for Camel to decouple from legacy platforms and projects",
https://issues.apache.org/jira/browse/CAMEL-20385,Task,Open,Major,Unresolved,None,None,camel-core,Unknown,Guillaume Nodet,Otavio Rodolfo Piske,01/Feb/24 11:42,30/Jul/24 06:04,"We have multiple places within Camel that still use older ways to deal with dates. Although that is still OK for internal APIs, we could make things simpler for public APIs. For instance, instead of having someMethod(long timeout) we could use someMethod(Duration duration) ... or equivalent.",
https://issues.apache.org/jira/browse/CAMEL-20959,Task,Open,Major,Unresolved,None,4.x,upgrade-recipes,Unknown,Jiri Ondrusek,Jiri Ondrusek,10/Jul/24 08:04,23/Jul/24 08:01,"TBH I'm not sure what has to be done next. Here is the initial commit for the camel-upgrade-recipes repo. I think that we should release this library when this commit is merged. Why? Once released, I can update draft PR for quarkus-updates project and leverage the camel-upgrade-recipes dependency. With some guiding from someone I can try to achieve some of the task. (It would be nice to have component in jira, which would represent upgrade-recipes. The affects version/fix version does not make sense in the camel project, as the versioning might be different)","Jiri Ondrusek: Jiri Ondrusek added a comment - 11/Jul/24 11:23 davsclaus WDYT? | Claus Ibsen: Claus Ibsen added a comment - 11/Jul/24 11:32 I will be on PTO for 3 weeks, but I think Andrea can help with doing a release. I wonder if the version should match the latest camel version it can upgrade too, as in this case its 4.4.x. So the release is 4.4.0. And if you then later add rules for 4.5 and 4.6, then it can be released as 4.6.0, and so on. | Jiri Ondrusek: Jiri Ondrusek added a comment - 11/Jul/24 12:06 - edited We can align to Camel versions, it will help navigate users which version is meant for which Camel version. But perhaps we would need a smaller granularity, like what if we need to fix a recipe for migrating to Camel let say 4.7.0. In the time when upgrade-recipes project was already released for 4.7.0. The new version of recipes should be something like 4.7.0.1. On the other hand if we have independent versioning, we can have i.e. 1.0.1 I think that independent versions might present stronger arguments: Quarkus-updates is versioned in such way hypothetically in the future - we can present a tool (or add some options to the current CLI tools) to help with migrations. So the tool would hide versions for the users. (therefore having the same version would not be benefiting us) what if we let say with Camel 4.7.2 want to add some recipe for migration to 4.7.3, but the different stream like Camel 4.8.0 is already out. Therefore camel-recipes 4.8.0 already exists. What would be the release containing migration to 4.7.3? I think that having independent versions would helps to solve much more corner cases with recipes (like releasing in different time then Camel, or a recipe for a special Camel version, ..) | Claus Ibsen: Claus Ibsen added a comment - 12/Jul/24 09:04 No its not on a patch level, only X.Y So X.Y means that the recipies can go up to X.Y release, ie 4.7 The .Z does not matter. If the recipies needs a fix release then they do 4.7.1 4.7.2 and so on. So if a user wants to upgrade to Camel 4.7, they grab the latest recipie release that are 4.7.x based. Or a higher like 4.8. Forget about Quarkus - this is ASF and our projects should be ASF based. | Jiri Ondrusek: Jiri Ondrusek added a comment - 12/Jul/24 10:12 Sure, then lets align to Camel. I have no problem with it. | Claus Ibsen: Claus Ibsen added a comment - 12/Jul/24 13:00 Maybe we can do the first release as 0.x to give us the time to make sure it becomes correct and as needed. Then after that we can find out if it should be its own version or follow the camel releases like most all other projects | Jiri Ondrusek: Jiri Ondrusek added a comment - 23/Jul/24 07:18 Hi acosentino , may I ask for help? (with releasing version 0.1 of the https://github.com/apache/camel-upgrade-recipes ) | Andrea Cosentino: Andrea Cosentino added a comment - 23/Jul/24 08:01 I can have a look"
https://issues.apache.org/jira/browse/CAMEL-20997,Task,Open,Major,Unresolved,4.8.0,None,tests,Novice,Unassigned,Otavio Rodolfo Piske,19/Jul/24 08:15,19/Jul/24 08:15,"We have some tests blocking indefinitely by doing things like: latch.await() Thread.sleep(<huge number here>) Using locks without defining a maximum await time Tests like this should be reviewed and adjusted to ensure that they don't block forever (or for very long). Other tests (manual, ""performance"", etc) should be reviewed and dealt accordingly (moved to camel-performance-tests, removed, etc).",
https://issues.apache.org/jira/browse/CAMEL-20957,Task,Open,Major,Unresolved,4.7.0,4.x,camel-kafka,Unknown,Otavio Rodolfo Piske,Otavio Rodolfo Piske,10/Jul/24 06:42,10/Jul/24 06:42,"This was discussed in these tickets: https://github.com/apache/camel/pull/14769 https://github.com/apache/camel/pull/14745 Basically, we should investigate adding pausable consumers support via RoutePolicy instead of reinventing the wheel (as the API is not very easy to use, inadequate for low-code tools, etc).",
https://issues.apache.org/jira/browse/CAMEL-20814,Task,Open,Major,Unresolved,None,4.x,build system,Unknown,Hiram R. Chirino,Hiram R. Chirino,29/May/24 14:55,07/Jul/24 06:10,"To aid in release reproducibility, let's: publish the .buildinfo file that the maven archiver plugin can generate (this describes the build environment used for the release). provide a Dockerfile that can be used as a build container. Using a container to create the release build simplifies reproducing the build environment used for the release.",Claus Ibsen: Claus Ibsen added a comment - 06/Jul/24 20:06 This is causing pain for releasing 4.7.0 We will revert these changes so we can get a release out. (cc gzurowski )
https://issues.apache.org/jira/browse/CAMEL-19898,Improvement,Open,Major,Unresolved,4.1.0,4.x,camel-core,Unknown,Unassigned,Otavio Rodolfo Piske,21/Sep/23 08:36,06/Jul/24 08:58,"Quoting a suggestion provided by davsclaus in our discussion : ehh its a bit weird if it pass on core and not spring, the 4 misses is something about stream caching, but the TC could been optimized to not attempt some stream caching converter ... This could, possibly, be another line of work and optimization for the TC.",
https://issues.apache.org/jira/browse/CAMEL-20272,Improvement,Open,Major,Unresolved,None,4.x,camel-azure,Unknown,Andrea Cosentino,Andrea Cosentino,21/Dec/23 10:51,03/Jul/24 07:19,,
https://issues.apache.org/jira/browse/CAMEL-20741,New Feature,Open,Major,Unresolved,None,4.x,None,Unknown,Andrea Cosentino,Andrea Cosentino,07/May/24 12:25,03/Jul/24 07:18,https://www.trychroma.com/ https://github.com/amikos-tech/chromadb-java-client,
https://issues.apache.org/jira/browse/CAMEL-20937,Improvement,Open,Major,Unresolved,None,4.x,camel-tracing,Unknown,Unassigned,Claus Ibsen,03/Jul/24 06:42,03/Jul/24 06:43,,
https://issues.apache.org/jira/browse/CAMEL-19021,New Feature,Open,Major,Unresolved,None,4.x,camel-activemq,Unknown,Unassigned,Claus Ibsen,08/Feb/23 07:52,27/Jun/24 13:55,"Use Artemis is more complex than activemq, as you need to setup connection pooling / factory and all that JEE mumble jumble from the old world. We should have a component that works OOTB and have options like activemq.",
https://issues.apache.org/jira/browse/CAMEL-19329,Improvement,Open,Major,Unresolved,None,4.x,camel-jbang,Unknown,Grzegorz Grzybek,Grzegorz Grzybek,09/May/23 07:17,27/Jun/24 13:51,See https://github.com/maveniverse/mima . This projects can help us prevent huge DI configuration where we provide one implementation of almost hundred of interfaces anyway.,"Tamas Cservenak: Tamas Cservenak added a comment - 02/Aug/23 09:49 JBang related change, that is kinda done but the gradle minimize cannot be tamed yet... https://github.com/jbangdev/jbang/pull/1604 | Claus Ibsen: Claus Ibsen added a comment - 27/Jun/24 13:51 jbang is now using mima"
https://issues.apache.org/jira/browse/CAMEL-19946,New Feature,Open,Major,Unresolved,None,4.x,came-core,Unknown,Claus Ibsen,Claus Ibsen,04/Oct/23 06:37,27/Jun/24 13:33,"In the classic XML DSL we have <endpoint id=""result1Queue"" uri=""jms:queue:result1""/> <endpoint id=""result2Queue"" uri=""jms:queue:result2""/> <endpoint id=""basicInQueue"" uri=""jms:queue:basicInQueue""/> <endpoint id=""basicInTopic"" uri=""jms:topic:basicInTopic""/> Which you can then refer to in routes <from uri=""ref:basicInQueue""/> This allows to define endpoints in one place (and they can have many options) and then refer to them in your routes for reuse and also to keep the routes smaller. We should consider adding this to the model for XML and YAML DSL.",
https://issues.apache.org/jira/browse/CAMEL-20455,Improvement,Open,Major,Unresolved,None,4.x,camel-jbang,Unknown,Claus Ibsen,Claus Ibsen,23/Feb/24 06:04,22/Jun/24 17:36,"Instead of having kamelets defined in jbang via //DEPS org.apache.camel.kamelets:camel-kamelets:${camel-kamelets.version:4.4.0} Then we should let it be downloaded by camel-jbang, then its easier to control the version more dynamic like we do for downloading catalog and other stuff.",
https://issues.apache.org/jira/browse/CAMEL-19504,Task,Open,Major,Unresolved,None,None,"build system,(2)came-core,camel-core",Moderate,Unassigned,Otavio Rodolfo Piske,26/Jun/23 13:43,20/Jun/24 07:45,"I discovered that our build seems to waste a lot of time recompiling code due to some of the code generators generating the code in a post-compile Maven lifecycle phase. This seems to happen for a lot of modules, but below I describe the problem for the camel-core-model. Here's the problem: 1. The camel-core-model depends on the camel-package-maven-plugin to generate the configurers (such as ServiceCallConfigurationConfigurer , Resilience4jConfigurationDefinitionConfigurer , etc). 2. The ConfigurerGeneratorMojo uses the PROCESS_CLASSES lifecycle phase as the default. 3. As per Maven documentation , the process class phase happens after the compile. 4. As a result, the code is generated after the first compilation, which leads to warning "" [INFO] Changes detected - recompiling the module"" and a recompilation of the module. 5. In some cases, this leads to a recompilation of the whole module, which can increase the build time significantly for large modules. See the attached log files for examples.","Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 26/Jun/23 17:00 Looking at the build log it seems that a lot of the code is compiled twice: gzcat double -compilation.txt.gz| grep -A1 ""(recompile)"" | grep -i changes | wc -l 408 | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 26/Jun/23 17:05 Solving this problems is a bit challenging because: First, the code compile all the sources Then, it generates the jandex (process-classes) Using the generated jandex, it then writes the new files (configurer classes, in this case). The compiler plugin notes the changes, and recompiles everything So, there's a cyclic dependency between the Jandex depending on the class files to create the index and the source code depending on the Jandex to generate the configurer classes. | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 27/Jun/23 08:28 - edited One idea I thought about solving this problem is to generate a metadata file instead of generating code. That way we can: Generalize the Configurer so that it reads the metadata file instead. Remove a HUGE amount of (generated) code Simplify the generator code (which is very hard code to read/maintain) Make the build much faster (due to approximately 12204 lines of code less) Reuse the metadata in conjunction with the catalog and other files we already have to provide more help and features, as there will be another source with additional configuration information. | Aurélien Pupier: Aurélien Pupier added a comment - 20/Jun/24 07:45 Note: with https://github.com/stefanroeck/maven-performance-analyzer/issues/2 we would be able to evaluate more precisely the impact in terms of build time to the described behavior"
https://issues.apache.org/jira/browse/CAMEL-18398,New Feature,Open,Major,Unresolved,None,4.x,camel-jbang,Unknown,Unassigned,Claus Ibsen,16/Aug/22 15:55,16/Jun/24 10:50,"When users build integrations and run with jbang they do quick prototypes and they may make dsl mistakes, type a password wrong, or something that causes Camel to fail on startup and crash the app. We should make it possible to capture this during startup and gather a nice error report to the user, where we can pinpoint to which DSL element (file name, line number) that potentially caused this. And we should expose this error report also via dev-console so you can see this via /q/dev in both text and json style. We can use the supervised route controller to avoid stopping Camel, or add some special in camel-kamelet-main or whatnot for this kind.",
https://issues.apache.org/jira/browse/CAMEL-19013,New Feature,Open,Major,Unresolved,None,4.x,camel-jbang,Unknown,Unassigned,Claus Ibsen,06/Feb/23 14:00,16/Jun/24 08:08,Sometimes users want to quickly try to build a fat-jar or native compilation with camel-jbang. We can then do export and use mvn package in the background. This can be useful for users that are not to familiar with maven or gradle how to do that. It can be useful to prototype if the build would work or even allow to do native builds. However the tricky part is that graalvm must be installed.,
https://issues.apache.org/jira/browse/CAMEL-20046,Task,Open,Major,Unresolved,None,None,camel-core,Unknown,Unassigned,Otavio Rodolfo Piske,25/Oct/23 10:50,16/Jun/24 07:56,"I am not entirely sure if this is a bug yet, but we should investigate. It seems that in some cases, the stream caching advice causes messages to created. Flow: 1. https://github.com/apache/camel/blob/camel-4.1.0/core/camel-base-engine/src/main/java/org/apache/camel/impl/engine/CamelInternalProcessor.java#L995-L998 2. https://github.com/apache/camel/blob/camel-4.1.0/core/camel-support/src/main/java/org/apache/camel/support/AbstractExchange.java#L496-L498 3. And either one of 3.1 https://github.com/apache/camel/blob/camel-4.1.0/core/camel-support/src/main/java/org/apache/camel/support/AbstractExchange.java#L413-L419 3. 2 or https://github.com/apache/camel/blob/camel-4.1.0/core/camel-support/src/main/java/org/apache/camel/support/AbstractExchange.java#L453-L461 If there's no message, maybe it would be better to not create it just for reset. We should investigate this.","Claus Ibsen: Claus Ibsen added a comment - 25/Oct/23 12:36 There is always a message, however only a few components like timer, has null body. | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 25/Oct/23 12:46 TBH, I was surprised to see this. It seems to be triggered when handling the very first Redelivery. The baseline from 4.1.0 doesn't make it easy to spot this, but if you look at the code from main you can note how the trace starts at the handleFirst and goes all the way there. | Claus Ibsen: Claus Ibsen added a comment - 16/Jun/24 07:56 An exchange should always have a message - the message body can however in rare cases be null, like from a timer"
https://issues.apache.org/jira/browse/CAMEL-20876,New Feature,Open,Major,Unresolved,None,4.x,None,Unknown,Andrea Cosentino,Andrea Cosentino,14/Jun/24 13:04,14/Jun/24 13:04,https://github.com/akeylesslabs/akeyless-java,
https://issues.apache.org/jira/browse/CAMEL-19495,Improvement,Open,Major,Unresolved,None,None,None,Unknown,Peter Palaga,Peter Palaga,23/Jun/23 20:12,13/Jun/24 09:47,"Guava is used directly at least in camel-wordpress. We should try to replace it with equivalents from Java API, or simply inline.",Aurélien Pupier: Aurélien Pupier added a comment - 12/Jun/24 14:49 Can you provide the reason why to avoid guava? I can notice that new recent components are using it too. Currently used as direct dependencies in components: guava-eventbus (but based on naming i do not see how to not use it) ignite (only in tests) qdrant and in tooling maven plugin camel-api-component-maven-plugin | Peter Palaga: Peter Palaga added a comment - 13/Jun/24 09:47 Guava has a long history of breaking backwards compatibility. Camel components depending on incompatible Guava versions are hard to make work together.
https://issues.apache.org/jira/browse/CAMEL-20872,New Feature,Open,Major,Unresolved,None,4.x,camel-sql,Unknown,Unassigned,Federico Mariani,13/Jun/24 09:01,13/Jun/24 09:20,"It is common to use a database like a vault, where users store key/value secrets. It would be nice to have a PropertyFunction that can be used to retrieve that information, in particular, the user experience should be similar to the hashicorp-vault one. Given a table with the following structure CREATE TABLE mySecrets (myKey VARCHAR(255), myValue VARCHAR(255)); the PropertyFunction can be configured via system properties like camel.vault.sql.url=jdbc:<database>: //<host>:<port>/<databaseName> camel.vault.sql.username=myUser camel.vault.sql.password=myPassword camel.vault.sql.driverClassName=com.mysql.jdbc.Driver and the properties can be retrieved via {{sql:<databaseName:?><returnColumn><table><keyColumn><key>}} for example {{sql:myValue/mySecrets/myKey/myUsername}} Given that <returnColumn><table><keyColumn> should be constant, we may add those to system properties ala camel.vault.sql.valueColumn=<returnColumn> camel.vault.sql.table=<table> camel.vault.sql.keyColumn=<keyColumn> and the expression can be {{sql:myUsername}} This is just a first an hypothetical implementation, I am open to discussions.",Claus Ibsen: Claus Ibsen added a comment - 13/Jun/24 09:03 It should be in the camel-sql component only
https://issues.apache.org/jira/browse/CAMEL-19494,Task,Open,Major,Unresolved,4.0-M3,None,camel-jira,Unknown,Unassigned,Federico Mariani,23/Jun/23 17:28,12/Jun/24 14:56,"The camel-Jira dependency jira-rest-java-client-core is based on javax jaxrs API , therefore in camel 4 the component cannot be used due to class not found and incompatible APIs. Seems like there are no plans from atlassian to migrate to the latest jaxrs spec. Do you think that the component should be (hopefully temporarily) removed from Camel 4?",Claus Ibsen: Claus Ibsen added a comment - 27/Jun/23 08:17 I am okay removing camel-jira for Camel v4 (if its correct that its not maintained anyway). There is likely some REST api end users can migrate to use | Aurélien Pupier: Aurélien Pupier added a comment - 12/Jun/24 14:55 - edited there were new patch releases after it was mentioned as unmaintained The master branch has few commits every month https://bitbucket.org/atlassian/jira-rest-java-client/commits/branch/master but still use the javax.ws API https://bitbucket.org/atlassian/jira-rest-java-client/src/2292597a64a786c28bfea64087d58f3d12fbb79c/core/src/main/java/com/atlassian/jira/rest/client/internal/async/AsynchronousAuditRestClient.java#lines-14
https://issues.apache.org/jira/browse/CAMEL-18383,Improvement,Open,Major,Unresolved,None,4.x,camel-platform-http-vertx,Unknown,James Netherton,James Netherton,11/Aug/22 08:31,19/May/24 09:56,"Some more information in this issue: https://github.com/apache/camel-quarkus/issues/3888 There may be cases where you are not going to block the Vert.x event loop in the Camel routing. Therefore, it may be desirable to not do this 'execute blocking' logic: https://github.com/apache/camel/blob/main/components/camel-platform-http-vertx/src/main/java/org/apache/camel/component/platform/http/vertx/VertxPlatformHttpConsumer.java#L168-L221 And instead run the AsyncProcessor as per normal on an IO thread.","Claus Ibsen: Claus Ibsen added a comment - 19/May/24 09:56 Hmm I wonder if you want to do this per route, as setting this globally only would be to coarse grained from platform-http:foo?blocking=false from platform-http:bar"
https://issues.apache.org/jira/browse/CAMEL-20206,Task,Open,Major,Unresolved,None,4.x,"came-core,(3)camel-catalog,dsl,tooling",Moderate,Unassigned,Otavio Rodolfo Piske,07/Dec/23 16:42,15/May/24 07:00,"We have a large incidence of excessively complex methods . Problems with excessively long and complex methods: makes the code much harder to maintain reduce community ability to step in and provide easy fixes increases the cognitive effort to read code by quickly exhausting the limits of a human short term memory reduce the JIT compiler ability to optimize code by inlining because the generated code is larger than 325 bytes. lead to poor reuse and duplication of code We should start by breaking down this complex code and, in the future, apply proper design to it. The components catalog, tooling and dsl are specifically bad for this.",
https://issues.apache.org/jira/browse/CAMEL-20742,New Feature,Open,Major,Unresolved,None,4.x,None,Unknown,Unassigned,Andrea Cosentino,07/May/24 12:52,07/May/24 12:52,,
https://issues.apache.org/jira/browse/CAMEL-20740,New Feature,Open,Major,Unresolved,None,4.x,camel-main,Unknown,Unassigned,Claus Ibsen,06/May/24 13:41,07/May/24 08:40,"See if we can make it easier to define 2 JMS or 2+ SQL components with their own configuration and do all of this via application.properties. The default camel.component.sql is for the default component only. So something camel.component.mysql.alias=sql camel.component.mysql.batch=123 camel.component.oracle-db.alias=sql camel.component.oracle-db.batch=444 So the name of the component needs to use a non OOTB component name and have an alias option that refers to the actual component. This does impact tooling as they dont understand these ""fake components"" so maybe we need to put this into another prefix to avoid confusion.","Luca Burgazzoli: Luca Burgazzoli added a comment - 06/May/24 14:02 - edited Just for reference, I think at some point in the past we had a special configurations entry in spring boot, like: # standard component camel.component.sql.batch = 333 # custom sql component registered as ${alias} camel.component.sql.configurations.${alias}.batch = 444 | Claus Ibsen: Claus Ibsen added a comment - 07/May/24 08:40 Yeah SB auto-configuration is a bit of challenge, where we would need to adjust all the starter to support this, or come up with some other way."
https://issues.apache.org/jira/browse/CAMEL-18381,Improvement,Open,Major,Unresolved,None,4.x,camel-test-infra,Unknown,Otavio Rodolfo Piske,Otavio Rodolfo Piske,11/Aug/22 08:02,04/Apr/24 13:02,Add support for more singleton services in test infra.,
https://issues.apache.org/jira/browse/CAMEL-19622,Test,Open,Major,Unresolved,4.0.0,None,camel-test-infra,Novice,Unassigned,Otavio Rodolfo Piske,19/Jul/23 14:48,04/Apr/24 13:01,"As part of CAMEL-18957 we introduced a JUnit 5 extension that can inject a CamelContext into the tests. This moves the management of the context lifecycle to JUnit and can simplify debugging the code. Although it is not a drop-in replacement to the CamelTestSupport, a conversion guide covering the basics of the process is available along with the test infra code . The following components need to be converted: camel-componentdsl camel-endpointdsl camel-dsl-modeline camel-xml-io-dsl - IN PROGRESS",Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 10/Nov/23 09:35 This is on hold for now. Waiting for more work on CAMEL-19742 .
https://issues.apache.org/jira/browse/CAMEL-20616,Improvement,Open,Major,Unresolved,None,Future,None,Unknown,Andrea Cosentino,Andrea Cosentino,26/Mar/24 06:56,03/Apr/24 09:13,"https://github.com/spdx/spdx-maven-plugin It's still unclear what will be the standard between cyclonedx and spdx, so it makes sense to provide both in our releases.",Andrea Cosentino: Andrea Cosentino added a comment - 03/Apr/24 09:13 This requires probably more work. They are not providing a way of aggregating the spdx output in a single file. So we end up having a file for each module.
https://issues.apache.org/jira/browse/CAMEL-20522,Test,Open,Major,Unresolved,None,4.x,camel-test,Unknown,Unassigned,Claus Ibsen,06/Mar/24 08:56,14/Mar/24 10:42,If you have test classes that does not directly extend CamelTestSupport then your tests may not cleanup after testing. All the tearDown is not invoked. It seems its due to CamelTestSupport implements both some interfaces from JUnit and also have @AfterEach annotation and this skrews up junit when you have test class hierachies.,"Claus Ibsen: Claus Ibsen added a comment - 06/Mar/24 08:59 Before 2024-03-06 09:58:49,460 [main ] INFO CamelTestSupport - ******************************************************************************** 2024-03-06 09:58:49,469 [main ] INFO CamelTestSupport - Testing: testMetricsRoutePolicy() (org.apache.camel.component.micrometer.routepolicy.ZMicrometerContextOnlyPolicyTest) 2024-03-06 09:58:49,469 [main ] INFO CamelTestSupport - ******************************************************************************** 2024-03-06 09:58:49,673 [main ] INFO AbstractCamelContext - Apache Camel 4.5.0-SNAPSHOT (camel-1) is starting 2024-03-06 09:58:49,680 [main ] INFO AbstractCamelContext - Routes startup (total:2) 2024-03-06 09:58:49,680 [main ] INFO AbstractCamelContext - Started foo (direct: //foo) 2024-03-06 09:58:49,680 [main ] INFO AbstractCamelContext - Started bar (direct: //bar) 2024-03-06 09:58:49,680 [main ] INFO AbstractCamelContext - Apache Camel 4.5.0-SNAPSHOT (camel-1) started in 6ms (build:0ms init:0ms start:6ms) 2024-03-06 09:58:50,090 [main ] INFO MockEndpoint - Asserting: mock: //result is satisfied After 2024-03-06 09:57:17,990 [main ] INFO CamelTestSupport - ******************************************************************************** 2024-03-06 09:57:17,990 [main ] INFO CamelTestSupport - Testing: testMetricsRoutePolicy() (org.apache.camel.component.micrometer.routepolicy.ZMicrometerContextOnlyPolicyTest) 2024-03-06 09:57:17,990 [main ] INFO CamelTestSupport - ******************************************************************************** 2024-03-06 09:57:17,998 [main ] INFO AbstractCamelContext - Apache Camel 4.5.0-SNAPSHOT (camel-30) is starting 2024-03-06 09:57:17,999 [main ] INFO AbstractCamelContext - Routes startup (total:2) 2024-03-06 09:57:17,999 [main ] INFO AbstractCamelContext - Started foo (direct: //foo) 2024-03-06 09:57:17,999 [main ] INFO AbstractCamelContext - Started bar (direct: //bar) 2024-03-06 09:57:17,999 [main ] INFO AbstractCamelContext - Apache Camel 4.5.0-SNAPSHOT (camel-30) started in 1ms (build:0ms init:0ms start:1ms) 2024-03-06 09:57:18,389 [main ] INFO MockEndpoint - Asserting: mock: //result is satisfied 2024-03-06 09:57:18,390 [main ] INFO CamelTestSupport - ******************************************************************************** 2024-03-06 09:57:18,390 [main ] INFO CamelTestSupport - Testing done: testMetricsRoutePolicy() (org.apache.camel.component.micrometer.routepolicy.ZMicrometerContextOnlyPolicyTest) 2024-03-06 09:57:18,390 [main ] INFO CamelTestSupport - Took: 390ms (390 millis) 2024-03-06 09:57:18,390 [main ] INFO CamelTestSupport - ******************************************************************************** 2024-03-06 09:57:18,391 [main ] INFO AbstractCamelContext - Apache Camel 4.5.0-SNAPSHOT (camel-30) is shutting down (timeout:10s) 2024-03-06 09:57:18,393 [main ] INFO AbstractCamelContext - Routes stopped (total:2) 2024-03-06 09:57:18,393 [main ] INFO AbstractCamelContext - Stopped bar (direct: //bar) 2024-03-06 09:57:18,393 [main ] INFO AbstractCamelContext - Stopped foo (direct: //foo) 2024-03-06 09:57:18,393 [main ] INFO AbstractCamelContext - Apache Camel 4.5.0-SNAPSHOT (camel-30) shutdown in 2ms (uptime:0s) | Claus Ibsen: Claus Ibsen added a comment - 06/Mar/24 08:59 Notice that in the before, there is no logging about the test is done and that Camel is stopping etc. | Claus Ibsen: Claus Ibsen added a comment - 14/Mar/24 10:42 I have fixed camel-micrometer tests. To find potential other problems then we would need maybe to come up with a way to run tests where we count the start vs stop of camel, and use that to see if there are gaps, to help spot problems."
https://issues.apache.org/jira/browse/CAMEL-20552,New Feature,Open,Major,Unresolved,None,4.x,None,Unknown,Andrea Cosentino,Andrea Cosentino,11/Mar/24 18:59,11/Mar/24 18:59,,
https://issues.apache.org/jira/browse/CAMEL-19056,Task,Open,Major,Unresolved,None,None,camel-core,Unknown,Otavio Rodolfo Piske,Otavio Rodolfo Piske,15/Feb/23 16:56,27/Feb/24 09:39,"After we finish streamlining the extensions interface on the CamelContext , we can evaluate creating a fluent interface API for building contexts. Therefore, we could try to separate the context configuration from the instantiation and provide the context configuration that is suitable for the user / scenario. For instance, today users have to do something like this: CamelContext context = new DefaultContext(); context.setName( ""something"" ); context.setDescription( ""another thing"" ); // an so on. In concrete terms, we could investigate modifying the configuration to look like this: CamelContext context = ContextConfigurationBuilder .newDefaultConfiguration() .withName( ""something"" ) .withDescription( ""another thing"" ) .build() // No need for setters on the context -> make it immutable We can also provide configurationBuilders for scenarios where immutability is undesired as well as allowing the build of contexts with the older API for users converting to 4.x CamelContext context = ContextConfigurationBuilder .newDefaultConfiguration() .withName( ""something"" ) .withDescription( ""another thing"" ) .buildLegacy(); // returns a context instance with all the setters / getters that the users may expect The main goals are to: 1. Allow the creation of contexts that are truly immutable 2. Simplify removing / abstracting runtime configuration that may not be needed in some cases (thus helping keeping the context lightweight for Quarkus, Camel K and other scenarios)","Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 15/Feb/23 16:59 davsclaus acosentino I've been thinking about this as one of the future improvements for the CamelContext API (naturally, with a layer to allow users to transition smoothly). What do you think? | Andrea Cosentino: Andrea Cosentino added a comment - 16/Feb/23 13:13 I think this is interesting. It would be nice to understand if we could automatically generate the fluent builder. | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 17/Feb/23 09:19 acosentino In theory we could. My idea is to have extension points (defined by an Extension interface), so I think we could parse it in a similar way that we do w/ the components and endpoints. | Claus Ibsen: Claus Ibsen added a comment - 17/Feb/23 18:38 Yeah a modern fluent builder would be nice, for the advanced end users that build and run Camel manually (not using SB / Q / camel-jbang). And a generate builder will help maintain this. If you are able to build a general builder source generator, then I am interrested to use it in camel-main as we have 100 options in the configuration class, that we add fluent builders manual today. | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 27/Feb/24 09:39 We need to cleanup tooling / generators before we can implement a maven plugin."
https://issues.apache.org/jira/browse/CAMEL-20402,Improvement,Open,Major,Unresolved,None,4.x,camel-jbang,Unknown,Unassigned,Claus Ibsen,09/Feb/24 09:11,09/Feb/24 09:11,Currently only routes is supported as the mapping is complex - see camel-yaml-io.,
https://issues.apache.org/jira/browse/CAMEL-20368,New Feature,Open,Major,Unresolved,None,4.x,camel-kafka,Unknown,Otavio Rodolfo Piske,Claus Ibsen,25/Jan/24 13:30,29/Jan/24 14:02,"We added a batching consumer to camel-kafka as part of CAMEL-16064 and CAMEL-19241 . This is a ticket to investigate adding batch support to other components. Potential candidates are: camel-jms camel-sjms camel-sjms2 camel-spring-rabbitmq camel-pulsar camel-paho camel-paho-mqtt5 camel-amqp camel-ironmq camel-rocketmq It may not be feasible to all of these, but we can investigate doing so for the sake of standardization.",
https://issues.apache.org/jira/browse/CAMEL-20348,Improvement,Open,Major,Unresolved,4.4.0,4.x,None,Moderate,Unassigned,Otavio Rodolfo Piske,19/Jan/24 10:18,19/Jan/24 10:19,"As part of CAMEL-20297 , we adjusted the code to avoid swallowing interrupted exceptions. However, in many cases, the code was adjusted so to retain the previous behavior of throwing an exception and the changes only added the code to restore the interrupt status. It is possible that in many of these cases we can implement a more elegant handling of the interrupt exception. The purpose of this task is to investigate and implement such improvement.",
https://issues.apache.org/jira/browse/CAMEL-20293,Improvement,Open,Major,Unresolved,None,4.x,camel-core,Unknown,Otavio Rodolfo Piske,Otavio Rodolfo Piske,04/Jan/24 10:00,04/Jan/24 10:00,"Currently we have: CamelContext: the base interface AbstractCamelContext: common context class SimpleCamelContext: ""Represents the context used to configure routes and the policies to use."" (per javadoc) SpringCamelContext: spring-aware camel context ModelCamelContext: ""Model level interface"" (???) for the Camel Context (per javadoc) CatalogCamelContext: ""Catalog level interface"" (???) for the Camel Context (per javadoc) We should evaluate how to simplify the hierarchy of the CamelContext.",
https://issues.apache.org/jira/browse/CAMEL-20290,Improvement,Open,Major,Unresolved,4.x,None,camel-spring-boot,Unknown,Unassigned,John Poth,03/Jan/24 13:37,03/Jan/24 13:38,"It would be cool if we could find a way to reconcile: 1) Starter configurations via ConfigurationProperties 2) Stater configurations in Java in a way that's clear for the user. For example the following configuration attempt in Java fails : @Bean( ""http"" ) public HttpComponent http(){ return ComponentsBuilderFactory.http() .connectionsPerRoute(1). .build(); } As the ConfigurationProperties kicks in afterwards and the connectionsPerRoute will be set to the default 20 at runtime. The user can disable this by setting camel.component.http.customizer.enabled=false but that removes the ability to configure the component from application.properties files etc... A workaround could be something like: @Bean( ""http"" ) public HttpComponent myHttp(HttpComponentConfiguration config, CamelContext camelContext) { HttpComponent httpComponent = new HttpComponent(); httpComponent.setCamelContext(camelContext); // copy external configuration CamelPropertiesHelper.copyProperties(camelContext, config, httpComponent); // Custom config httpComponent.setConnectionsPerRoute(1); return httpComponent; } It would be also cool to have a clear priority order e.g if connectionsPerRoute is set in Java and application.properties which takes precedence. Also, configuring multiple instances of the same component comes to mind.",
https://issues.apache.org/jira/browse/CAMEL-20265,Improvement,Open,Major,Unresolved,None,None,camel-jbang,Unknown,Unassigned,Otavio Rodolfo Piske,20/Dec/23 13:46,20/Dec/23 13:46,"As Camel JBang is receiving more and more attention from our community, it's widely loved by the community and is seeing increased adoption. As a result, we have been faced with many circumstances where it makes sense to add features that are specific to the sub-projects. However, because Camel JBang is a part of the Camel Core project, there are some risks and limitations to what we can do. Specifically: We have limited ability to reuse code from the sub-projects, because we cannot introduce cyclic dependencies Our inability to reuse code, may lead to situations where the code is simply copy/pasted, thus increasing the maintenance effort across the projects, slowing down progress and decreasing the overall code/project quality. It slightly increases build and test time for the Camel Core project It makes contribution harder for beginners - as it is part of a much larger project, that is harder to build and setup It decreases the cohesion of the Camel Core project It slows down the evolution of Camel JBang, as releasing it depends on releasing a new Camel Core version.",
https://issues.apache.org/jira/browse/CAMEL-16234,New Feature,Open,Major,Unresolved,None,None,None,Unknown,Luca Burgazzoli,Claus Ibsen,18/Feb/21 16:17,20/Dec/23 09:59,"Today we put stuff into camel-main for various things you can configure. Most of that are stuff that is in core. But when we have components outside core, that are pluggable, then it would be great if they can provide their own configuration with them, and then have that as metadata and a configuration class (for java based configuration). We need the maven tooling to generate those meta data file, and java based configuration fluent builders. Then for java you can register the addon in main ala main.configure(MyFooThingy.class) .someFooStuffHere(true) .someOtherFooish(123) .end() For example camel-saga, and the 3 circuit breakers are today hardcoded into camel-main. Those can be candidates to try out with.",Claus Ibsen: Claus Ibsen added a comment - 20/Dec/23 09:57 lb fyi
https://issues.apache.org/jira/browse/CAMEL-17394,New Feature,Open,Major,Unresolved,None,4.x,tooling,Unknown,Unassigned,Claus Ibsen,29/Dec/21 10:18,20/Dec/23 09:58,"We have more and more properties that can be set via camel-main. We can look at when using @Configurer to generate type-safe and reflection free configuration then we can also generate tooling metadata (json files) that we can use for the website and tooling. Today we generate a single camel-main json file that has all of them. But it may be worth to be able to externalize these into individual files, so we can have them seperated. For example dev consoles can likely be custom per component so they will not be in core, but in the component. And so it would be worth to have a way of generate tooling medata for them also. We can either consider a json file that is specific for a dev-console or something generic with configurer. Then we can see also if we can use this for dev consoles that can be made work in both jbang, main, quarkus and spring boot.",
https://issues.apache.org/jira/browse/CAMEL-18552,New Feature,Open,Major,Unresolved,None,4.x,camel-jbang,Unknown,Claus Ibsen,Claus Ibsen,26/Sep/22 07:41,15/Dec/23 16:09,"Lets see if we can make the swagger ui available for camel-jbang, like we can do for hawtio. So you can do something ala: camel run foo.java --openapi-ui And then have /q/openapi show the ui",Claus Ibsen: Claus Ibsen added a comment - 15/Dec/23 16:09 https://github.com/quarkusio/quarkus/blob/main/extensions/swagger-ui/deployment/src/main/java/io/quarkus/swaggerui/deployment/SwaggerUiProcessor.java https://github.com/smallrye/smallrye-open-api/tree/main/ui/open-api-ui
https://issues.apache.org/jira/browse/CAMEL-19873,Improvement,Open,Major,Unresolved,4.0.0,None,None,Unknown,Unassigned,Otavio Rodolfo Piske,15/Sep/23 12:11,14/Dec/23 14:06,"There are a lot of duplicated files in the code base. This makes the project maintenance much harder and is, in general, a bad practice. We should clean these up whenever possible.","Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 14/Dec/23 14:06 For dealing w/ the code generators, we could investigate https://github.com/square/javapoet along with https://github.com/agrosner/KPoet ."
https://issues.apache.org/jira/browse/CAMEL-20176,New Feature,Open,Major,Unresolved,None,4.x,"camel-core,eip",Unknown,Unassigned,Claus Ibsen,02/Dec/23 08:14,02/Dec/23 08:14,"We should have some kind of EIP that makes it easier to define custom metrics and how they are collected/aggregated. And that these metrics can then also be exposed via micrometer for external systems to collect such as via prometheus. This requires some more thought and experiment. Today you can do this via camel-micrometer and build a custom message with the metric to send, but an EIP makes it easier and stand out in the routes. The data should also be able to grab details from the message, such as an purchase order, where you want to grab the total dollar amount. Or some customer data where you collect country of customer etc.",
https://issues.apache.org/jira/browse/CAMEL-16976,New Feature,Open,Major,Unresolved,None,4.x,camel-core,Unknown,Claus Ibsen,Claus Ibsen,15/Sep/21 08:44,23/Oct/23 09:21,"The health checks https://camel.apache.org/manual/latest/health-check.html For routes with failure thresholds etc are currently for readiness checks, eg when starting up the routes. However after this fact, then at runtime, we may want to be able to say that if a route consumer have failed X times in a row, then its unhealthy. And to filter by exception and whatnot. So this can get a bit tricky, but we may want to have some SPI interface that end users can implement for custom logic.",
https://issues.apache.org/jira/browse/CAMEL-17148,New Feature,Open,Major,Unresolved,None,4.x,camel-core,Unknown,Claus Ibsen,Claus Ibsen,29/Oct/21 13:51,23/Oct/23 09:21,"It can be desireable to make it possible to configure Camel to automatic stop routes that are un-healthy after they have failed for X times in a row or Y period (time). There can be situations where a route will attempt to poll new messages from some external system, and that keeps failing (networking issues, remote server error). Some consumers are scheduled so you can configure them to backoff, but there is no general configuration for such thing. Instead we can either make it possible to configure this via health-check on the route, so this can control the route. Or we can enhance the route controller (default and supervising) to do this. However this is maybe a little bit tricker as they are designed to be only used during bootstrap and starting the routes. After routes are started then they are no longer in use. Using health-check seems better as you already have settings for thresholds to setup how many X in row to regard as UP or DOWN.",
https://issues.apache.org/jira/browse/CAMEL-20009,Task,Open,Major,Unresolved,None,Future,None,Unknown,Unassigned,Aurélien Pupier,18/Oct/23 08:57,18/Oct/23 11:52,several components are still using getOut which was deprecated in Camel 3. The documentation is still using getOut https://camel.apache.org/manual/faq/using-getin-or-getout-methods-on-exchange.html tests should have been migrated CAMEL-14020 already,Aurélien Pupier: Aurélien Pupier added a comment - 18/Oct/23 11:52 plans is to live with that until Camel 5 https://github.com/apache/camel/pull/11752#issuecomment-1768234494
https://issues.apache.org/jira/browse/CAMEL-19804,Sub-task,Open,Major,Unresolved,None,4.x,camel-jbang,Unknown,Unassigned,Claus Ibsen,29/Aug/23 18:52,05/Oct/23 11:03,We should parse <camelContext> (org.apache.camel.spring.xml.CamelContextFactoryBean) to read information like context name .. various options that may be enabled Then we can set those on camelContext And find a way to dump those as well into application.properties for camel-main camel-spring-boot camel-quarkus Not everything can easily be parsed but we can do the most common stuff,
https://issues.apache.org/jira/browse/CAMEL-19941,New Feature,Open,Major,Unresolved,None,None,None,Unknown,Unassigned,Federico Mariani,03/Oct/23 09:27,03/Oct/23 09:27,"Kiota is a library that generates Java classes from OpenAPI files. The architecture of the generated classes by Kiota is interesting, and I hope it can be leveraged by Camel probably by creating a new component. I did some experiments using Camel bean, ex. from( ""timer:getById?period={{timer.period}}"" ).routeId( ""getById"" ) .bean(apiClient().posts().byPostId(5), ""get()"" ) .marshal().json(JsonLibrary.Jackson) // marshal for visualization .log( ""getById -- ${body}"" ); from( ""timer:post?period={{timer.period}}"" ).routeId( ""post"" ) .setBody(constant(newPost)) .bean(apiClient().posts(), ""post(${body})"" ) .marshal().json(JsonLibrary.Jackson) // marshal for visualization .log( ""post -- ${body}"" ); Kiota ApiBuilder returns a CompletableFuture, which works well with bean(..) . But I think the integration can be improved since you can configure the request (ex. custom additional headers), therefore, what I'd like to achieve is something similar to the HTTP component, and to have something like from( ""timer:post?period={{timer.period}}"" ).routeId( ""post"" ) .setHeader( ""CUSTOM_HEADER"" , simple( ""CUSTOM_VALUE"" )) .setBody(constant(...)) .to( ""kiota??:..."" ) .marshal().json(JsonLibrary.Jackson) // marshal for visualization .log( ""post -- ${body}"" ); Kiota has a nice request builder, and I think users may want to use it, therefore, I'd like some input here. Do you think it is worth to have a component in Camel? or another sort of integration with Camel Do you know how this can be used with XML/YAML DSL?",
https://issues.apache.org/jira/browse/CAMEL-18686,Improvement,Open,Major,Unresolved,3.19.0,4.x,camel-resume-api,Unknown,Otavio Rodolfo Piske,Otavio Rodolfo Piske,03/Nov/22 17:16,23/Sep/23 11:40,Remove the configuration using keys via the registry. Default to auto-configuration on the route. This makes the implementation simpler on Camel K and Camel Quarkus.,
https://issues.apache.org/jira/browse/CAMEL-16866,New Feature,Open,Major,Unresolved,None,4.x,camel-opentelemetry,Unknown,Vignesh Nayak Manel,Claus Ibsen,17/Aug/21 07:47,31/Aug/23 18:39,"Currently we only have tracing support, but opentelemtry can also be used for gather metrics. Maybe look at how camel-micrometer is doing this https://github.com/apache/camel/tree/main/components/camel-micrometer",Vignesh Nayak Manel: Vignesh Nayak Manel added a comment - 31/Aug/23 17:10 I can try working on this | Claus Ibsen: Claus Ibsen added a comment - 31/Aug/23 18:33 Thanks vmanel I granted your user karma to self-assign JIRA tickets | Vignesh Nayak Manel: Vignesh Nayak Manel added a comment - 31/Aug/23 18:39 thanks davsclaus
https://issues.apache.org/jira/browse/CAMEL-19801,Improvement,Open,Major,Unresolved,4.0.0,None,camel-core,Unknown,Otavio Rodolfo Piske,Otavio Rodolfo Piske,29/Aug/23 11:17,29/Aug/23 11:17,There multiple places in the code base which contain code for copying and/or cloning Exchanges. We should provide a consistent way to do that.,
https://issues.apache.org/jira/browse/CAMEL-14470,Improvement,Open,Major,Unresolved,None,4.x,camel-github,Unknown,Andrea Cosentino,Andrea Cosentino,01/Feb/20 17:41,22/Aug/23 05:41,"Egit is not updated from a while, at least the version in mylyn. The github-api from kohsuke is actually the best Java client out there. So probably it makes sense to switch.","Andrea Cosentino: Andrea Cosentino added a comment - 04/Jan/21 15:41 Or maybe create a new component based on this? camel-github works fine. | Claus Ibsen: Claus Ibsen added a comment - 02/Sep/22 14:29 The project is at https://github.com/hub4j/github-api | Vignesh Nayak Manel: Vignesh Nayak Manel added a comment - 14/Aug/23 19:03 acosentino I can try working on this, pls let me know if old component should be modified or new component should be created? | Andrea Cosentino: Andrea Cosentino added a comment - 22/Aug/23 05:41 I think a new component should be created, but let's gather more opinions"
https://issues.apache.org/jira/browse/CAMEL-19745,Task,Open,Major,Unresolved,4.0.0,None,camel-cxf,Unknown,Unassigned,Claus Ibsen,15/Aug/23 07:09,16/Aug/23 04:28,[INFO] ----------------- < org.apache.camel:camel-cxf-soap > ------------------ [INFO] Building Camel :: CXF :: SOAP 4.1.0-SNAPSHOT [5/9] [INFO] from camel-cxf-soap/pom.xml [INFO] ------------------------------- [ jar ] -------------------------------- Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-saml-impl/4.2.0/opensaml-saml-impl-4.2.0.pom Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-saml-impl/4.2.0/opensaml-saml-impl-4.2.0.pom Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-saml-impl/4.2.0/opensaml-saml-impl-4.2.0.pom (8.5 kB at 11 kB/s) Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-parent/4.2.0/opensaml-parent-4.2.0.pom Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-parent/4.2.0/opensaml-parent-4.2.0.pom Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-parent/4.2.0/opensaml-parent-4.2.0.pom (7.4 kB at 16 kB/s) Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-core/4.2.0/opensaml-core-4.2.0.pom Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-core/4.2.0/opensaml-core-4.2.0.pom Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-core/4.2.0/opensaml-core-4.2.0.pom (3.1 kB at 7.0 kB/s) Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-profile-api/4.2.0/opensaml-profile-api-4.2.0.pom Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-profile-api/4.2.0/opensaml-profile-api-4.2.0.pom Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-profile-api/4.2.0/opensaml-profile-api-4.2.0.pom (3.1 kB at 7.1 kB/s) Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-saml-api/4.2.0/opensaml-saml-api-4.2.0.pom Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-saml-api/4.2.0/opensaml-saml-api-4.2.0.pom Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-saml-api/4.2.0/opensaml-saml-api-4.2.0.pom (3.6 kB at 7.4 kB/s) Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-security-api/4.2.0/opensaml-security-api-4.2.0.pom Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-security-api/4.2.0/opensaml-security-api-4.2.0.pom Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-security-api/4.2.0/opensaml-security-api-4.2.0.pom (4.2 kB at 9.1 kB/s) Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-soap-api/4.2.0/opensaml-soap-api-4.2.0.pom Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-soap-api/4.2.0/opensaml-soap-api-4.2.0.pom Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-soap-api/4.2.0/opensaml-soap-api-4.2.0.pom (2.8 kB at 6.1 kB/s) Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-xmlsec-api/4.2.0/opensaml-xmlsec-api-4.2.0.pom Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xmlsec-api/4.2.0/opensaml-xmlsec-api-4.2.0.pom Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xmlsec-api/4.2.0/opensaml-xmlsec-api-4.2.0.pom (3.0 kB at 6.7 kB/s) Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-security-impl/4.2.0/opensaml-security-impl-4.2.0.pom Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-security-impl/4.2.0/opensaml-security-impl-4.2.0.pom Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-security-impl/4.2.0/opensaml-security-impl-4.2.0.pom (4.2 kB at 9.3 kB/s) Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-xmlsec-impl/4.2.0/opensaml-xmlsec-impl-4.2.0.pom Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xmlsec-impl/4.2.0/opensaml-xmlsec-impl-4.2.0.pom Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xmlsec-impl/4.2.0/opensaml-xmlsec-impl-4.2.0.pom (4.1 kB at 9.2 kB/s) Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-xacml-impl/4.2.0/opensaml-xacml-impl-4.2.0.pom Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-impl/4.2.0/opensaml-xacml-impl-4.2.0.pom Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-impl/4.2.0/opensaml-xacml-impl-4.2.0.pom (2.8 kB at 6.1 kB/s) Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-xacml-api/4.2.0/opensaml-xacml-api-4.2.0.pom Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-api/4.2.0/opensaml-xacml-api-4.2.0.pom Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-api/4.2.0/opensaml-xacml-api-4.2.0.pom (1.6 kB at 3.6 kB/s) Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-xacml-saml-impl/4.2.0/opensaml-xacml-saml-impl-4.2.0.pom Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-saml-impl/4.2.0/opensaml-xacml-saml-impl-4.2.0.pom Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-saml-impl/4.2.0/opensaml-xacml-saml-impl-4.2.0.pom (2.9 kB at 6.3 kB/s) Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-messaging-api/4.2.0/opensaml-messaging-api-4.2.0.pom Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-messaging-api/4.2.0/opensaml-messaging-api-4.2.0.pom Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-messaging-api/4.2.0/opensaml-messaging-api-4.2.0.pom (2.3 kB at 5.1 kB/s) Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-soap-impl/4.2.0/opensaml-soap-impl-4.2.0.pom Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-soap-impl/4.2.0/opensaml-soap-impl-4.2.0.pom Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-soap-impl/4.2.0/opensaml-soap-impl-4.2.0.pom (4.2 kB at 9.3 kB/s) Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-storage-api/4.2.0/opensaml-storage-api-4.2.0.pom Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-storage-api/4.2.0/opensaml-storage-api-4.2.0.pom Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-storage-api/4.2.0/opensaml-storage-api-4.2.0.pom (1.7 kB at 3.8 kB/s) Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-xacml-saml-api/4.2.0/opensaml-xacml-saml-api-4.2.0.pom Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-saml-api/4.2.0/opensaml-xacml-saml-api-4.2.0.pom Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-saml-api/4.2.0/opensaml-xacml-saml-api-4.2.0.pom (2.0 kB at 4.5 kB/s) Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-saml-impl/4.2.0/opensaml-saml-impl-4.2.0.jar Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-core/4.2.0/opensaml-core-4.2.0.jar Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-saml-api/4.2.0/opensaml-saml-api-4.2.0.jar Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-profile-api/4.2.0/opensaml-profile-api-4.2.0.jar Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-security-api/4.2.0/opensaml-security-api-4.2.0.jar Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-security-impl/4.2.0/opensaml-security-impl-4.2.0.jar Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-soap-api/4.2.0/opensaml-soap-api-4.2.0.jar Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-xmlsec-api/4.2.0/opensaml-xmlsec-api-4.2.0.jar Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-xmlsec-impl/4.2.0/opensaml-xmlsec-impl-4.2.0.jar Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-xacml-impl/4.2.0/opensaml-xacml-impl-4.2.0.jar Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-xacml-api/4.2.0/opensaml-xacml-api-4.2.0.jar Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-xacml-saml-impl/4.2.0/opensaml-xacml-saml-impl-4.2.0.jar Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-xacml-saml-api/4.2.0/opensaml-xacml-saml-api-4.2.0.jar Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-saml-impl/4.2.0/opensaml-saml-impl-4.2.0.jar Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-saml-impl/4.2.0/opensaml-saml-impl-4.2.0.jar (1.1 MB at 961 kB/s) Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-core/4.2.0/opensaml-core-4.2.0.jar Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-profile-api/4.2.0/opensaml-profile-api-4.2.0.jar Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-saml-api/4.2.0/opensaml-saml-api-4.2.0.jar Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-security-api/4.2.0/opensaml-security-api-4.2.0.jar Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-security-impl/4.2.0/opensaml-security-impl-4.2.0.jar Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-profile-api/4.2.0/opensaml-profile-api-4.2.0.jar (33 kB at 66 kB/s) Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-soap-api/4.2.0/opensaml-soap-api-4.2.0.jar Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-soap-api/4.2.0/opensaml-soap-api-4.2.0.jar (173 kB at 171 kB/s) Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xmlsec-api/4.2.0/opensaml-xmlsec-api-4.2.0.jar Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-security-impl/4.2.0/opensaml-security-impl-4.2.0.jar (116 kB at 107 kB/s) Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-security-api/4.2.0/opensaml-security-api-4.2.0.jar (114 kB at 105 kB/s) Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-core/4.2.0/opensaml-core-4.2.0.jar (186 kB at 171 kB/s) Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xmlsec-impl/4.2.0/opensaml-xmlsec-impl-4.2.0.jar Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-api/4.2.0/opensaml-xacml-api-4.2.0.jar Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-impl/4.2.0/opensaml-xacml-impl-4.2.0.jar Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-saml-api/4.2.0/opensaml-saml-api-4.2.0.jar (469 kB at 347 kB/s) Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-saml-impl/4.2.0/opensaml-xacml-saml-impl-4.2.0.jar Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xmlsec-api/4.2.0/opensaml-xmlsec-api-4.2.0.jar (247 kB at 160 kB/s) Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-saml-api/4.2.0/opensaml-xacml-saml-api-4.2.0.jar Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-api/4.2.0/opensaml-xacml-api-4.2.0.jar (46 kB at 29 kB/s) Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-impl/4.2.0/opensaml-xacml-impl-4.2.0.jar (197 kB at 115 kB/s) Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xmlsec-impl/4.2.0/opensaml-xmlsec-impl-4.2.0.jar (387 kB at 210 kB/s) Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-saml-impl/4.2.0/opensaml-xacml-saml-impl-4.2.0.jar (26 kB at 14 kB/s) Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-saml-api/4.2.0/opensaml-xacml-saml-api-4.2.0.jar (8.6 kB at 4.2 kB/s),
https://issues.apache.org/jira/browse/CAMEL-19735,Task,Open,Major,Unresolved,None,4.x,tests,Unknown,Unassigned,Otavio Rodolfo Piske,10/Aug/23 16:13,14/Aug/23 08:18,"Reasons for test slowness: direct component blocking to wait for a consumer to be ready excessive resource usage (specially IO). Some heavy weight components: (aws ones, infinispan, Kafka, xmpp (why ???), spring batch, couchbase [ currently disabled]). Not all are problematic. Thread.sleep (already mapped on lots of separated items) Unnecessarily restarting the test infra See the attached CSV file for a report with the duration of each test.","Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 10/Aug/23 16:14 Added a few related tickets. | Claus Ibsen: Claus Ibsen added a comment - 10/Aug/23 17:04 A test that is just a bit more than 30 sec is a candidate for a direct block issue | Claus Ibsen: Claus Ibsen added a comment - 11/Aug/23 07:12 Tests using spring xml files with <camelContext> can turn off JMX to run a bit faster <jmxAgent id=""jmx"" disabled=""true""/> | Claus Ibsen: Claus Ibsen added a comment - 11/Aug/23 12:45 A lot of work would be to make camel-sjms parallel like camel-jms, but this requires to change all unit tests to use their own queue names (test class name usually) | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 11/Aug/23 13:15 davsclaus I'll take care of camel-sjms. | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 14/Aug/23 08:18 Added separate ticket for sjms tests."
https://issues.apache.org/jira/browse/CAMEL-9324,Improvement,Open,Major,Unresolved,None,4.x,"camel-core,(1)camel-ftp",Unknown,Unassigned,Claus Ibsen,14/Nov/15 10:42,09/Aug/23 09:27,"See nabble http://camel.465427.n5.nabble.com/sftp-endpoint-is-not-as-performant-as-expected-tp5773654p5773879.html Yeah the current changed read-lock afair don't keep state between polls. So we could look into one that does that, and do a full scan of all the files, and then do a change detect on all files all together and make up which ones hasn't changed. And that way can react faster than currently. Now that may require doing more file directory listings to gather all those files and their timestamps / size to see which one has changed, instead of monitoring a single file one by one. Also it may mean that files can be processed out of order, if a file sort isn't must be strictly followed.",Claus Ibsen: Claus Ibsen added a comment - 02/Jan/20 08:53 See also SO https://stackoverflow.com/questions/53780257/how-can-we-combine-readlockcheckinterval-and-maxmessagesperpoll-in-camel-file-co?noredirect=1#comment105287183_53780257
https://issues.apache.org/jira/browse/CAMEL-11114,New Feature,Open,Major,Unresolved,None,Future,"camel-core,eip",Unknown,Unassigned,Nicola Ferraro,05/Apr/17 14:31,09/Aug/23 09:27,"We should evaluate adding a new ""cache"" dsl that can be used with all cache components in Camel. A default implementation may use also caffeine, included in camel-core. A possible usage example may be: from( ""xxx"" ) .cache().on( ""${header.yyy}"" ).ttl(600000) // caches the body .to( ""http4: //a-service-that-makes-me-pay- for -each-request.com/api/expensive-endpoint"" ) .transform().zzz() .to( ""http4: //or-a-service-that-i-can-call-few-times-a-day.com/api/limited-endpoint"" ) .unmarshal() .endCache() It should be also useful to protect internal services when using Camel e.g. as a api-gateway (almost what hystrix does in case of failure of the target host).","Dmitry Volodin: Dmitry Volodin added a comment - 05/Apr/17 15:21 Nicola, this a good idea and desirable feature, please also add method which could invalidate cache by key. For example, we can catch event from foreign system that the data has changed and clear (invalidate) cache for the data and systems consistency. | Claus Ibsen: Claus Ibsen added a comment - 08/Sep/17 11:07 I suggest to move this to 2.21 release"
https://issues.apache.org/jira/browse/CAMEL-11132,New Feature,Open,Major,Unresolved,None,4.x,camel-core,Unknown,Tomohisa Igarashi,Tomohisa Igarashi,10/Apr/17 14:11,09/Aug/23 09:27,"CAMEL-10447 has introduced InputType/OutputType declaration and declarative Transformer/Validator based on those types declared on a route. Next step is to provide type metadata for each Components/DataFormats: Let components/DataFormats provide metadata about what data types are supported so that app developer can see Narrow down the possible data types (i.e. exclude unsupported types) and transformers when writing a route in IDE, allow IDE to show those candidates as a hint so that app developer can choose from. Also maven plugin could leverage those metadata Provide such facility from camel side so that the maven plugin and/or IDE can leverage it Annotation would be an option, but it only provides static types. For example xslt component only consumes/produces XML so ""XML"" could be provided via annotation. But dozer component consumes/produces arbitrary data formats and the actual type to be used is determined via configuration, so it cannot be provided via annotation. It would need a common way to calculate possible input types and output types on a component/endpoint and dataformat from its configuration. Sometimes even body of the input message would affect the possible output types. To visualize this we'll need some kind of simulation with a test message.","Dhiraj Sureshkumar Bokde: Dhiraj Sureshkumar Bokde added a comment - 28/Jun/17 19:14 Will this support dynamic discovery of types at runtime? Salesforce allows users to define custom relational tables, which means that objects supported by the component are dependent on user's salesforce instance. Even Salesforce defined default objects can be customized to add user defined fields. There can even be differences in schema depending on the underlying Salesforce version. So runtime discovery of schema is critical for Salesforce. At present this is supported using a camel-salesforce-maven-plugin which generates POJO classes from Salesforce schema. There are open issues for adding support for generating json schema and handling simple json strings as input/output fields. | Claus Ibsen: Claus Ibsen added a comment - 29/Jun/17 10:14 No this ticket is not about dynamic types. At first its about static types that a component can offer."
https://issues.apache.org/jira/browse/CAMEL-15966,New Feature,Open,Major,Unresolved,None,Future,None,Unknown,Zheng Feng,Luca Burgazzoli,18/Dec/20 09:03,09/Aug/23 09:22,,"Zheng Feng: Zheng Feng added a comment - 25/Feb/21 15:57 lt looks like the snowflake supports jdbc connection https://docs.snowflake.com/en/user-guide/jdbc.html So it could be inherit from camel-jdbc | Luca Burgazzoli: Luca Burgazzoli added a comment - 25/Feb/21 16:00 zhfeng would you like to work on this component ? | Zheng Feng: Zheng Feng added a comment - 02/Mar/21 15:19 lb sure, I assign to myself and will take a look this week. | Fernando Avalos: Fernando Avalos added a comment - 04/Mar/21 20:17 Hi lb zhfeng , Been thinking about this for sometime and my understanding is that the java Ingestor is the preferred tool for continuous data processing( snowflake-ingest-java). It uses jdbc in someway(I did not go to the details), should we explore that alternative? Or do you want to have the JDBC connector because most of the people knows JDBC? Let me know if I can help, | Zheng Feng: Zheng Feng added a comment - 08/Mar/21 16:32 Thanks favalos and I just check this tool. It uses jdbc to put the file data into the snowflake pipe stage and then check the ingest status or history by using the SimpleIngestManager."
https://issues.apache.org/jira/browse/CAMEL-16290,New Feature,Open,Major,Unresolved,None,4.x,camel-main,Unknown,Unassigned,Claus Ibsen,02/Mar/21 17:01,09/Aug/23 09:21,"When using camel-main as standalone then we only have support for loading .properties file for configuration. Some users are on the yaml wagon, so we could consider adding a new camel-main-yaml module that adds support for loading configuration from yaml and comes out of the box with the yaml dsl too. We can then make some kind of Main class for yaml that can startup Camel and load application.yaml as configuration and load routes .yaml files as routes. Then you can run Camel standalone in this yaml world. And then this can be a way for also running Kamelets standalone by having camel-kamelet included and being able to load kamelets yaml spec files. Yes they are intended for k8s but it may be okay to try to develop and play with kamelets without an entire k8s platform.",
https://issues.apache.org/jira/browse/CAMEL-17855,Test,Open,Major,Unresolved,None,4.x,tests,Moderate,Unassigned,Otavio Rodolfo Piske,25/Mar/22 11:16,09/Aug/23 09:20,Implement the same changes on https://github.com/apache/camel/pull/7254 to the other test infra services.,"Claus Ibsen: Claus Ibsen added a comment - 09/Aug/23 09:11 We are focusing effort on 4.x onwards so we should IMHO schedule this for 4.x and not 3.x | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 09/Aug/23 09:20 Yeah, this is an older ticket. I think what's missing is a review of the services that we can migrate and then include them here. Let me adjust this ticket a bit."
https://issues.apache.org/jira/browse/CAMEL-16751,New Feature,Open,Major,Unresolved,None,4.x,camel-core,Unknown,Unassigned,Claus Ibsen,23/Jun/21 14:38,09/Aug/23 09:19,"Some messaging components like JMS, RabbitMQ, Kafka etc can benefit from a transactional batch API so we can group together X messages into a single outgoing message from the consumer. Something like the old SJMS Batch but more general and reusable for more components.",
https://issues.apache.org/jira/browse/CAMEL-16791,Improvement,Open,Major,Unresolved,3.11.0,4.x,came-core,Unknown,Claus Ibsen,Jeremy Ross,07/Jul/21 15:11,09/Aug/23 09:19,"Perhaps should default to 1, or make it easily globally configured.","Claus Ibsen: Claus Ibsen added a comment - 28/Jul/21 06:53 Jeremy can you point to your zulip chat where you talked about this, and post the link in this JIRA, we need to be able to track this. | Jeremy Ross: Jeremy Ross added a comment - 18/Aug/21 19:16 davsclaus sorry just noticed this. Zuplip thread: https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/Aggregate.20worker.20pool.20changes.20in.203.2E11 | Jeremy Ross: Jeremy Ross added a comment - 20/Oct/21 17:34 davsclaus can we get this back ported to 3.11.x? | Karen Lease: Karen Lease added a comment - 05/Jan/22 18:16 I had a look at this, using the test AggregateConcurrentPerCorrelationKeyTest as a basis. In the current 3.15-SNAPSHOT, I don't find any behavior like jeremyross described: I'm seeing behavior in which the aggregate appears to be absorbing around 1,000 exchanges before letting them go. Does this pool have a queue, perhaps of size 1,000? Or is something else causing this? The thread pool and its queue don't actually play a role in deciding how many exchanges to aggregate; only the completed exchange for each aggregate is queued via the thread pool for further processing, and this doesn't appear to be significantly different in 3.11.0 and 3.15. At least in the test case, the thread pool runs the completed aggregate tasks immediately if the worker thread is not busy or queues them until the worker thread is available. If I modify the test to specify a thread pool with a queue size of 1 and the CallerRunsPolicy, I notice that a significant number of the completed aggregates are in fact processed in the calling thread and not in the thread pool, since this test generates events quickly. So I think using a default queue of 1 is not a good idea. | Jeremy Ross: Jeremy Ross added a comment - 05/Jan/22 19:23 The behavior I was seeing was the aggregator holding 1000 aggregated exchanges prior to releasing them. I suppose this could have just been an artifact of thread scheduling, but regardless, it resulted in drastically different behavior than < 3.11. | Karen Lease: Karen Lease added a comment - 11/Jan/22 22:11 The only scenario I can imagine which would fill the queue with the aggregated exchanges is that when one of them is processed it takes a long time to run (or is much slower than the process generating the aggregates), so that the worker thread remains busy and any new arrivals are queued. Does that sound possible in your use case? | Jeremy Ross: Jeremy Ross added a comment - 11/Jan/22 22:13 klease78 Yes. Inbound to the aggregator is reading off disk. Out of the aggregator are remote API calls. | Karen Lease: Karen Lease added a comment - 12/Jan/22 16:34 jeremyross I guess that could cause such behavior. Then what I'd expect is if the inbound is running in a single thread, that thread would also be used to execute the outbound API call so it would basically slow down the processing to match what the remote can handle. So for example, you might see one aggregate being completed by the Aggregator thread but following ones being completed by the thread sending events to the aggregator (pool-3-thread3 in the test case log below.) [Camel (camel-1) thread #1 - Aggregator] TRACE AggregateProcessor - Aggregated exchange onComplete: Exchange[DEB82B7F5DE944A-00000000000000D7] [pool-3-thread-3 ] TRACE AggregateProcessor - Aggregated exchange onComplete: Exchange[DEB82B7F5DE944A-00000000000000D9] Unless your inbound side is already multi-threaded, maybe it would be interesting to use an aggregator thread pool with more threads. | Jeremy Ross: Jeremy Ross added a comment - 12/Jan/22 16:51 klease78 Inbound is single threaded, and I've got the aggregator using a pool with a single thread. Really the issue was the aggregator now has a default queue size of 1000, which filled up instantaneously. The problem that creates for me is it makes tracing and debugging more difficult."
https://issues.apache.org/jira/browse/CAMEL-16809,Improvement,Open,Major,Unresolved,None,4.x,camel-aws2,Unknown,Andrea Cosentino,Andrea Cosentino,16/Jul/21 13:00,09/Aug/23 09:19,https://github.com/aws/aws-sdk-java-v2/issues/1703 We could try to apply ACL in the way describe in this issue with a couple of headers. We can do this on multipart and put object operations for beginnig. This is related to CAMEL-16806,
https://issues.apache.org/jira/browse/CAMEL-16861,Task,Open,Major,Unresolved,None,Future,documentation,Unknown,Claus Ibsen,Claus Ibsen,11/Aug/21 06:02,09/Aug/23 09:18,"The documentation needs some polishing and cleanup, and to remove obsolete pages etc.","Claus Ibsen: Claus Ibsen added a comment - 16/Aug/21 14:28 - edited TODO: cleanup general docs DONE TODO: cleanup eip docs DONE TODO: cleanup languages DONE TODO: cleanup core languages DONE TODO: cleanup FAQ TODO: remove more FAQs that are out-dated or out of fashion, and move content to relevant general doc page instead TODO: async DONE TODO: asynchronous-routing-engine DONE TODO: spring-testing DONE TODO: testing DONE TODO: threading-model DONE TODO: using property placeholders DONE | Claus Ibsen: Claus Ibsen added a comment - 16/Aug/21 15:08 - edited TODO: move osgi docs to camel-karaf DONE | Claus Ibsen: Claus Ibsen added a comment - 18/Aug/21 11:58 - edited TODO: move dozer type converter to dozer-component DONE | Claus Ibsen: Claus Ibsen added a comment - 19/Aug/21 12:07 TODO: reactive-routing-engine | Claus Ibsen: Claus Ibsen added a comment - 21/Aug/21 11:20 TODO: Restructure document nav into a TOC with relevant topics | Claus Ibsen: Claus Ibsen added a comment - 23/Aug/21 07:22 - edited TODO: advanced-configuring-of-spring rename to a better name (and make general as camel-main does this convention over configuration thingy) DONE TODO: NotifyBuilder DONE TODO: AdviceWith DONE | Claus Ibsen: Claus Ibsen added a comment - 25/Aug/21 11:01 - edited TODO: each of the camel-test JARs and their docs (the camel-test-spring is very outdated) DONE TODO: test camel on spring boot DONE | Claus Ibsen: Claus Ibsen added a comment - 16/Sep/21 09:04 - edited TODO: eip cleanup A-R DONE TODO: eip cleanup U-W DONE | Claus Ibsen: Claus Ibsen added a comment - 19/Oct/21 18:27 - edited TODO: eip split DONE TODO: eip threads DONE TODO: eip to DONE TODO: eip toD DONE TODO: eip transactional client DONE | Claus Ibsen: Claus Ibsen added a comment - 19/Oct/21 18:28 TODO: There may be two different pages that covers camel on spring-boot | Claus Ibsen: Claus Ibsen added a comment - 03/Nov/21 08:10 TODO: create page for camel concepts and move stuff from camelcontext.adoc there | Claus Ibsen: Claus Ibsen added a comment - 03/Nov/21 08:10 - edited TODO: user guide cleanup 2nd pass TODO: 2nd pass a..d DONE TODO: currently at error-handler | Claus Ibsen: Claus Ibsen added a comment - 03/Nov/21 08:41 TODO: Rename Endpoint-dsl to endpoint-dsl"
https://issues.apache.org/jira/browse/CAMEL-16956,Improvement,Open,Major,Unresolved,None,4.x,camel-aws,Unknown,Andrea Cosentino,Andrea Cosentino,14/Sep/21 11:41,09/Aug/23 09:18,"At the moment the concurrent consumers value is set on the consumer scheduler. We need to do something like we are doing in camel-nats, where we define a poolSize for the executor Services and spin up concurrent consumers based on this value and an executor service.","Ben Maes: Ben Maes added a comment - 14/Sep/21 12:37 Current workaround I used to fix this: from(aws2Sqs( ""input.fifo"" )) .to(seda( ""test"" ).blockWhenFull( true )); from(seda( ""test"" ).size(1).concurrentConsumers(5)) to( ""slow"" ); | Andrea Cosentino: Andrea Cosentino added a comment - 17/Sep/21 16:18 Probably it makes sense to have a second type of consumer and leaving the batch one, which makes still sense. | Simon Rasmussen: Simon Rasmussen added a comment - 15/Jan/23 13:37 Another solution which only uses a single route: from(aws2Sqs( ""input.fifo"" )).threads(1,5,200).to( ""slow"" ); This achieves same as above workaround. This can be used together with extendMessageVisibility and maxMessagesPerPoll to increase throughput. The consumer will immediately forward the message(s) to the threads EIP and begin the next poll."
https://issues.apache.org/jira/browse/CAMEL-17193,Task,Open,Major,Unresolved,None,Future,"build system,(1)documentation",Unknown,Unassigned,Claus Ibsen,13/Nov/21 12:54,09/Aug/23 09:17,"Spring Boot has special section added to the camel core projects component docs. The other sub projects does not. We should move this to its own camel spring boot docs, like we do for camel-quarkus https://camel.apache.org/camel-quarkus/next/reference/extensions/asterisk.html Then we can have generated something similar as above that has this spring boot auto configuration table. And any custom spring boot doc for this particular component. This makes the core documentation vanilla.",
https://issues.apache.org/jira/browse/CAMEL-17339,Improvement,Open,Major,Unresolved,None,4.x,tooling,Unknown,Andrea Cosentino,Andrea Cosentino,15/Dec/21 12:07,09/Aug/23 09:16,"Let's try to avoid this, it's better to have a comma separated string for Kamelets purpose, but also because it is much more cleaner in terms of reifiers.",Andrea Cosentino: Andrea Cosentino added a comment - 15/Dec/21 12:38 Azure-CosmosDB Done.
https://issues.apache.org/jira/browse/CAMEL-17530,New Feature,Open,Major,Unresolved,3.14.0,4.x,"camel-azure,(1)camel-spring-boot",Unknown,Unassigned,Reneesh,21/Jan/22 10:26,09/Aug/23 09:14,"Problem: While accessing files from Azure blob in a concurrent executions environment, there is no way in which the file can be locked or leased by the application using Camel URI options or configurations, this results in executing the same file by different process if its available and cause exception while performing file processing and ended up in error. Solution: Azure API supports a Lease Blob operation, which can be used to lease a file for some duration while processing a file and later lease can be released upon completing the file processing. It will help in preventing the file being accessed by different process. Reference : https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob It would be great if we can improve the camel azure storage component with this feature for upcoming releases or versions.",
https://issues.apache.org/jira/browse/CAMEL-17539,Task,Open,Major,Unresolved,None,Future,build system,Unknown,Unassigned,Claus Ibsen,23/Jan/22 11:17,09/Aug/23 09:13,"They are currently in the dsl folder. Lets moved them to their own jbang folder, and build it after dsl.",
https://issues.apache.org/jira/browse/CAMEL-17653,New Feature,Open,Major,Unresolved,None,Future,camel-core,Unknown,Unassigned,Claus Ibsen,16/Feb/22 09:34,09/Aug/23 09:12,"Today the supervise route controller is only active during startup to ""fix"" the problem with starting up routes and to retry starting routes if they failed during startup. When all is started then the supervised route controller will terminate itself. The controller should play a bigger role by act as single gateway into the health check, management, and monitoring of the routes so it should keep monitoring the routes act as health check facade for all the routes have configurable strategies for users to specify criteria's for when a route is UP or DOWN (eg DOWN after 5 consecutive errors, and so on) be able to stop routes in case they start to fail be able to start routes again after X period to see if they can become succesfull again and so on...",
https://issues.apache.org/jira/browse/CAMEL-17671,New Feature,Open,Major,Unresolved,None,4.x,camel-azure,Unknown,Unassigned,Tom Cassimon,17/Feb/22 13:46,09/Aug/23 09:12,"I would like to see the feature of transactions in the azure servicebus when using queues. The use case I would like to have is that when a message is processed in a route with an azure servicebus consumer and an error occurs during processing, that the message is not aknowledged to the azure servicebus broker, resulting in the message to re-appear on the queue and can be processed by the same or another listener instance on the queue. If i scroll to the configuration in Azure of the service bus I see a max delivery count setting, so i presume the feature is possible in the service bus component but not used in the camel service bus component. An simple example of a route that should not aknowledge the message on the ServiceBus component, and should lead to the message to re-appear on the queue for a redelivery attempt. from( ""azure-servicebus: //<redacted>"" ) .autoStartup( true ) .transacted() .throwException( new RuntimeException()) .end();","Claus Ibsen: Claus Ibsen added a comment - 17/Feb/22 14:06 Tom, can you add that example from the chat with JMS that better explain what you wanted, about redelivery and dequeue the same message again from the broker if faiing. | Tom Cassimon: Tom Cassimon added a comment - 18/Feb/22 08:48 It looks like the component could support transactionality, while debugging the code and looking for the best solution I noticed if i kill my test jvm the message stays on the queue in azure. I took a brief look at the azure component code but didn't directly found a pointer of where the transactionality could or should be implemented. | MattV: MattV added a comment - 11/Mar/22 22:43 I'd also like to see this. Taking a look in the code a bit, it looks like the camel component is not properly calling the ""ServiceBusReceiverAsyncClient.abandon"" when there is an exception on the route. The ""complete"" method is always getting called, causing the client to remove the message from the queue in peek lock mode. | Claus Ibsen: Claus Ibsen added a comment - 12/Mar/22 07:40 Matt, you are welcome to work on a potential implementation of this. The consumer on completion currently only logs the exception. You can check if the exchange is transacted and then do the abandon instead. | MattV: MattV added a comment - 12/Mar/22 15:15 - edited i had started to take a look at how to do it, it's been slow as I'm not that familiar with reactive programming. It's worth noting though, in the documentation it states that the default behavior is exactly what is expected here but not happening: Azure ServiceBus :: Apache Camel ""By default, a successfully processed message is {completed}. If an error happens when the message is processed, it is {abandoned}"" | MattV: MattV added a comment - 15/Mar/22 15:24 looked some more into this, looks like its an issue with the azure library. the autoComplete option is being deprecated so it looks like itll be up to the component to implement this complete/abandon pattern."
https://issues.apache.org/jira/browse/CAMEL-17716,Improvement,Open,Major,Unresolved,None,Future,camel-core,Unknown,Unassigned,Claus Ibsen,27/Feb/22 16:03,09/Aug/23 09:12,"We should keep camel-core-model for the generic DSL, and then move those that are for legacy XML to camel-core-xml only - this is for spring xml and blueprint xml.",
https://issues.apache.org/jira/browse/CAMEL-17775,New Feature,Open,Major,Unresolved,None,4.x,None,Unknown,Andrea Cosentino,Claus Ibsen,10/Mar/22 15:03,09/Aug/23 09:12,"Like we did for camel-kafka, where we have a readiness health check that tracks if there is a live connection to kafka or not, and can then mark whether we are ready or not. Other components can benefit from similar idea.",
https://issues.apache.org/jira/browse/CAMEL-18096,Improvement,Open,Major,Unresolved,None,4.x,camel-kafka,Unknown,Zheng Feng,Zheng Feng,11/May/22 02:40,09/Aug/23 09:10,Currently it needs to use addtional-properties to enable kafka transaction. It would be good if we could make configuring the TX options as new endpoint options so its easier and more tooling friendly. Additional properties is only intended for special and rare use-cases. transactionalId -> addtional-properties [transactional.id] idempotence -> additional-properties [enable.idempotence] retries -> additional-properties [retries],"Claus Ibsen: Claus Ibsen added a comment - 11/May/22 04:25 Would you use transaction with idempotence=false ? I just wonder if that option could automatic just be set if you have transaction enabled. Also how unique should the transaction id be? Does it make sense to have a way for Camel to auto generate an unique id? | Zheng Feng: Zheng Feng added a comment - 11/May/22 07:02 No, I think idempotence=true and retries are mandatory. In term of transaction id, I need to check with the kafka document."
https://issues.apache.org/jira/browse/CAMEL-18114,New Feature,Open,Major,Unresolved,None,4.x,camel-aws,Unknown,Unassigned,Claus Ibsen,16/May/22 09:35,09/Aug/23 09:09,"Whenb you have a lot of dynamic SQS queue names, or S3 bucket names etc. There are likely room for improvements so we can make camel-aws support a special header with a override queue / bucket name, then you can use that for dynamic but reuse same endpoint / client that keeps resource low and then we can add send-dynamic support as well, (camel internal lingo, for a component that is specially optimized for toD) the messaging components jms / kafka have that and also http",
https://issues.apache.org/jira/browse/CAMEL-18265,Task,Open,Major,Unresolved,None,4.x,None,Unknown,Andrea Cosentino,Andrea Cosentino,11/Jul/22 16:59,09/Aug/23 09:07,,
https://issues.apache.org/jira/browse/CAMEL-18356,Improvement,Open,Major,Unresolved,None,4.x,camel-resume-api,Unknown,Unassigned,Otavio Rodolfo Piske,05/Aug/22 10:46,09/Aug/23 09:05,We should only have one resume strategy in the Kafka component. It makes everything simpler.,
https://issues.apache.org/jira/browse/CAMEL-18474,Improvement,Open,Major,Unresolved,None,Future,documentation,Unknown,Unassigned,Claus Ibsen,07/Sep/22 07:46,09/Aug/23 09:05,"See CAMEL-18240 We can do method signatures to show with each parameter in a new line, or how a code editor would format the code only show alias table if there are alias sort the parameters table according to index in the method signature (instead of a..z)",
https://issues.apache.org/jira/browse/CAMEL-18498,New Feature,Open,Major,Unresolved,None,4.x,None,Unknown,Andrea Cosentino,Andrea Cosentino,12/Sep/22 09:50,09/Aug/23 09:05,,
https://issues.apache.org/jira/browse/CAMEL-19685,Improvement,Open,Major,Unresolved,None,Future,None,Unknown,Unassigned,Claus Ibsen,31/Jul/23 07:34,01/Aug/23 13:56,All the various AWS components uses AWSClient and they dont offer resilience and fault tolereance OOTB. So you need to deal with this yourself. We can use connection pool that has logic to create / re-create and destroy and make this more general for all the AWS components.,
https://issues.apache.org/jira/browse/CAMEL-19680,Task,Open,Major,Unresolved,None,None,tests,Unknown,Unassigned,Otavio Rodolfo Piske,29/Jul/23 07:09,29/Jul/23 07:56,"Review tests currently disabled (+ than 50). These components seem to have a large number of disabled tests: camel-zendesk : auto-generated test (OK) camel-twillio : auto-generated test (OK) camel-joor : done (also: CAMEL-19681 ) camel-box : semi-automated tests camel-braintree : semi-automated tests camel-web3j : semi automated tests. camel-fhir : flaky tests (OK) These are probably OK, but they may be missing the disabled reason or are auto-generated tests or require external system access (i.e.: semi-automated tests).",
https://issues.apache.org/jira/browse/CAMEL-19674,Improvement,Open,Major,Unresolved,None,None,camel-aws,Unknown,Unassigned,Claus Ibsen,28/Jul/23 09:02,28/Jul/23 09:02,,
https://issues.apache.org/jira/browse/CAMEL-19582,Improvement,Open,Major,Unresolved,4.0-M3,None,camel-aws2,Unknown,Unassigned,Hamed Hatami,05/Jul/23 20:54,27/Jul/23 17:52,"In ""aws2-kinesis"" component , there's no retry mechanism (resiliency is not considered) just in case there's any connectivity outage, therefore if Kinesis goes off , Kinesis Client won't get back to work anymore.","Andrea Cosentino: Andrea Cosentino added a comment - 06/Jul/23 09:44 > This has to be fixed ASAP Open source communities don't work in this way. ""Has to be fixed"" is not acceptable. Out there, there are plenty of enterprise solutions based on Camel, you can buy support and open issue saying ""This has to be fixed, because I pay"", here, your issue is like any other issue. | Hamed Hatami: Hamed Hatami added a comment - 06/Jul/23 10:28 It looks as if I put it differently then I'll change it accordingly | Claus Ibsen: Claus Ibsen added a comment - 26/Jul/23 08:30 You can have health checks that can report it as DOWN and your platform can then restart the container | Hamed Hatami: Hamed Hatami added a comment - 26/Jul/23 10:37 - edited davsclaus I'm not sure if that's a good way to fulfill this requirement cause the health checks always are used from higher layer of the component whereas we tend to have such a feature within the component means when there a break-down then another connection needs to be taken immediately without extra efforts for upper layer. for example camel-kafka has such a feature (retry mechanism) | Claus Ibsen: Claus Ibsen added a comment - 27/Jul/23 17:24 its a suggestion what you can do today. And as said above, you are welcome to work on improving the source code and send PR. Also your description is a bit vague. Is it the consumer or producer side (Camel has error handler for retry on producer), and what exception/error do you see, do you have stacktraces. And have you researched the aws kinesis client java api what it documents about fault tolerance. | Hamed Hatami: Hamed Hatami added a comment - 27/Jul/23 17:51 - edited davsclaus For the time being , I've solved my problem by stopping and starting the camel routes and in general I suppose, connection can be used for both consumer and producer parts and if we improve the connection part then both functionalities can utilize the same features of connection. my issue is in Kinesis consumer part when the connection is dropped then it won't get back to life. I'll work on the user-story on my own for sure"
https://issues.apache.org/jira/browse/CAMEL-18592,Improvement,Open,Major,Unresolved,None,Future,None,Unknown,Unassigned,Luca Burgazzoli,06/Oct/22 10:36,26/Jul/23 05:47,"As today, there is no naming convention for headers so each component is free to define them, as a result we have as example: CamelAwsS3BucketName kafka.TOPIC Naming is also relevant for the header filter strategy that usually remove any header that has Camel as a prefix. We should probably define some better rules like: headers starting with camel.* are used to carry any camel specific attribute headers starting with the scheme of the component, ${scheme}.*, are meant to carry any system specific attribute metadata required for additional internal processing logic should be set as exchange properties ( https://issues.apache.org/jira/browse/CAMEL-18591 ) given the two header above, they would be translated into something like: headers: aws-s3.bucket.name kafka.topic properties: camel.aws-s3.bucket.name",
https://issues.apache.org/jira/browse/CAMEL-18591,Improvement,Open,Major,Unresolved,None,Future,None,Unknown,Unassigned,Luca Burgazzoli,06/Oct/22 09:50,26/Jul/23 05:47,"Some components rely on header values to react to exchange completion, as example the AWS S3 component, uses the bucked name and key to delete or move buckets on completion [1] . As headers are often manipulated by users and may affect other downstream processing logic, it would be better to move such information to the exchange properties. For backward compatibility we could add a double lookup like: var name = exchange.getProperty(AWS2S3Constants.BUCKET_NAME, String .class); if (name == null ) { name = exchange.getMessage().getHeader(AWS2S3Constants.BUCKET_NAME, String .class); } [1] https://github.com/apache/camel/blob/2263301d9701d4ddfe306ea52aa05deffdd7b0b9/components/camel-aws/camel-aws2-s3/src/main/java/org/apache/camel/component/aws2/s3/AWS2S3Consumer.java#L314-L315",
https://issues.apache.org/jira/browse/CAMEL-16977,New Feature,Open,Major,Unresolved,None,Future,camel-core,Unknown,Unassigned,Claus Ibsen,15/Sep/21 08:51,24/Jul/23 18:28,"We should have some logic in camel-support / camel-core that allows to determine if an exception is transient or business. A transient is a networking error, where you may want to try again in a bit later. A business error is UserNotFoundException or something of that sorts. We could have some shared logic in camel-support that attempts to categorize a Exception. And allow end users to plugin custom logic if needed. This can be used in health-checks to determine if a Camel app is healthy or not.",
https://issues.apache.org/jira/browse/CAMEL-16100,Improvement,Open,Major,Unresolved,None,Future,camel-core,Unknown,Unassigned,Claus Ibsen,28/Jan/21 09:52,24/Jul/23 18:02,"endpoint such as seda:foo become seda://foo when normalized as it aided to match up similar endpoints, such as http:apache.org vs http://apache.org , and file:foo vs file://foo however the double slash is a bit annoying and today with some better algorithm we can likely remove this rule, and make endpoint as-is. And have better logic to match that http:apache.org and http://apache.org would be the same etc. However its rooted for soo long, so lets keep this in the backlog for v4 or some day in v3","Claus Ibsen: Claus Ibsen added a comment - 11/Apr/21 07:24 This helps optimize when resolving and normalizing endpoints, especially for dynamic uris which would be using seda:foo syntax which we can then quickly detect is already in correct format and avoid parsing and creating new objects - which reduces object allocations."
https://issues.apache.org/jira/browse/CAMEL-15263,Improvement,Open,Major,Unresolved,None,Future,"camel-blueprint,(1)camel-spring",Unknown,Unassigned,Claus Ibsen,01/Jul/20 05:49,24/Jul/23 17:29,EIPs with outputs have route as a possible choice due to how JAXB generates the schema. We can amend the file afterwards and remove it. And also now routeTemplate.,
https://issues.apache.org/jira/browse/CAMEL-14619,New Feature,Open,Major,Unresolved,None,None,camel-core,Moderate,Unassigned,Luca Burgazzoli,27/Feb/20 08:34,24/Jul/23 17:26,"Some data formats such as the future CloudEvent one ( https://issues.apache.org/jira/browse/CAMEL-13335 ) have specifications that describe how to bind them to specific transports ( https://github.com/cloudevents/spec ) so we should introduce a SPI to make this binding automatic so in a route like: from( ""undertow: //http://0.0.0.0:8080"" ) .unmarshal().cloudEvents() .to( ""kafka:my-topic"" ); the exchange gets automatically translated to a Kafka message according to the CloudEvent binding specs for Kafka.","Zoran Regvart: Zoran Regvart added a comment - 28/Feb/20 09:43 lb I've added labels to help find this issue for GSoC, if you're already working on this please remove them. | Claus Ibsen: Claus Ibsen added a comment - 24/Jul/23 17:26 Christopher is working on this"
https://issues.apache.org/jira/browse/CAMEL-14600,New Feature,Open,Major,Unresolved,None,Future,camel-core,Unknown,Unassigned,Luca Burgazzoli,20/Feb/20 15:35,24/Jul/23 17:25,"As today the auto configuration of components is delegated to the runtime so as example, spring-boot auto configure components with the help of some CamelXYZAutoConfiguration classes, whereas the camel-main scans properties for those that starts with camel.component and configure the related components. I wonder if we can have a single point where component, dataformat, language & co auto-configuration take place regardless of the runtime camel runs on. As example for components, the auto configuration could happen when they are initialized like: search for component-configurer (it is done already) use the component-configurer - if any - to initialize the component The component-configurer generator could also be enhanced not only to apply given properties but also to look them up from the camel context with a method like: public boolean configure(CamelContext camelContext, String componentName); The advantage of such implementation would be that: component are consistent configured across runtimes (i.e. at the moment spring boot starters have an option to provide customizers to let use tune component configurations) with auto generated code we could reduce the need to create intermediate objects on camel-main",Claus Ibsen: Claus Ibsen added a comment - 17/Mar/20 08:34 The spring boot XYZ auto configuration classes is needed to make it spring boot standard and also for sb tooling metadata. So I think we should keep those. | Luca Burgazzoli: Luca Burgazzoli added a comment - 17/Mar/20 09:28 Right wonder if we should keep the XyzConfiguration and change the XyzAutoConfiguration to create XyzConfigurer so the core camel behaviour would be consistent in any case (and maybe we can auto generate SpringBootXyzConfgurers)
https://issues.apache.org/jira/browse/CAMEL-13827,Improvement,Open,Major,Unresolved,None,Future,"camel-core,eip",Unknown,Unassigned,Claus Ibsen,06/Aug/19 09:56,24/Jul/23 17:07,"We have too many with all the combos of their options. Instead we should have a few common, and then otherwise let users use the fluent api on the definition itself, and return back via end etc.",Claus Ibsen: Claus Ibsen added a comment - 06/Aug/19 09:56 See the screenshot
https://issues.apache.org/jira/browse/CAMEL-19608,New Feature,Open,Major,Unresolved,None,Future,None,Unknown,Andrea Cosentino,Andrea Cosentino,17/Jul/23 09:32,24/Jul/23 09:21,https://open-services.net/ with Eclipse Lyo https://github.com/eclipse/lyo,
https://issues.apache.org/jira/browse/CAMEL-19635,Test,Open,Major,Unresolved,None,None,camel-as2,Novice,Unassigned,Otavio Rodolfo Piske,21/Jul/23 09:17,21/Jul/23 09:21,AS2 tests are textbook example of how not to write modern tests. Things to fix: Test resources and their management are way too tightly coupled to the tests Assumptions are handled as assertions . Too much being tested in a single test and even more in a single class Broken logs . Not handling exceptions as an assertion when it likely should . Unused variables,
https://issues.apache.org/jira/browse/CAMEL-5576,Improvement,Open,Major,Unresolved,None,None,camel-core,Unknown,Unassigned,James Strachan,07/Sep/12 08:41,17/Jul/23 12:03,"the underlying JAXB model of Camel has nothing to do with spring and can be used outside of Spring (e.g. with CDI or Guice or even without any DI frameworks). However traditionally we've got 'spring' in the namespace URI and we package the XSD inside the camel-spring.jar. maybe we could include the camel-core.xsd in the same jar as the model classes using a more generic name; e.g. URI = ""http://camel.apache.org/schema/core"". Then folks can load and save the XML model of Camel more easily - without requiring camel-spring.jar When using Camel inside spring we still need the namespace http://camel.apache.org/schema/spring to be supported; but maybe we can do that in the way the blueprint works; by swizzling the namespace URI in the Spring namespace hander? Then we have a core namespace/xsd, a spring namespace/xsd and a blueprint namespace/xsd",Claus Ibsen: Claus Ibsen added a comment - 02/Sep/22 08:39 the xml-io parser can read without spring as namespace
https://issues.apache.org/jira/browse/CAMEL-7778,New Feature,Open,Major,Unresolved,2.12.0,None,camel-core,Moderate,Unassigned,Serge Smertin,04/Sep/14 12:18,17/Jul/23 12:02,"Generally, it's more efficient/loosely coupled to send to endpoint aliases, so we might change implementation of endpoint without changing the code: // in cases of dynamic routing producer.asyncSend( ""specificMessageChannel"" , new Processor() { ... }); It's possible to do it through Spring DSL, but impossible to register endpoints from route builder if we use spring. Also it is easier to configure number of consumers and etc for endpoints. <endpoint id= ""specificMessageChannel"" uri= ""seda:internalProcessing?concurrentConsumers=8"" /> JndiRegistry has ""bind"" method and ApplicationContextAwareRegistry does not have it. Another use-case for that is camel-test component","Claus Ibsen: Claus Ibsen added a comment - 21/Mar/15 10:06 Okay so this ticket is really about having an endpoint register in java, which allows you to define endpoints and bind them to an id. So you can do something like in spring with <endpoint id=""xxx"" uri=""xxx""/> | Claus Ibsen: Claus Ibsen added a comment - 09/Aug/15 08:19 - edited You can use @EndpointInject in your route builder classes, though they dont allow that nice id association. | Serge Smertin: Serge Smertin added a comment - 07/Sep/15 18:07 So, i have a workaround in my code for this, but i think this should be included in Camel core architecture."
https://issues.apache.org/jira/browse/CAMEL-11248,Improvement,Open,Major,Unresolved,None,None,"camel-blueprint,(3)camel-core,camel-core-xml,camel-spring",Unknown,Unassigned,Luca Burgazzoli,09/May/17 13:36,17/Jul/23 11:59,"If an id is added to an endpoint definition in a spring/blueprint xml, this endpoint will be registered to the application context but you may need to add an id just for reference or for your tools without impacting the camel run-time so it would be nice to support an externalId atttribute, like: <from externalId= ""my-id"" uri= ""twitter://timeline/user"" />",
https://issues.apache.org/jira/browse/CAMEL-11566,Improvement,Open,Major,Unresolved,None,None,camel-core,Advanced,Unassigned,Luca Burgazzoli,20/Jul/17 05:20,17/Jul/23 11:58,"Have a single and complete source fo events, as today we can listen for events using different concepts: LifecycleStrategy StartupListener EventNotifier RoutePolicy Some of them seems overlapping a little so we may create 'contextual' listeners like RouteEventListener, ExchangeEventListener, etc and then i.e. the RoutePolicy could extend only what make sense for the context so for the camel context prospective only an event has to be fired. Listeenrs can eventually throw an uncheckd ""VetoedException"" if the operation should not be done (i.e. a policy may prevent to stop or start a route if certain circumstances).",
https://issues.apache.org/jira/browse/CAMEL-16221,Improvement,Open,Major,Unresolved,None,Future,camel-core,Unknown,Unassigned,Luca Burgazzoli,16/Feb/21 14:33,17/Jul/23 11:41,"As today URIs are the primary mechanism Camel uses internally to describe endpoints but I think it is time to re-consider the dependency on URIs for camel internals and leave the URIs as an external representation of endpoints As example: the Endpoint DSL is required to generate the related endpoint URI to leverage Camel's APIs but to create an endpoint, the schema and a map of options, would be more than enough. components that wrap other components, such as kamelets, master & co may need to re-create URIs to create instances of the delegated endpoints which is cumbersome as there's lot of options to take into account (RAW, url-encoding, placeholders) the YAML DSL and camel-kafka-connectors are using and Endpoint DSL alike syntax where a user can define endpoints by scheme + option pairs without the need of writing URIs.","Luca Burgazzoli: Luca Burgazzoli added a comment - 16/Feb/21 14:40 /cc davsclaus gnodet | Claus Ibsen: Claus Ibsen added a comment - 16/Feb/21 15:13 10 years ago there was an attempt for a component/endpoint to be able to do something like that, but back then we didnt have any details like we have today from the camel-catalog, and its api where we can build uri from scheme + options. So we are in a better situation today, where an Endpoint can be configured in more ways, but be able to unique identify itself as an uri. With the generated configurer we are now also able to set those map parameters in a consistent and safe way on the endpoint. However we need to go via the component class as each component may do something special, but there is api for uri, Map of parameters so that is close to what we need. We can then add a new (scheme, map) and then we should be able to create the endpoint and have it represent itself as uri. | Guillaume Nodet: Guillaume Nodet added a comment - 16/Feb/21 15:41 Some endpoints also use the path inside the URI, so we'd need a reserved property for that. We could use a simple map with scheme and path being reserved and let it opened for other properties. A single map could have the benefit to be easily translated from json/yaml maybe. | Luca Burgazzoli: Luca Burgazzoli added a comment - 16/Feb/21 16:17 looks like an URI | Claus Ibsen: Claus Ibsen added a comment - 16/Feb/21 16:36 Yeah the context path is build up of a set of parameters, eg those marked with @UriPath. But surely we can add reserved keys. And then there are components that has lenient parameters (eg like http clients). And then there are some options that are multi-valued, where you in uri repeat the parameter with a prefix xxx.foo=123&xxx.bar=456, where the key name is xxx (multivalue = true). | Luca Burgazzoli: Luca Burgazzoli added a comment - 17/Feb/21 08:55 - edited gnodet maybe we do not need to reserve a specific property for the path as example: camel-http has http:httpUri as syntax camel-infinispan has infinispan:cacheName So in fact, we may only need to use such properties (and check that components are doing the right things) davsclaus we could think to have the EndpointUriFactory to be able to marshal and unmarshal endpoint uris, like: String uri = EndpointUriFactory.buildUri( ""http"" , Map.of( ""httpUri"" , ""/a/b/c"" , ""foo"" , ""bar"" )); EndpointDefinition definition = EndpointUriFactory.parseUri( ""http: //a/b/c?foo=bar"" ); Maybe EndpointDefinition.toString() should then compute the uri | Claus Ibsen: Claus Ibsen added a comment - 28/Jul/21 07:59 You can build those uris today via ExtendedCamelContext, where context-path and query parameters are assembled correctly (such as your http and infinispan example) getEndpointUriFactory( ""http"" ).buildUri( ""http"" , map goes here); | Grzegorz Grzybek: Grzegorz Grzybek added a comment - 16/Nov/22 14:43 - edited Just to provide some summary: if there are two slashes ( // ) after first colon, what follows is always the authority ( java.net.URI#getAuthority() ), so: file:/path/to/file.txt - authority is null and /path/to/file.txt is the path file://path/to/file.txt - path is the authority, /to/file.txt is the path file:///path/to/file.txt - authority is null and the path is /path/to/file.txt if there's no slash after first colon, the URI is always opaque - it never has any path ( java.net.URI#getPath() ), it has only three components: scheme scheme-specific part fragment if there's a scheme, the URI is always absolute (whether or not there's a slash after scheme) if there's no scheme, the URI is never absolute (even in java.net.URI.create(""/hello"") )."
https://issues.apache.org/jira/browse/CAMEL-16737,Improvement,Open,Major,Unresolved,None,Future,camel-core,Unknown,Unassigned,Claus Ibsen,20/Jun/21 06:25,17/Jul/23 11:35,"Lets look at if we can make transacted work better with the reactive routing engine. See CAMEL-16734 and the ticket it mentions for background. Maybe we could let the routing engine be aware if a task is under transaction and execute it synchronously via its current thread, and ensure any other tasks that this thread or exchange is providing to the reactive engine is processed under the transaction via that same thread. At this movement its the EIP implementation that need to splitup their tasks into transacted vs non-transacted which would ideally be avoided.","Benjamin Graf: Benjamin Graf added a comment - 04/Jul/21 15:07 - edited Hi davsclaus , I think the worker feature introduced in Camel 3.11.0 makes this issue to a bug since non-synchronous routing leads to endpoint being fired too early. If you like, I can show an example, but the test cases from CAMEL-16734 should also fail, too if you order the exchanges in mock:result. But to be honest, I did not test it myself Benjamin BTW: Dirty workaround is to set SynchronousExecutorService (Works not in every case!)"
https://issues.apache.org/jira/browse/CAMEL-17014,New Feature,Open,Major,Unresolved,None,Future,camel-core,Unknown,Unassigned,Claus Ibsen,28/Sep/21 17:06,17/Jul/23 11:29,"Some components have their own thread pool for worker threads that they use. For example salesforce, kafka, jms, and others. They use this continue routing in Camel when the component has received a response or ack from the underlying 3rd party (kafka, jms, salesforce etc.) We should consider a API with a SPI so we can use a shared worker pool from camel-core that has a fixed set of worker threads. Then its easier to control total number of threads / pools etc. And with a SPI then we can delegate this to another runtime such as vertx, quarkus etc that has such concept.",
https://issues.apache.org/jira/browse/CAMEL-17038,Improvement,Open,Major,Unresolved,None,Future,camel-core,Unknown,Claus Ibsen,Claus Ibsen,04/Oct/21 09:30,17/Jul/23 11:27,"EIPs that support thread pools for parallel processing such as splitter, wire-tap etc uses a JDK thread pool. The default sized thread pool in Camel has a backlog of 1000 slots, so the pools has capacity to process tasks as they come. And in case a pool is full then they by default allows to steal the caller thread to run the task. However this model has some flaws now a) The EIPs are going parallel and then the task is executed on current thread via caller runs (blocking) b) The other rejections discard, discard oldest, (abort) will cause problems as the task has an exchange callback that should be called to continue that inflight exchange For (a) it adds complexity and we have a bug such as CAMEL-16829 For EIPs then we should consider not allowing custom rejections, and only have a default behaviour that is if a task is rejected then the exchange fails. Or we can add a strategy that will block (with timeout) until a slot is free.","Samuel Padou: Samuel Padou added a comment - 24/Nov/21 13:43 Regarding the proposed solution, I'm not sure that losing the callers run capability for EIPs thread pools is the best solution. In the context of CAMEL-16829 I specifically rely on the caller runs policy, to be able to use a small thread pool without a queue for performances optimisation of the splitter processing, but without completely blocking the incoming route if the poll is full. Not sure if helpful to fix the issue globally, but for my use-case I have a workaround that allow me to use the caller runs policy without blocking the route. I've replaced the default caller runs implementation by one that schedule the task synchronously on the reactive executor instead of running it directly, this way it is run synchronously in the current thread but integrate to the reactive context and avoid blocking it. It works well in my case but I'm not sure of all the implications of doing that in different contexts, specifically the schedule sync will run everything enqueued in the reactive context which may cause unexpected side effects in some cases. Here a snippet of the rejected execution implementation that I use instead of the default caller runs one: public void rejectedExecution( Runnable r, ThreadPoolExecutor executor) { if (!executor.isShutdown()) { camelContext.adapt(ExtendedCamelContext.class).getReactiveExecutor().scheduleSync(r); } }"
https://issues.apache.org/jira/browse/CAMEL-17129,Improvement,Open,Major,Unresolved,None,Future,camel-core,Unknown,Unassigned,Luca Burgazzoli,26/Oct/21 08:36,17/Jul/23 11:24,"While working on the YAML DSl, I've noticed that a route like: - from: uri: ""direct:start"" steps: - saga: propagation: ""MANDATORY"" completion- mode: ""MANUAL"" steps: - to: ""direct:something"" - to: ""mock:result"" Gets re-wired to be something like: - from: uri: ""direct:start"" steps: - saga: propagation: ""MANDATORY"" completion- mode: ""MANUAL"" steps: - to: ""mock:result"" - to: ""direct:something"" So in fact any output is moved to the saga outputs. This happen because the saga is supposed to be a top level only feature and to be applied to the entire route (same for transacted). The model should have a a separate definition for route configurations so you can configure saga, tx, onException et all there only and not later in the regular route",
https://issues.apache.org/jira/browse/CAMEL-18335,New Feature,Open,Major,Unresolved,None,None,camel-jbang,Unknown,Unassigned,Claus Ibsen,02/Aug/22 08:08,17/Jul/23 10:54,"We have the --open-api operation today that can take a open-api spec and generate camel routes templates for this. We need something similar for WS SOAP, where you have a wsdl file, and want to expose this as a service and let Camel routes service each SOAP operation. For starters we can use RAW/PAYLOAD mode where data are in XML. Later we can look at if we can generate POJO classes via the apache cxf maven plugin.",
https://issues.apache.org/jira/browse/CAMEL-18902,Task,Open,Major,Unresolved,None,None,None,Unknown,Unassigned,Claus Ibsen,12/Jan/23 11:34,17/Jul/23 10:25,"During Camel v3 we had both JUnit 4.x and 5.x supported and had to have separate test modules. In Camel v4 we only support JUnit 5, so we can rename the modules back, eg camel-test-junit5 => camel-test This needs to be documented in the upgrade guide.",
https://issues.apache.org/jira/browse/CAMEL-17534,Improvement,Open,Major,Unresolved,None,Future,camel-core,Unknown,Unassigned,Claus Ibsen,21/Jan/22 14:04,19/Jun/23 12:04,"The DSL model for EIPs is based on Java OO and JAXB and it have some impact on the model. Some EIPs like Choice, DoTry, and others end up having some of their specific nodes like otherwise, doCatch, when etc part of the general model. So from DSL point of view then users can constuct ""none valid"" routes. JAXB is a bit brittle when you tweak it and we generate the XML XSD based on it, so we are under its mercy. However its time to see if we can make the model more strict and then better be able to source code generate all DSLs languages (even Java) without having to have hacks.",
https://issues.apache.org/jira/browse/CAMEL-18436,Improvement,Open,Major,Unresolved,None,Future,camel-core,Unknown,Unassigned,Claus Ibsen,29/Aug/22 08:56,19/Jun/23 12:03,"The java.net.URI have historically been used for camel endpoint uri parsing because of lack of own parser. But the java.net.URI has some drawbacks as it enforces the toString representation to alter the text to use safe uri charachters and percentage encoding such as %20 as space and %25 as percentage sign. So we had to come up with RAW(xxx) to avoid parsing specific parts of the endpoint uri, as a kinda workaround. We should flip the table, and keep the uri as-is, and then for specific components that need to use java.net.URI style (eg HTTP based) then these components will internally transform to java.net.URI.",Luca Burgazzoli: Luca Burgazzoli added a comment - 29/Aug/22 09:18 This and https://issues.apache.org/jira/browse/CAMEL-16221 would be a very good addition (IMHO)
https://issues.apache.org/jira/browse/CAMEL-19436,New Feature,Open,Major,Unresolved,None,None,came-core,Unknown,Unassigned,Andrea Cosentino,12/Jun/23 07:40,12/Jun/23 07:40,"I'm working on providing some infra as code with Kamelets, like, I want to use S3 and through camel-jbang commands pre-populate the commands to give to ansible/terraform or cloudformation with the S3 bucket name defined in my route. So we could have something like camel infra generate aws-s3 route.yaml with bucket-name defined as test in route yaml and the output would be something like ansible-playbook -v ansible/aws-s3.yaml --extra-vars bucket_name=test cc cibsen@e-ma.net",
https://issues.apache.org/jira/browse/CAMEL-19419,Improvement,Open,Major,Unresolved,None,None,"camel-cxf,(1)documentation",Unknown,Unassigned,Lukas Lowinger,06/Jun/23 10:31,06/Jun/23 10:31,"We should remove Spring specific docs, as more runtimes (Quarkus) are in place. See https://issues.apache.org/jira/browse/CAMEL-19129 for more details.",
https://issues.apache.org/jira/browse/CAMEL-19395,Improvement,Open,Major,Unresolved,None,None,camel-kafka,Unknown,Andrea Cosentino,Claus Ibsen,26/May/23 14:09,26/May/23 17:56,"Configuring kafka for different vendors is always too hard as you need to setup custom serializers for key/values, and registry and protocols with avro or whatnot. And then you need 3rd part JARs on the classpath as well. MS Azure is used a lot so we can have some hardcoded known option keys and their types / and maybe also description, then we could consider having that as a more standard Camel way of configuring these. See for example https://github.com/apache/camel-kamelets/issues/1492",
https://issues.apache.org/jira/browse/CAMEL-19277,Improvement,Open,Major,Unresolved,None,Future,camel-core,Unknown,Unassigned,Claus Ibsen,18/Apr/23 14:52,24/May/23 05:07,"It would be good to have an unifed endpoint that report json data for a high level dashboard in camel-jbang that are the same for all runtimes (SB, Q, main). Today that depends on which runtime, and if you use micrometer, openetelemtry and so on. We just need a set of standard high level metrics, that a quick dashboard for camel-jbang and other tools can use.",
https://issues.apache.org/jira/browse/CAMEL-17963,Task,In Progress,Major,Unresolved,None,Future,camel-resume-api,Unknown,Otavio Rodolfo Piske,Otavio Rodolfo Piske,13/Apr/22 12:33,24/May/23 05:06,Increase component coverage for the resume API,Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 22/Apr/22 12:57 To investigate: aws-dynamodb-streams | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 18/May/22 15:02 To investigate: aws-s3
https://issues.apache.org/jira/browse/CAMEL-19356,New Feature,Open,Major,Unresolved,None,None,None,Unknown,Unassigned,Andrea Cosentino,15/May/23 17:17,16/May/23 05:41,"Like we did for normal secret we could retrieve the needed bits for SSL/TLS. For the properties we should re-use what we have for aws, gcp, azure and hashicorp",Claus Ibsen: Claus Ibsen added a comment - 16/May/23 05:41 Spring Boot 3.1 and unified SSL configuration https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#features.ssl
https://issues.apache.org/jira/browse/CAMEL-19310,Improvement,Open,Major,Unresolved,4.0-M2,None,came-core,Unknown,Rhuan Rocha,Rhuan Rocha,02/May/23 19:15,02/May/23 19:17,The AbstractDynamicRegistry extends the ConcurrentHashMap which is a core Java Class. This issue is to re-evaluate how we do this to avoid tight coupling. To know more about this discussion check this PR. Related issue: https://issues.apache.org/jira/browse/CAMEL-19295,
https://issues.apache.org/jira/browse/CAMEL-17601,Improvement,Open,Major,Unresolved,None,Future,camel-core,Unknown,Radovan Netuka,Claus Ibsen,04/Feb/22 11:09,27/Apr/23 12:42,JAXB is a pain for the the legacy XML DSL (spring <beans> and blueprint XML). Also JAXB is no longer in the JDK and its heavy to use. We have the new fast XML IO parser that we use for modern Camel apps. We should find a way in the future to get rid of JAXB in the core model and use a different way of generating the XML XSD. The current generator with some legacy maven plugins that generate JAXB -> XML Schema is brittle and will be in the future with modern JVM versions. Today we hit problems with this where generating OSGi XML does not work but it works for Spring XML.,
https://issues.apache.org/jira/browse/CAMEL-11412,Improvement,Open,Major,Unresolved,None,Future,"camel-blueprint,(2)camel-cdi,camel-spring",Unknown,Unassigned,Luca Burgazzoli,15/Jun/17 07:45,17/Apr/23 08:04,ID attributes are used everywhere in XML DSL but they do not always behave like the related attributes in spring/blueprint/cdi i.e. not all the elements with an ID are also bound to the application context so it would be nice to remove the ID attribute where it does not make sense and bound beans to the application context if they are defined. Some related work to be done: CAMEL-11248 CAMEL-7778,Aurelien Pupier: Aurelien Pupier added a comment - 15/Jun/17 08:40 - edited just a note to ensure that JMX Camel debug functionality is preserved. The ids are also used for this purpose.
https://issues.apache.org/jira/browse/CAMEL-19215,New Feature,Open,Major,Unresolved,None,None,camel-kafka,Unknown,Unassigned,Claus Ibsen,29/Mar/23 04:17,10/Apr/23 11:34,"https://stackoverflow.com/questions/75379744/produce-long-kafka-header-with-apache-camel We can look at the ""spring_json_header_types"" header that they include with spring-kafka that specifies what types for each header is (long, boolean, string, etc.) We could have 1) add support for reading/writing spring_json_header_types 2) add support for a camel specific header as well (or just use the spring name) 3) option to turn this on|off","Brice Frisco: Brice Frisco added a comment - 07/Apr/23 01:53 Hi - I can work on this if nobody else currently is. | Claus Ibsen: Claus Ibsen added a comment - 10/Apr/23 11:34 Brice, you are welcome to work on this, thanks."
https://issues.apache.org/jira/browse/CAMEL-18806,New Feature,Open,Major,Unresolved,None,Future,camel-core,Unknown,Unassigned,Claus Ibsen,08/Dec/22 15:19,08/Dec/22 15:19,"With Camel being able to run routes in an easier way from scripts and other DSLs in a low-code / camel-k fashion, then there is also a demand for being able to restrict what these routes can do with Camel itself. Camel is very powerful and tradtionally in the hands of Java developers they are able to control these powers. What we need to find out is some kind of ""light RBAC"" for Camel routes that these kind of users are running. And also at the same time we should allow pre-build kamelets / routes that have been ""pre-approved"" to not be restricted. For example some shared/common JAR with routes that may do more advanced stuff or handling errors etc. There are many places in CamelContext that are in use while loading a route. So we need to find out a good way for this. components data formats languages invoking bean DSLs that can be used property placeholder / functions (eg ENV function) simple language (may restrict advanced features ala OGNL and whatnot)",
https://issues.apache.org/jira/browse/CAMEL-18691,New Feature,Open,Major,Unresolved,3.19.0,None,camel-salesforce,Unknown,Unassigned,Jeremy Ross,04/Nov/22 17:04,04/Nov/22 17:04,,
https://issues.apache.org/jira/browse/CAMEL-16849,Improvement,Open,Major,Unresolved,None,Future,documentation,Unknown,Andrea Cosentino,Andrea Cosentino,05/Aug/21 05:31,03/Sep/22 08:13,"We need to improve the documentation by adding at least one example for component/dataformat etc. If we have both producer and consumer for a component, we need one example for both. This would be very useful for user reading the docs, so they would have a snippet or something to start and later modify. It's a good exercise even to understand if the component is alive and updated, like orpiske is doing while checking tests. I assign this to me, but please feel free to help and we could divide the work.",
https://issues.apache.org/jira/browse/CAMEL-16039,New Feature,Open,Major,Unresolved,3.8.0,Future,camel-sjms,Unknown,Unassigned,Brad Harvey,14/Jan/21 22:50,02/Sep/22 17:34,"Please provide a means of receiving multiple JMS messages as a batch in a single transaction. Our use case is to exchange JMS messages in order, quickly, with at least once delivery guarantee, but over a link with 10 to 15 ms latency. Processing multiple JMS messages in a single transaction is the way to meet this requirement as it greatly reduces the chatter over the wire: For sending, we use the normal JMS component with a loop (using <split/>) inside the transaction. For receiving (in 3.4.5) we use sjms-batch with an aggregation strategy. Example from sjms-batch:myqueue?aggregationStrategy=#groupedBodyAggregationStrategy&completionSize=300&asyncStartListener=true&keepAliveDelay=5000 The sjms-batch component was removed as part of the overhaul of sjms, but there appears to be no alternative to the functionality it provided.",Brad Harvey: Brad Harvey added a comment - 27/Jan/22 07:34 Just adding a note to say my organisation no longer requires this - we ended up implementing a basic polling consumer to consume JMS messages in batches.
https://issues.apache.org/jira/browse/CAMEL-15909,New Feature,Open,Major,Unresolved,None,None,"camel-aws,(1)camel-aws2",Unknown,Andrea Cosentino,smaser,30/Nov/20 16:04,02/Sep/22 17:22,"Like SQS, Kinesis also supports KMS. Would be great to add options KmsMasterKeyId and KmsDataKeyReusePeriodSeconds support. https://aws.amazon.com/blogs/big-data/encrypt-and-decrypt-amazon-kinesis-records-using-aws-kms/",Andrea Cosentino: Andrea Cosentino added a comment - 30/Nov/20 16:08 Will do on aws2. Aws components will be deprecated soon | Claus Ibsen: Claus Ibsen added a comment - 02/Sep/22 17:22 What is the status of this
https://issues.apache.org/jira/browse/CAMEL-15145,New Feature,Open,Major,Unresolved,None,Future,None,Unknown,Unassigned,James Netherton,01/Jun/20 14:10,02/Sep/22 15:46,It'd be good for Quarkus integration if the the gRPC component could support vertx-grpc (for both producer & consumer). Not sure if it's feasible or correct to modify the existing camel-grpc component to support this. Hence I propose a new component. dmvolod what do you think?,"Dmitry Volodin: Dmitry Volodin added a comment - 01/Jun/20 16:03 jamesnetherton , yes, sounds good, but I would like to try investigate is it possible to migrate current implementation to the vertx-grpc I would be nice to have just one implementation for gRPC rather than more one. Otherwise, I think it possible to extend vertx-grpc for unsupported features if needed. | James Netherton: James Netherton added a comment - 02/Jun/20 06:22 Ok, that makes sense. Let me know if you find whether its possible to update the current component."
https://issues.apache.org/jira/browse/CAMEL-15088,New Feature,Open,Major,Unresolved,None,Future,None,Unknown,Unassigned,Luca Burgazzoli,19/May/20 15:05,02/Sep/22 15:45,"We should create a darp component to interact with dapr APIs: https://github.com/dapr/docs/tree/master/reference/api so we can as example from( ""dapr:pubsub/topic"" ) .to( ""dapr:invoke/${appName}/${appMethod}"" )",
https://issues.apache.org/jira/browse/CAMEL-14610,New Feature,Open,Major,Unresolved,None,Future,None,Unknown,Jiri Ondrusek,Luca Burgazzoli,22/Feb/20 19:58,02/Sep/22 14:46,"We should create a an AsyncAPI ( https://www.asyncapi.com/ ) component, similar to the OpenAPI one",
https://issues.apache.org/jira/browse/CAMEL-18013,Improvement,Open,Major,Unresolved,None,Future,camel-resume-api,Unknown,Otavio Rodolfo Piske,Otavio Rodolfo Piske,26/Apr/22 08:30,26/Apr/22 08:38,"I think we should be able to allow finer control of which exceptions can trigger a pause and which doesn't. For instance, we should be able to do something like: onException(SomeException.class) .pausable(consumerListener, o -> canContinue()); from(from).routeId( ""pausable-it"" ) .process(exchange -> LOG.info( ""Got record from Kafka: {}"" , exchange.getMessage().getBody())) .to(intermediate); So that if AnotherException is thrown, the consumer does not pause. Note: those using the circuit breaker can already filter unwanted exceptions via the event publisher - although, it is not very elegant.",
https://issues.apache.org/jira/browse/CAMEL-13865,Improvement,Open,Major,Unresolved,None,Future,camel-core,Unknown,Unassigned,Claus Ibsen,14/Aug/19 08:09,14/Aug/19 08:09,"In some use-cases we can possible optimize the bean component to use direct method invocations instead of invoking a method via reflection. The java dsl has been approved so you can invoke beans with a Supplier etc, so you can do those MyClass::myMethod style. But this only works for some use-cases as parameter binding would not to be ""compatible"". We can give some thoughts if we can improve this and use some tools that parses the route / model and classes on project source code / classpath, figures out if we can optimize and generate needed java source code / byte code instead.",
https://issues.apache.org/jira/browse/CAMEL-7957,Improvement,Open,Major,Unresolved,"2.13.2,2.14.0",Future,None,Unknown,Unassigned,Dhiraj Sureshkumar Bokde,24/Oct/14 20:45,31/Jul/19 08:54,"Some Camel components create HTTP connections using default SSLContext settings. Components should standardize on using SSLContextParameters, especially for CAMEL-7940 .",
https://issues.apache.org/jira/browse/CAMEL-6058,New Feature,Open,Major,Unresolved,None,Future,camel-ftp,Unknown,Unassigned,Claus Ibsen,09/Feb/13 10:38,12/May/18 10:12,"The ftp consumer is currently single threaded, and will download files in sequence. We should add functionality to allow concurrent downloads. Its a bit hard to do as we would need a new ftp client per download. And that client needs to login, and traverse to the dir where the file is, and download the file. And then we need to have that all work together, and report errors etc.","Sami Nurminen: Sami Nurminen added a comment - 12/May/18 10:12 Some thoughts: GenericFileOperations could support concurrency. For example changeCurrentDirectory is not safe for concurrent usage. Most operations depend on which directory operations instance is currently. Providing absolute path as parameter could be more natural. GenericFileOperations#retrieveFile could return some kind Future for example. If GenericFileOperations can't be changed, then another interface for concurrent operations could be made. Polling could be parallel to downloading files. But polling should wait until there is enough capacity. This could be implemented by blocking queue. Otherwise component might queue too many files. Another issue is ordering of files. For example if the order is alphabetical and folder has file ""a.txt"" and ""b.txt"", then exchange having file ""a.txt"" must complete before exchange having file ""b.txt"". Probably waiting on completion of ""parent"" exchange (in this case ""b.txt"" waits for ""a.txt"") before handling exchange forward after retrieve. This would allow downloading to start for multiple files parallel and actual processing be ordered."
https://issues.apache.org/jira/browse/CAMEL-330,New Feature,Open,Major,Unresolved,1.2.0,Future,camel-core,,Unassigned,Hadrian Zbarcea,12/Feb/08 14:51,10/Apr/17 14:11,"In the current version a conversion is attempted on a best effort basis. An endpoint does not have knowledge about the data types supported by the previous or next endpoint in the route. If an endpoint would publish what data types it supports, static analysis would be possible to determine if messages could be processed successfully or additional type converters are necessary.","Bruno Borges: Bruno Borges added a comment - 19/Oct/10 12:10 In Apache Wicket there was a time where people thought adding Generics support would be great. In the end it became a nightmare. This feature should add the possibility to static type data while keeping the current behaviour of best effort on convertions. Two possibilities: annotations and generics. IMO, annotations would be better, even though it wouldn't avoid dynamic types. But at least would better document endpoints/components, and also help runtime checks that could perform better than best effort convertions."
https://issues.apache.org/jira/browse/CAMEL-9261,New Feature,Open,Major,Unresolved,None,Future,"camel-core,eip",Unknown,Unassigned,Claus Ibsen,27/Oct/15 10:58,27/Oct/15 10:58,"We should consider a ClaimCheckRepository API (or potentially allow to reuse aggregate repository) and add into the DSL to make it easy to store / claim. A blog about this http://www.javaprocess.com/2015/10/distributed-services-with-apache-camel-part2.html And the eip http://camel.apache.org/claim-check.html Likely the aggregator repository is the best suited to reuse/extend from as its to store with a key -> exchange. And have apis to remove as well. But we need to give it a bit more thought. The idea is for the implementations to make them reusable so we do not have to implement this again for JDBC, hazelcast and what else we have today for repositories.",
https://issues.apache.org/jira/browse/CAMEL-21835,Improvement,In Progress,Minor,Unresolved,4.10.1,None,camel-jbang,Unknown,Claudio Miranda,Claudio Miranda,2 days ago 17:04,12 hours ago,"When use the --trait knative-service.enabled=true it correctly generates the src/main/jkube/service.yaml with the knative service. however when building the maven project, the k8s:resource and k8s:deploy tasks generates the non knative Deployment in target/classes/META-INF/jkube/kubernetes/http-log-deployment.yml INFO] --- k8s:1.18.1:resource ( default ) @ http-log --- [INFO] k8s: Using resource templates from /home/claudio/alphaworks/projects/camel/.camel-jbang-run/http-log/src/main/jkube [INFO] k8s: jkube-controller: Adding a default Deployment [INFO] k8s: jkube-healthcheck-quarkus: Adding readiness probe on port 8080, path= '/q/health/ready' , scheme= 'HTTP' , with initial delay 5 seconds [INFO] k8s: jkube-healthcheck-quarkus: Adding liveness probe on port 8080, path= '/q/health/live' , scheme= 'HTTP' , with initial delay 10 seconds [INFO] k8s: jkube-healthcheck-quarkus: Adding startup probe on port 8080, path= '/q/health/started' , scheme= 'HTTP' , with initial delay 5 seconds [INFO] k8s: jkube-revision-history: Adding revision history limit to 2 [INFO] k8s: validating /home/claudio/alphaworks/projects/camel/.camel-jbang-run/http-log/target/classes/META-INF/jkube/kubernetes/http-log-deployment.yml resource [INFO] --- k8s:1.18.1:deploy ( default -cli) @ http-log --- [INFO] k8s: Using Kubernetes at https: //192.168.39.23:8443/ in namespace null with manifest /home/claudio/alphaworks/projects/camel/.camel-jbang-run/http-log/target/classes/META-INF/jkube/kubernetes.yml [INFO] k8s: Created Custom Resource: serving.knative.dev/v1#Service default /http-log [INFO] k8s: Creating a Deployment in default namespace with name http-log from kubernetes.yml [INFO] k8s: Created Deployment: target/jkube/applyJson/ default /deployment-http-log.json [INFO] k8s: HINT: Use the command `kubectl get pods -w` to watch your pods start up That in turn is merged with the knative service in the .camel-jbang-run/http-log/target/kubernetes/kubernetes.yml. There is no need for this deployment since in the kubernetes cluster, the knative operator controller will take care to create Deployment from the knative service custom resource. jkube maven plugin doesn't support knative We should find a way to skip the jkube maven plugin to generate the Deployment.",
https://issues.apache.org/jira/browse/CAMEL-21844,Improvement,Open,Minor,Unresolved,None,4.11.0,camel-azure-servicebus,Unknown,Unassigned,Romain Pfund,Yesterday 12:53,Yesterday 16:25,"In the Azure Service Bus component, the bridgeErrorHandler is not implemented",Romain Pfund: Romain Pfund added a comment - Yesterday I'm available and interested to do the implementation
https://issues.apache.org/jira/browse/CAMEL-21824,New Feature,Open,Minor,Unresolved,None,None,camel-salesforce,Unknown,Unassigned,Claus Ibsen,4 days ago 15:14,4 days ago 15:14,,
https://issues.apache.org/jira/browse/CAMEL-21815,Dependency upgrade,Open,Minor,Unresolved,None,4.x,camel-pulsar,Unknown,Unassigned,Claus Ibsen,1 week ago 07:50,1 week ago 07:50,Check also if SB and Q are supporting Pulsar 4 clients.,
https://issues.apache.org/jira/browse/CAMEL-21810,Task,Open,Minor,Unresolved,None,4.11.0,camel-jbang,Unknown,Thomas Diesler,Thomas Diesler,27/Feb/25 10:16,27/Feb/25 10:49,The generated readme.md and Dockerfile are not applicable for runtimes other than Quarkus. Verify that the Dockerfile is indeed that which would come out of JKube,"Claus Ibsen: Claus Ibsen added a comment - 27/Feb/25 10:49 its only quarkus that comes with dockerfile when you create a project from code.quarkus.io The other runtimes does not intend to have that. But if something can be copied over and adjusted then maybe we can include that too, but its not really intended. And most people dont want them anyway. They have a CI/CD system that builds their apps in their own custom way."
https://issues.apache.org/jira/browse/CAMEL-21804,Improvement,Open,Minor,Unresolved,None,4.x,camel-smb,Unknown,Unassigned,Claus Ibsen,26/Feb/25 10:30,26/Feb/25 10:30,The file component has more readLock implementations that we do not have in camel-smb. We can take a look and see if we can port more over.,
https://issues.apache.org/jira/browse/CAMEL-21763,Improvement,Open,Minor,Unresolved,None,None,camel-jbang,Unknown,Unassigned,Gaelle Fournier,19/Feb/25 12:40,19/Feb/25 16:51,DeploymentConfig usage has been deprecated since openshift 4.14 Jkube has not yet set Deployment as default so it's up to our code to set it as default.,
https://issues.apache.org/jira/browse/CAMEL-21705,New Feature,Open,Minor,Unresolved,None,None,camel-sjms2,Unknown,Unassigned,Vincent Sevel,03/Feb/25 16:36,10/Feb/25 08:46,"this proposes to support quarkus-artemis-ra as a mean to connect to artemis servers using sjms or sjms2 in quarkus infused camel applications. some context: on our quarkus applications we have settled on quarkus-artemis-ra to access artemis servers, for the following reasons: managed listener, automatic rebalancing connections, native support for pooling I have tried this extension with sjms end sjms2 in a camel route, but failed to do so because of forbidden methods setExceptionListener and setMessageListener Caused by: jakarta.jms.IllegalStateException: This method is not applicable inside the application server. See the J2EE spec, e.g. J2EE1.4 Section 6.6 at org.apache.activemq.artemis.ra.ActiveMQRASessionFactoryImpl.setExceptionListener(ActiveMQRASessionFactoryImpl.java:534) at org.apache.camel.component.sjms.consumer.SimpleMessageListenerContainer.createConnection(SimpleMessageListenerContainer.java:307) at org.apache.camel.component.sjms.consumer.SimpleMessageListenerContainer.doStart(SimpleMessageListenerContainer.java:228) at org.apache.camel.support.service.BaseService.start(BaseService.java:123) ... 35 more and Caused by: jakarta.jms.IllegalStateException: This method is not applicable inside the application server. See the J2EE spec, e.g. J2EE1.4 Section 6.6 at org.apache.activemq.artemis.ra.ActiveMQRASession.checkStrict(ActiveMQRASession.java:1311) at org.apache.activemq.artemis.ra.ActiveMQRAMessageConsumer.setMessageListener(ActiveMQRAMessageConsumer.java:118) at org.apache.camel.component.sjms.consumer.SimpleMessageListenerContainer.configureConsumer(SimpleMessageListenerContainer.java:127) at org.apache.camel.component.sjms.consumer.SimpleMessageListenerContainer.initConsumers(SimpleMessageListenerContainer.java:258) at org.apache.camel.component.sjms.consumer.SimpleMessageListenerContainer.doStart(SimpleMessageListenerContainer.java:229) at org.apache.camel.support.service.BaseService.start(BaseService.java:123) it is interesting to note that the ra can be used ith sjms/sjms2 in a camel route if only publishing. but it is not possible to consume from jms. it would be nice to have some alignment between quarkus and camel with respect to accessing artemis servers through the RA. however the artemis ra can be used with the original jms connector, which has the following drawbacks: it drags some spring libraries in the quarkus app, sjms and sjms2 are said to have perf improvements compared to the jms connector. if using sjms and sjms2 it is possible to use the other extension quarkus-artemis-jms, but it requires to add quarkus-pooled-jms to allow connection pooling, but the main drawback is that quarkus applications that want to use classic jms with the ra, plus a camel route, would have to use 2 sets of extensions to access artemis. fron a maintenance standpoint it is better if we can settle on 1 single extension. i.e. quarkus-artemis-ra some other issues have been fixed, which could have been avoided if a sjms implementation support directly the ra: CACHE_NONE: https://github.com/apache/camel-quarkus/pull/6906 serilization issue on getReference(): https://github.com/quarkiverse/quarkus-ironjacamar/pull/155 quarkus-artemis-ra is a sophisticated and feature proof approach to allow dealing with artemis servers. it would be nice to allow using it natively in camel routes inside quarkus applications.","Vincent Sevel: Vincent Sevel added a comment - 03/Feb/25 16:37 see also those zulip conversations: https://camel.zulipchat.com/#narrow/channel/257302-camel-quarkus/topic/camel.20artemis.20with.20jca.20connector https://quarkusio.zulipchat.com/#narrow/channel/187030-users/topic/use.20camel.20sjms2.20with.20ironjacamar.20artemis.20ra | Claus Ibsen: Claus Ibsen added a comment - 03/Feb/25 20:05 Well how would that be possible as camel needs to listen for message and therefore need to set the message listener. spring is a battle tested library and are used heavily in the world - it has a roboust and great JMS support for growing and shrinking on demand. | Vincent Sevel: Vincent Sevel added a comment - 04/Feb/25 08:11 > Well how would that be possible as camel needs to listen for message and therefore need to set the message listener. in a ra approach, it is the responsibility of the jca impl (e.g. ironjacamar) to instantiate endpoints in the quarkus ironjacamar extension it is done in the processor once it is registered it can be found as a normal CDI component . if camel was to use a jca initiated message listener, I suppose the camel connector would have to register it at build time in its processor, just like the iron jacamar processor does. once you have a message listener, some things come for free (e.g. automatic rebalancing of connections) a native support for the quarkus artemis ra as a mean to connect to artemis brokers may provide a better narrative for camel / quarkus than the current approach, where to some extent it seems that spring has a better support for camel than quarkus. which is awkward. | Zheng Feng: Zheng Feng added a comment - 10/Feb/25 08:46 I will take a look."
https://issues.apache.org/jira/browse/CAMEL-21693,Task,Open,Minor,Unresolved,None,4.x,camel-jbang,Unknown,Unassigned,Claus Ibsen,31/Jan/25 10:08,03/Feb/25 08:52,camel-jbang was created during v3 and we have some older code that checks for some v3 stuff. We can remove this and make camel-jbang v4 only.,
https://issues.apache.org/jira/browse/CAMEL-21609,Bug,Open,Minor,Unresolved,"4.4.4,4.8.2,4.9.0",None,"camel-core,(1)camel-salesforce",Unknown,Unassigned,Jawad Ahmad,10/Jan/25 21:15,02/Feb/25 14:01,"I recently upgraded my Camel application from Camel 3.2.1 and Java 11 to Camel 4.9.0 and JDK 21. I am now seeing a lot of blocked threads in thread monitoring. I noticed it when my application started to hang up during testing. I also tested v4.4.4, v4.8.2, and Java 17 and found the same issue. Threads are blocked in SalesforceHttpClient. I also profiled my older Java 11 and Camel 3.21,0 instances, and there are no blocked threads. Details: I am subscribing to the Salesforce platform event and simply doing a query from my processor using the Producer Template. A simple route like this blocks 2 threads on SalesforceHttpClient. from( ""timer:test-timer?delay=30s&period=30s"" ) .log(LoggingLevel.INFO, ""Querying salesforce data"" ) .process(exchange -> { exchange.getMessage().setHeader(SalesforceEndpointConfig.SOBJECT_QUERY, getSettingsQuery()); exchange.getMessage().setHeader(SalesforceEndpointConfig.SOBJECT_CLASS, QueryRecordsSettings__c. class. getName()); }) .to( ""salesforce:query"" ) .log(LoggingLevel.INFO, ""*** Settings : ${body}"" ) .end();","Andrea Cosentino: Andrea Cosentino added a comment - 10/Jan/25 21:48 Without details about what your application is doing this issue is mostly useless | Jawad Ahmad: Jawad Ahmad added a comment - 10/Jan/25 22:46 acosentino I am happy to add the details required. But from the application details pov, I am using the Camel Salesforce component to subscribe to different platform events and then moving data to a third party. The threads start blocking as i soon as i execute any consumer action on Salesforce that uses SalesforceHttpClient. E.g. as the first step, i query data using a Processor and ProducerTemplate, and so on. | Jawad Ahmad: Jawad Ahmad added a comment - 02/Feb/25 14:01 davsclaus Any reason why we are downgrading it ? Given this can simply consume all threads overtime and block the application state."
https://issues.apache.org/jira/browse/CAMEL-21674,Task,Open,Minor,Unresolved,4.9.0,4.x,documentation,Novice,Unassigned,Otavio Rodolfo Piske,29/Jan/25 07:17,29/Jan/25 10:24,"The way we document the dependency that users have to add is not consistent in the documentation. Sometimes it appears on the top. Sometimes in a ""Dependencies"" section at the bottom. Sometimes it is not present at all. We should make this consistent.",
https://issues.apache.org/jira/browse/CAMEL-21490,Bug,Open,Minor,Unresolved,None,4.11.0,camel-jbang,Unknown,Claus Ibsen,Claus Ibsen,29/Nov/24 10:42,28/Jan/25 08:32,"This XML route converts to a bad yaml <camel> <route id= ""route-b785"" nodePrefixId= ""route-14b"" > <from id= ""from-959e"" uri= ""direct:start"" /> <choice id= ""choice-52fe"" > <when id= ""when-b126"" > <simple>${header.foo} == 'bar' </simple> <to id= ""to-65f9"" uri= ""jms:queue"" /> </when> <otherwise id= ""otherwise-c07f"" > <to id= ""to-dc76"" uri= ""log: default "" /> </otherwise> </choice> </route> </camel> camel transform route abc.camel.xml","Ricardo Martinez: Ricardo Martinez added a comment - 29/Nov/24 10:43 Perhaps is not just the choice, but any EIP that uses elements and gets transformed into properties for the YAML DSL, like expressions, dataformats, doTry, etc..."
https://issues.apache.org/jira/browse/CAMEL-21613,Improvement,Reopened,Minor,Unresolved,None,4.x,camel-jbang,Unknown,Thomas Diesler,Gaelle Fournier,13/Jan/25 14:58,23/Jan/25 11:06,"We should be able to configure for which architecture platform(s) we cant to build the container. Currently we build the container image (with docker, JIB or podman) for both linux/amd64 and linux/arm64. That mean we need the user to be able to do multi-platform build. While it is available out of the box for JIB (and maybe podman), for docker it requires some specific tools like Qemu/buildx. We need to allow the user to override the default configuration.","Gaelle Fournier: Gaelle Fournier added a comment - 14/Jan/25 08:38 tdiesler I think it would be better (if it is possible with jkube) to have the default value of platform as the local supported value instead of adm64 + arm64. WDYT ? | Thomas Diesler: Thomas Diesler added a comment - 14/Jan/25 11:29 - edited To remind myself ... we default to build strategy Jib and have this in the templates ... <!-- Supported only when using the jib build strategy --> <createImageOptions> <platform>linux/amd64</platform> <platform>linux/arm64</platform> </createImageOptions> See 'jkube.container-image.platforms' in https://eclipse.dev/jkube/docs/kubernetes-maven-plugin/#build-configuration . Our general focus should be on easy entry for Camel to K8s i.e. local k8s first, then your favourite free distro e.g. k3s, then OpenShift. All stuff must work on OpenShift. I use DockerDesktop Kubernetes, which allows me to build for both amd64 and arm64. On a remote server, I have not yet seen an arm64 node. So, yes. Defaulting to the local platform should be fine because it is guaranteed to work on ""local k8s"". Building for an alternative platform should be easy too. How would you like to configure that? The container trait perhaps? | Gaelle Fournier: Gaelle Fournier added a comment - 14/Jan/25 13:28 - edited I saw this jib configuration as well. I am not sure it is only used by jib: when deploying with docker build strategy I had to make my infra multi-platform compatible (in my case using qemu) or else I ended up with this issue https://issues.apache.org/jira/browse/CAMEL-21464 . My idea would be: local platform as default, if anyone want to change we can override by a trait or command parameter. This should configuration should multi-valued and any call to it should completly override the default behavior. That mean if the local platform default is amd64 and we configure by trait/command parameter arm64, we should only build for arm64. In CK we used it in the builder trait ( https://camel.apache.org/camel-k/2.5.x/traits/builder.html) but since most of the image configuration is done with some parameter --image-xxxx it might be better to use --image-platform | Thomas Diesler: Thomas Diesler added a comment - 15/Jan/25 08:46 - edited It should be possible to remove the platform def in pom.xml and instead use `-Djkube.container-image.platforms` It'd be interesting to know what Jib chooses when no prop is given at all. Generally, I'd prefer to use JKube config options when available instead of duplicating stuff in ""our"" camel config | Thomas Diesler: Thomas Diesler added a comment - 22/Jan/25 12:46 - edited Property -Djkube.container-image.platforms=linux/amd64,linux/arm64 takes no effect. Not in the pom, nor on the cmd line. Having this in the pom works ... <from> eclipse-temurin:17 </from> <platforms> <platform> linux/amd64 </platform> <platform> linux/arm64 </platform> </platforms> Likely, that we never built multi-arch images. How about we remove the invalid createImageOptions from the template and otherwise leave it as is for now. On OpenShift we build from source and most target nodes are amd64 anyway. Likely, that we make things worse defaulting to the current platform architecture if that's not the same as the target node's. CrossRef: https://github.com/eclipse-jkube/jkube/issues/3642 | Gaelle Fournier: Gaelle Fournier added a comment - 22/Jan/25 18:24 Strange. I am not sure of the state of multi-platform build in jkube. That was something I requested a while ago: https://github.com/eclipse-jkube/jkube/issues/2098 . It looks like it has been completed since. I made some more tests with the docker build and for some reason when the createImageOptions option is present I need qemu installed or else I end up with the original issue https://issues.apache.org/jira/browse/CAMEL-21464 . When I remove the createImageOptions , I can remove Qemu and everything works well. That means it is somewhat used in docker build for some reason. | Thomas Diesler: Thomas Diesler added a comment - 23/Jan/25 09:31 - edited When the --image-builder=jib (i.e. the default), we need to have this in the pom ... <platforms> <platform>linux/amd64</platform> <platform>linux/arm64</platform> </platforms> any other way (i.e. pom/cli property) to specify archs other than linux/amd64 does not work AFAIK. Having this in the pom ... <createImageOptions> <platform>linux/amd64</platform> <platform>linux/arm64</platform> </createImageOptions> passes these options to the docker deamon and I believe would only have an effect with --image-builder=docker | Thomas Diesler: Thomas Diesler added a comment - 23/Jan/25 09:36 Blocked by https://github.com/eclipse-jkube/jkube/issues/3642 | Gaelle Fournier: Gaelle Fournier added a comment - 23/Jan/25 11:06 I see. That check out with what I saw. These configurations are very confusing."
https://issues.apache.org/jira/browse/CAMEL-21579,Improvement,Open,Minor,Unresolved,4.9.0,None,camel-jbang,Unknown,Unassigned,Aurélien Pupier,02/Jan/25 09:14,23/Jan/25 08:57,"jbang '-Dcamel.jbang.version=4.9.0' camel@apache/camel init 'test-from-vscode.camel.yaml' jbang '-Dcamel.jbang.version=4.9.0' camel@apache/camel kubernetes run test-from-vscode.camel.yaml --camel-version=4.9.0 --cluster-type=openshift [WARNING] Unknown keyword serializer - you should define your own Meta Schema. If the keyword is irrelevant for validation, just use a NonValidationKeyword or if it should generate annotations AnnotationKeyword [WARNING] Unknown keyword deserializer - you should define your own Meta Schema. If the keyword is irrelevant for validation, just use a NonValidationKeyword or if it should generate annotations AnnotationKeyword","Claus Ibsen: Claus Ibsen added a comment - 20/Jan/25 13:14 Is this still happening? tdiesler is that something you have seen ? | Aurélien Pupier: Aurélien Pupier added a comment - 22/Jan/25 14:06 still happening with: jbang --fresh '-Dcamel.jbang.version=4.10.0-SNAPSHOT' camel@apache/camel init 'test.camel.yaml' jbang --fresh '-Dcamel.jbang.version=4.10.0-SNAPSHOT' camel@apache/camel kubernetes run test.camel.yaml --cluster-type=openshift [INFO] --- oc:1.18.0:resource (default) @ test --- [INFO] oc: Using container image name of namespace: apupier-dev [INFO] oc: Using resource templates from /home/apupier/ws/test-jbang-serializer-export/.camel-jbang-run/test/src/main/jkube [INFO] oc: jkube-healthcheck-quarkus: Adding readiness probe on port 8080, path='/q/health/ready', scheme='HTTP', with initial delay 5 seconds [INFO] oc: jkube-healthcheck-quarkus: Adding liveness probe on port 8080, path='/q/health/live', scheme='HTTP', with initial delay 10 seconds [INFO] oc: jkube-healthcheck-quarkus: Adding startup probe on port 8080, path='/q/health/started', scheme='HTTP', with initial delay 5 seconds [INFO] oc: jkube-openshift-deploymentconfig: Converting Deployment to DeploymentConfig [INFO] oc: jkube-service-discovery: Using first mentioned service port '80' [INFO] oc: jkube-service-discovery: Using first mentioned service port '80' [INFO] oc: jkube-service-discovery: Using first mentioned service port '80' [INFO] oc: jkube-revision-history: Adding revision history limit to 2 [INFO] oc: validating /home/apupier/ws/test-jbang-serializer-export/.camel-jbang-run/test/target/classes/META-INF/jkube/openshift/test-route.yml resource [WARNING] Unknown keyword serializer - you should define your own Meta Schema. If the keyword is irrelevant for validation, just use a NonValidationKeyword or if it should generate annotations AnnotationKeyword [WARNING] Unknown keyword deserializer - you should define your own Meta Schema. If the keyword is irrelevant for validation, just use a NonValidationKeyword or if it should generate annotations AnnotationKeyword [INFO] oc: validating /home/apupier/ws/test-jbang-serializer-export/.camel-jbang-run/test/target/classes/META-INF/jkube/openshift/test-deploymentconfig.yml resource [INFO] oc: validating /home/apupier/ws/test-jbang-serializer-export/.camel-jbang-run/test/target/classes/META-INF/jkube/openshift/test-service.yml resource | Claus Ibsen: Claus Ibsen added a comment - 23/Jan/25 08:55 https://github.com/networknt/json-schema-validator/issues/79"
https://issues.apache.org/jira/browse/CAMEL-21646,Improvement,Open,Minor,Unresolved,4.x,None,None,Unknown,Unassigned,Pasquale Congiusti,23/Jan/25 08:39,23/Jan/25 08:39,"This is a minor problem I faced during the development. There is a workaround, so, no urgency to develop. If you're using a LogListener in your unit test, for example: camelContext.getCamelContextExtension().addLogListener( new MyLogListener()); The expected `onLog()` event is not triggered if the unit test is missing a log4j2.properties configuration. The immediate workaround is to add such a configuration file. Ideally, we should have it working even without the presence of that configuration, or, at least, have some documentation to state how this is working.",
https://issues.apache.org/jira/browse/CAMEL-21390,Task,Open,Minor,Unresolved,None,4.x,camel-jbang,Unknown,Unassigned,Claus Ibsen,28/Oct/24 08:28,20/Jan/25 13:20,,
https://issues.apache.org/jira/browse/CAMEL-21523,Test,Open,Minor,Unresolved,4.9.0,4.x,camel-jbang,Novice,Unassigned,Aurélien Pupier,09/Dec/24 07:48,20/Jan/25 13:14,"In Camel JBang tests, there are several assertions checking the p^resence of a specific Maven dependency. it is asserting true/false by looking for each field one by one. Only an high levvel true/false assertion is returned. it is making it hard to know what is checked without looking deepp in the code and placing breakpoints. Providing an assertion specific for the Maven dependency and mentioning which one was expected and which one was found/not found will simplify debugging. several of these checks are used in https://github.com/apache/camel/blob/main/dsl/camel-jbang/camel-jbang-core/src/test/java/org/apache/camel/dsl/jbang/core/commands/ExportTest.java for instance: Assertions.assertTrue( containsDependency(model.getDependencies(), ""org.apache.camel.springboot"", ""camel-kubernetes-starter"", null));",
https://issues.apache.org/jira/browse/CAMEL-21087,New Feature,Open,Minor,Unresolved,None,4.x,camel-jbang,Unknown,Thomas Diesler,Christoph Deppisch,15/Aug/24 05:49,13/Jan/25 20:00,The jolokia/prometheus trait seems to be valuable for users. Add them to the Kubernetes plugin for Camel JBang,"Thomas Diesler: Thomas Diesler added a comment - 13/Jan/25 13:41 Are we talking about migrating this code https://github.com/tdiesler/camel-k/blob/main/pkg/trait/jolokia.go with these docs https://camel.apache.org/camel-k/next/traits/jolokia.html to the java code base, or is the jolokia/prometheus trait something different? | Gaelle Fournier: Gaelle Fournier added a comment - 13/Jan/25 16:47 tdiesler For Jolokia yes, that's probably the idea. There is also the prometheus trait : https://github.com/tdiesler/camel-k/blob/main/pkg/trait/prometheus.go In any case we should probably separate them in two different issues and see if how different it should be in the plugin for both of them. From what I remember Jolokia involves a java agent in CK. Also for prometheus CK uses PodMonitor but there was some discussion about the possibility to use a sidecar."
https://issues.apache.org/jira/browse/CAMEL-21327,Improvement,Open,Minor,Unresolved,4.5.0,4.x,camel-as2,Unknown,Unassigned,RAVI,07/Oct/24 14:57,09/Jan/25 09:19,"Hi Team, We are working on a POC using the Camel-AS2 project (version 4.5.0) to establish communication with OpenText/Boomi, as both tools utilize the AS2 protocol. Our goal is to eventually extend this setup for communication with trading partners. In our scenario, we have an application acting as a Camel-AS2 receiver that listens for incoming messages and uses Camel-AS2 for decryption, verification, and MDN handling. On the other side, Boomi/OpenText acts as the AS2 sender. When our Camel-AS2 receiver processes incoming messages, it successfully decrypts them but encounters a failure during verification with the error: ""message-digest attribute value does not match the calculated value."" After debugging the code, we observed that the ""writeTo"" method in the ApplicationEntity class utilizes the CanonicalOutputStream , which forces CRLF line endings as defined here: java Copy code {{static { newline = new byte[2]; newline[0] = (byte) '\r'; newline[1] = (byte) '\n'; } }} While this works fine for messages terminated with CRLF from OpenText, we encounter digest calculation errors when handling LF-terminated messages. After adjusting the code to accommodate both CRLF and LF line endings, the issue was resolved, and we can now process both types of messages successfully. However, we would prefer not to customize the Camel-AS2 code. Could you provide insights or suggest an alternative approach? We’ve noticed that the same line-ending standardization exists in the latest version within the CanonicalOutputStream class. Thank you for your help.","Claus Ibsen: Claus Ibsen added a comment - 07/Oct/24 15:07 Try with v4.8.0 first | Claus Ibsen: Claus Ibsen added a comment - 07/Oct/24 15:08 And can you attach the code changes you did to this JIRA | RAVI: RAVI added a comment - 07/Oct/24 17:16 Please find attached file. In that commented the lines and simply left with out.write in this method public void write( int i ) Then it started working for me for the files terminating with LF line separator. | Claus Ibsen: Claus Ibsen added a comment - 08/Oct/24 10:17 Okay so this is an old component that was written with CRLF hardcoded. I think this needs to be configurable, so you can let it be as before, or turn this off, and write the data as-is. Or let it be CRLF, LF, or NONE"
https://issues.apache.org/jira/browse/CAMEL-21521,Improvement,Open,Minor,Unresolved,None,4.11.0,camel-jbang,Unknown,Unassigned,Claus Ibsen,07/Dec/24 09:32,09/Jan/25 09:19,We should make camel-jbang more for standard Camel and remove the bind command (its a camel-k feature). A normal camel route is more powerful.,
https://issues.apache.org/jira/browse/CAMEL-19251,New Feature,Open,Minor,Unresolved,None,4.x,camel-netty-http,Unknown,Unassigned,Dietrich Schulten,05/Apr/23 06:51,08/Jan/25 14:56,"I need to implement a streaming webdav proxy. Netty would be a pretty natural choice, but I need to reach the target system through a corporate proxy. Currently, the NettyHttpProducer can't do that. It appears one needs to add an HttpProxyHandler for this. Can we make the Netty Producer aware of an Http Proxy?","Claus Ibsen: Claus Ibsen added a comment - 05/Apr/23 07:27 You are welcome to work on this, we love contributions | Dietrich Schulten: Dietrich Schulten added a comment - 08/May/23 17:25 I have started to work on this. The first attempt is to see if HttpProxyHandler works at all. For this, I have created a custom HttpClientInitializerFactory that adds the HttpProxyHandler and injected it with camel.component.netty-http.client-initializer-factory=""#httpProxyClientInitializerFactory"". The factory gets called, the HttpProxyHandler gets added to the pipeline, but otherwise it seems to have no effect. Since this approach should also be a possible workaround as long as there is no official support for an http proxy in netty-http, I add the related StackOverflow post here, for reference: https://stackoverflow.com/questions/76202842/using-netty-httpproxyhandler | Dietrich Schulten: Dietrich Schulten added a comment - 25/May/23 19:37 The PR is taking form. In addition to providing a HttpProxyHandler, one also has to suppress DNS resolution when an HttpProxyHandler is present. And the SslHandler has to go after the HttpProxyHandler. Suggestion: Let NettyProducer use a protected method configureTcpClientBootstrap to set up the clientBootstrap. NettyHttpProducer can override that and suppress the local DNS resolution. In NettyProducer.openConnection(): if (isTcp()) { // its okay to create a new bootstrap for each new channel Bootstrap clientBootstrap = new Bootstrap(); if (configuration.isNativeTransport()) { clientBootstrap.channel(EpollSocketChannel.class); } else { clientBootstrap.channel(NioSocketChannel.class); } clientBootstrap.group(getWorkerGroup()); configureTcpClientBootstrap(clientBootstrap); // <== new : call this } ... protected void configureTcpClientBootstrap(Bootstrap clientBootstrap) { clientBootstrap.option(ChannelOption.SO_KEEPALIVE, configuration.isKeepAlive()); clientBootstrap.option(ChannelOption.TCP_NODELAY, configuration.isTcpNoDelay()); clientBootstrap.option(ChannelOption.SO_REUSEADDR, configuration.isReuseAddress()); clientBootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, configuration.getConnectTimeout()); } In NettyHttpProducer we tell the client bootstrap not to attempt local DNS resolution if an HttpProxy is present: @Override protected void configureTcpClientBootstrap(Bootstrap clientBootstrap) { super .configureTcpClientBootstrap(clientBootstrap); NettyHttpConfiguration configuration = getConfiguration(); if (configuration.isUseHttpProxy()) { clientBootstrap.resolver(NoopAddressResolverGroup.INSTANCE); } } How does that sound? I have running code based upon 3.20.5-SNAPSHOT. I'll push the code to my fork and create a PR. Probably, I would have to duplicate the code on the main branch for the 4.0.0 version (or cherry-pick it there), right? | Claus Ibsen: Claus Ibsen added a comment - 21/Jul/23 12:49 Did you get a chance to make this into a PR? You can aim for main branch for Camel v4. And for 3.x then we only have 3.22 as the latest release planned (that is camel-3.x branch) | Claus Ibsen: Claus Ibsen added a comment - 08/Jan/25 14:56 Do you have your custom code, you are welcome to attach this to this Jira then we can assist with polishing the code to adapt to camel v4 and get into a future release."
https://issues.apache.org/jira/browse/CAMEL-20018,Improvement,Open,Minor,Unresolved,None,4.x,camel-yaml-dsl,Unknown,Unassigned,Claus Ibsen,20/Oct/23 10:06,08/Jan/25 14:52,"We only want to support same case for DSLs in YAML, XML, Java etc. Yaml DSL is the only special that had kebab-case and camelCase. However this is causing problems.","Claus Ibsen: Claus Ibsen added a comment - 20/Oct/23 14:40 Lets see if we can detect runtime if kebab-case is in use and log a WARN about the migration need, and get this into 4.0.x patch releases and 4.2 onwards. | Claus Ibsen: Claus Ibsen added a comment - 20/Oct/23 15:30 Kamelets need to be migrated also https://github.com/apache/camel-kamelets/issues/1698 | Claus Ibsen: Claus Ibsen added a comment - 25/Oct/23 09:50 Lets keep WARN for a while and remove when we have migrated kamelets and whatelse | Claus Ibsen: Claus Ibsen added a comment - 10/Mar/24 17:14 We could consider removing this for Camel 4.5 as we have 4.4 LTS which does WARN logs | Claus Ibsen: Claus Ibsen added a comment - 27/Jun/24 13:33 Lets remove this after next LTS"
https://issues.apache.org/jira/browse/CAMEL-15729,New Feature,Open,Minor,Unresolved,3.6.0,4.x,camel-graphql,Unknown,Unassigned,Tim Kaczynski,21/Oct/20 14:29,07/Jan/25 13:21,"This enhancement request was generated from a question on zulipchat: https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/Adding.20a.20trustStore.20for.20graphql/near/213944005 We are writing an integration that needs to produce messages to a graphql server. The graphql server is using TLS and its certificate was generated by an internal CA. There does not appear to be a way to provide a trust store to the graphql producer, like there is for say the Kafka integrations. Connections to graphql fail due to the inability to build a trusted certificate chain. Possible non-trivial solutions include assuming the graphql integration is using the apache HTTP client, and setting up a new protocol that uses a custom trust store. Also (using camel-k) using the JVM taint to alter the JSSE configuration / java properties, adding a trust store containing the CA. However both of these solutions require assumptions about the implementation that may not always be true (and we have not tested them yet). Could also use the HTTP [4] integration directly to talk to graphql but this requires coding the REST request manually. If there were a parameter on the graphql integration where we could input a trust store, type, and password, that would be an ideal solution. Or perhaps some other way of modifying the default trust store using camel-k (this would benefit all integrations).",Claus Ibsen: Claus Ibsen added a comment - 07/Jan/25 13:21 Yeah it uses apache http client v5 and we would need to add support for setting up TLS/SSL with this client. You can create a custom client and configure it and use that with Camel until there is something easier out of the box.
https://issues.apache.org/jira/browse/CAMEL-21368,Bug,Open,Minor,Unresolved,"4.8.0,4.9.0",4.x,camel-jbang,Unknown,Unassigned,Claude Mamo,21/Oct/24 12:07,06/Jan/25 14:03,"When generating REST routes from the attached OpenAPI spec using Camel JBang, I get the following error: java.lang.IllegalStateException: java.lang.reflect.InvocationTargetException at org.apache.camel.generator.openapi.RestDefinitionEmitter.emit(RestDefinitionEmitter.java:50) at org.apache.camel.generator.openapi.OperationVisitor.emit(OperationVisitor.java:118) at java.base/java.util.ArrayList.forEach(ArrayList.java:1511) at org.apache.camel.generator.openapi.OperationVisitor.visit(OperationVisitor.java:166) at org.apache.camel.generator.openapi.PathVisitor.lambda$visit$0(PathVisitor.java:46) at java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:721) at org.apache.camel.generator.openapi.PathVisitor.visit(PathVisitor.java:46) at org.apache.camel.generator.openapi.RestDslYamlGenerator.generate(RestDslYamlGenerator.java:83) at org.apache.camel.dsl.jbang.core.commands.generate.CodeRestGenerator.doCall(CodeRestGenerator.java:122) at org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:71) at org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:37) at picocli.CommandLine.executeUserObject(CommandLine.java:2045) at picocli.CommandLine.access$1500(CommandLine.java:148) at picocli.CommandLine$RunLast.executeUserObjectOfLastSubcommandWithSameParent(CommandLine.java:2465) at picocli.CommandLine$RunLast.handle(CommandLine.java:2457) at picocli.CommandLine$RunLast.handle(CommandLine.java:2419) at picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:2277) at picocli.CommandLine$RunLast.execute(CommandLine.java:2421) at picocli.CommandLine.execute(CommandLine.java:2174) at org.apache.camel.dsl.jbang.core.commands.CamelJBangMain.run(CamelJBangMain.java:173) at org.apache.camel.dsl.jbang.core.commands.CamelJBangMain.run(CamelJBangMain.java:62) at main.CamelJBang.main(CamelJBang.java:36) Caused by: java.lang.reflect.InvocationTargetException at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.base/java.lang.reflect.Method.invoke(Method.java:569) at org.apache.camel.generator.openapi.RestDefinitionEmitter.emit(RestDefinitionEmitter.java:48) ... 21 more Caused by: java.lang.IllegalArgumentException: name must be specified and not empty at org.apache.camel.util.StringHelper.notEmpty(StringHelper.java:356) at org.apache.camel.model. rest .ParamDefinition.endParam(ParamDefinition.java:344) ... 26 more In version 4.5.0, I was able to generate the routes but something broke in 4.8.0. The command I'm running is: jbang ""-Dcamel.jbang.version=4.8.0"" camel@apache/camel generate rest --input us-core-server.openapi.json --output api.yaml . I've observed that the command works when there's a single path in the spec.","Karen Lease: Karen Lease added a comment - 23/Nov/24 22:21 The problem is caused by the external schema reference to an xsd file: ""schema"" : { ""$ref"" : ""https: //hl7.org/fhir/R4/Bundle.xsd"" } In camel 4.7.0 the openapi-rest-dsl-generator, used by jbang, was modified to use the swagger.io openapi parser instead of apicurio. By default, the swagger parser is configured to resolve both internal and external references. It doesn't handle the xsd reference and instead of ignoring it, it throws a RuntimeException which causes the following internal references not to be resolved. That's why the parameter refs are only resolved in the first path/operation. The apicurio paser used in 4.5.0 did not attempt to resolve references while reading the openapi spec and the camel code only handled internal schema references, so the external xsd references was ignored and caused no problems. | Claus Ibsen: Claus Ibsen added a comment - 26/Nov/24 08:56 Okay can we see if we can make swagger not resolve external schemas or find a way to hook into this. Or if not then report this to swagger to see if they can improve this in a future release. | Claus Ibsen: Claus Ibsen added a comment - 27/Nov/24 10:00 java.lang.IllegalArgumentException: Cannot construct instance of `io.swagger.v3.oas.models.media.ObjectSchema` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('<?xml version=""1.0"" encoding=""UTF-8""?> <!-- Copyright (c) 2011 , HL7, Inc. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met') at Source: UNKNOWN; byte offset: #UNKNOWN"
https://issues.apache.org/jira/browse/CAMEL-20908,New Feature,Open,Minor,Unresolved,None,4.x,camel-management,Unknown,Unassigned,Aurélien Pupier,24/Jun/24 14:53,03/Jan/25 10:49,"it would convenient for investigation to be able to pause all current route exchange at the nearest point (surely next step) to investigate what is going on with the routes. It would be convenient to be able to pause all exchanges and also to be able to pause for a Route definition or a Camel context. Currently, suspend is no more starting new routes but finishes the current exchanges. The stop is no more starting the routes and not finishing the current exchange. Technical: it would likely be some option you turn on|off to have this behaviour - we can debate whether it should be on as default (new) or off (like now). To checked that it is not breaking other flow, like in Hawt.io to use the new behavior as default. or a parameter on the suspend/stop methods? or create another one, as pause","Claus Ibsen: Claus Ibsen added a comment - 24/Jun/24 18:38 This will only be possible if camel-debug is included for Camel to have the debugger installed, as for production use, then to pause would just add overhead to the routing engine that is not need there. | Aurélien Pupier: Aurélien Pupier added a comment - 24/Jun/24 20:10 Agree that it must be only in debug mode and not in production"
https://issues.apache.org/jira/browse/CAMEL-20919,New Feature,Open,Minor,Unresolved,None,4.x,"camel-sftp,(1)camel-spring-boot",Moderate,Unassigned,Adityakrishnan,25/Jun/24 15:37,03/Jan/25 10:48,"Producer based SFTP Health is not available for regular SFTPs, it is only accessible by some components (like AWS and Kafka). This has been a need from some time in work-spaces. When SFTPs have inconsistent down-times Observability and Monitoring comes handy for all those who uses Apache Camel. This Producer based Health Check should also be included in regular SFTPs. Consumer based and Producer based health check and alerting can prevent an outage before it occurs.","Adityakrishnan: Adityakrishnan added a comment - 30/Jun/24 14:05 davsclaus is there any forum, where we can have open discussion for the same? | Claus Ibsen: Claus Ibsen added a comment - 30/Jun/24 15:56 Yeah there is the mailing lists or the zulip chat rooms https://camel.apache.org/community/support/ | Claus Ibsen: Claus Ibsen added a comment - 08/Jul/24 19:18 Did you find the chat room or the mailing list? If not you can also comment here. Its not so much that is needed. Add a new producer health check class that does a FTP ping to see if the connection works. Then users can turn it on if needed. | Adityakrishnan: Adityakrishnan added a comment - 16/Jul/24 18:46 - edited Hey davsclaus , got a bit engaged the last week. I'd be dealing with the ticket the coming days. As I'm a first time committer to Apache, It'd be good if I could get some guidance on the objectives I should follow during the process | Adityakrishnan: Adityakrishnan added a comment - 16/Jul/24 19:37 I've created the ProducerHealthCheck class inside camel-health, this file will ping the sftp for health checks. davsclaus Are there other objectives or validations I should be worried about for this change? | Adityakrishnan: Adityakrishnan added a comment - 03/Jan/25 10:48 davsclaus any specific reason it was deprioritized?"
https://issues.apache.org/jira/browse/CAMEL-21151,Test,Open,Minor,Unresolved,4.8.0,None,"camel-jms,(2)camel-openapi-java,camel-opentelemetry",Unknown,Unassigned,Adriano Machado,01/Sep/24 23:42,03/Jan/25 10:40,"Multiple tests are failing on MacOS using Java 21.0.4 on the main branch. Apache Maven 3.9.9 (8e8579a9e76f7d015ee5ec7bfcdc97d260186937) Maven home: /Users/admachad/.sdkman/candidates/maven/current Java version: 21.0.4, vendor: Eclipse Adoptium, runtime: /Users/admachad/.sdkman/candidates/java/21.0.4-tem Default locale: en_US, platform encoding: UTF-8 OS name: ""mac os x"" , version: ""14.6.1"" , arch: ""aarch64"" , family: ""mac"" For `camel-openapi-java`, it seems that there's a problem with timezones on my machine, I'm checking what's happening. For `camel-jms`, it is apparently failing due to connection issues to the container used in the test. For `camel-opentelemetry`, I think the issue is related to CAMEL-19667 , which https://github.com/apache/camel/pull/15182 introduced test improvements.","Adriano Machado: Adriano Machado added a comment - 02/Sep/24 17:45 Failing tests on `camel-opentelemetry` might be related to https://issues.apache.org/jira/projects/CAMEL/issues/CAMEL-21147 . | Claus Ibsen: Claus Ibsen added a comment - 03/Jan/25 10:40 Adriano did you look more into this, especially the one about timezone"
https://issues.apache.org/jira/browse/CAMEL-21583,Test,Open,Minor,Unresolved,4.9.0,None,camel-jetty,Unknown,Unassigned,Aurélien Pupier,03/Jan/25 08:14,03/Jan/25 08:15,"with the last 5 builds on CI, there was at least one Jetty tests failing with this kind of error: org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[] at org.apache.camel.CamelExecutionException.wrapCamelExecutionException(CamelExecutionException.java:45) at org.apache.camel.support.ExchangeHelper.extractResultBody(ExchangeHelper.java:698) at org.apache.camel.impl.engine.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:591) at org.apache.camel.impl.engine.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:587) at org.apache.camel.impl.engine.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:221) at org.apache.camel.impl.engine.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:213) at org.apache.camel.component.jetty.HttpsRouteTest.invokeHttpEndpoint(HttpsRouteTest.java:175) at org.apache.camel.component.jetty.HttpsRouteTest.testEndpoint(HttpsRouteTest.java:121) at java.base/java.lang.reflect.Method.invoke(Method.java:580) at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387) at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312) at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843) at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808) at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188) Caused by: org.apache.hc.client5.http.HttpHostConnectException: Connect to https://localhost:36391 [localhost/127.0.0.1, localhost/127.0.1.1] failed: Connection refused at java.base/sun.nio.ch.Net.pollConnect(Native Method) at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:682) at java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:542) at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:592) at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327) at java.base/java.net.Socket.connect(Socket.java:751) at org.apache.hc.client5.http.impl.io.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:216) at org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:490) at org.apache.hc.client5.http.impl.classic.InternalExecRuntime.connectEndpoint(InternalExecRuntime.java:164) at org.apache.hc.client5.http.impl.classic.InternalExecRuntime.connectEndpoint(InternalExecRuntime.java:174) at org.apache.hc.client5.http.impl.classic.ConnectExec.execute(ConnectExec.java:144) at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51) at org.apache.hc.client5.http.impl.classic.ProtocolExec.execute(ProtocolExec.java:192) at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51) at org.apache.hc.client5.http.impl.classic.ContentCompressionExec.execute(ContentCompressionExec.java:150) at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51) at org.apache.hc.client5.http.impl.classic.HttpRequestRetryExec.execute(HttpRequestRetryExec.java:113) at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51) at org.apache.hc.client5.http.impl.classic.InternalHttpClient.doExecute(InternalHttpClient.java:174) at org.apache.hc.client5.http.impl.classic.CloseableHttpClient.execute(CloseableHttpClient.java:87) at org.apache.hc.client5.http.impl.classic.CloseableHttpClient.execute(CloseableHttpClient.java:55) at org.apache.hc.client5.http.classic.HttpClient.executeOpen(HttpClient.java:183) at org.apache.camel.component.http.HttpProducer.executeMethod(HttpProducer.java:491) at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:247) at org.apache.camel.support.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:65) at org.apache.camel.impl.engine.SharedCamelInternalProcessor.processNonTransacted(SharedCamelInternalProcessor.java:156) at org.apache.camel.impl.engine.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:133) at org.apache.camel.impl.engine.SharedCamelInternalProcessor$1.process(SharedCamelInternalProcessor.java:89) at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:82) at org.apache.camel.impl.engine.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:86) at org.apache.camel.support.cache.DefaultProducerCache.send(DefaultProducerCache.java:178) at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:176) at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:172) at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:153) at org.apache.camel.impl.engine.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:219) It occured in different context and slightly different tests: BuildAndTest / Matrix - JDK_NAME = 'jdk_21_latest', PLATFORM = 'ubuntu-avx' / Test / org.apache.camel.component.jetty.HttpsRouteAddSslConnectorPropertiesTest.testEndpoint (from org.apache.camel.component.jetty.JettyXsltTest) BuildAndTest / Matrix - JDK_NAME = 'jdk_17_latest', PLATFORM = 'ppc64le' / Test / org.apache.camel.component.jetty.HttpsAsyncRouteTest.testEndpoint BuildAndTest / Matrix - JDK_NAME = 'jdk_21_latest', PLATFORM = 'ubuntu-avx' / Test / org.apache.camel.component.jetty.HttpsAsyncRouteTest.testEndpoint BuildAndTest / Matrix - JDK_NAME = 'jdk_17_latest', PLATFORM = 'ppc64le' / Test / org.apache.camel.component.jetty.HttpsAsyncRouteTest.testEndpoint BuildAndTest / Matrix - JDK_NAME = 'jdk_21_latest', PLATFORM = 'ubuntu-avx' / Test / org.apache.camel.component.jetty.HttpsAsyncRouteTest.testEndpoint BuildAndTest / Matrix - JDK_NAME = 'jdk_21_latest', PLATFORM = 'ubuntu-avx' / Test / org.apache.camel.component.jetty.HttpsAsyncRouteTest.testEndpoint BuildAndTest / Matrix - JDK_NAME = 'jdk_21_latest', PLATFORM = 'ubuntu-avx' / Test / org.apache.camel.component.jetty.HttpsRouteAddSslConnectorPropertiesTest.testEndpoint BuildAndTest / Matrix - JDK_NAME = 'jdk_17_latest', PLATFORM = 'ubuntu-avx' / Test / org.apache.camel.component.jetty.HttpsAsyncRouteTest.testEndpoint BuildAndTest / Matrix - JDK_NAME = 'jdk_21_latest', PLATFORM = 'ubuntu-avx' / Test / org.apache.camel.component.jetty.HttpsRouteAddSslConnectorPropertiesTest.testEndpoint",
https://issues.apache.org/jira/browse/CAMEL-12953,New Feature,Open,Minor,Unresolved,2.22.1,Future,camel-grpc,Novice,Unassigned,Vishal Vijayan,22/Nov/18 22:09,02/Jan/25 08:39,Headers that are added to the Message in the camel Exchange before making a call to the camel-grpc component are not received at the grpc consumer. The expectation is that these headers would be added to the grpcStub before sending over the wire (like other components like http4 etc). Our team has come up with a workaround for this but it is extremely cumbersome. We had to extend the GrpcProducer to introduce a custom GrpcExchangeForwarder that would copy header from exchange to the stub before invoking the sync/async method. At the consumer side we had to extend the GrpcConsumer to use a custom ServerInterceptor to capture the grpc headers and custom MethodHandler to transfer the grpc headers to the Camel exchange headers.,"Dmitry Volodin: Dmitry Volodin added a comment - 23/Nov/18 05:37 - edited vijayanv , yes, it's not implemented yet and in roadmap. You are welcome to provide PR and JUnit test for it as well. It must be option to send/receive headers and disabled by default. https://github.com/apache/camel/blob/master/CONTRIBUTING.md | Madhawa Gunasekara: Madhawa Gunasekara added a comment - 17/Feb/20 20:26 Hi All, I am Madhawa, a Computer Science master student at the University of Stuttgart, and I would like to work on this issue during the summer as a GSoC student. I have good skills in Java, Maven, JUnit, JMS, AMQP, RDBMS, OData and other technologies of the Java Stack. I was checking out gRPC recently due to the popularity and the lightweight of the gRPC. I think working on this issue will help me to learn about Apache Camel and gRPC both. I am a total novice, so please could you help me with some documentation about Camel's Architecture? Or other resources in order to get started in the community. Cheers, Madhawa | Dmitry Volodin: Dmitry Volodin added a comment - 18/Feb/20 05:45 Hi madhawak ! You are welcome to provide this feature during GSoC 2020. The good point to start is the project brand new site full with information you need https://camel.apache.org/manual/latest/architecture.html Also, if you familiar with OData technology, you could be also interesting with CAMEL-12750 issue https://github.com/apache/camel/blob/master/CONTRIBUTING.md | Madhawa Gunasekara: Madhawa Gunasekara added a comment - 19/Feb/20 15:39 - edited Hi dmvolod , Thanks for the response. I will go through the website. Actually I would like to consider this issue and this one for the GSOC CAMEL-11994 Cheers, Madhawa | Dmitry Volodin: Dmitry Volodin added a comment - 21/Feb/20 06:27 - edited Good point, madhawak If you decide to go with CAMEL-11994 please comment inside the issue, otherwise another GSOC participant can take it. Thank you. | Nicholas Caughey: Nicholas Caughey added a comment - 02/Feb/22 11:34 Hi all, Trying to take a look at this issue. Sorry if this is a poor question, just checking the headers should be passed directly to the grpc-consumer from the exchange instead of the current workaround? Thanks | Claus Ibsen: Claus Ibsen added a comment - 02/Feb/22 11:39 Yeah I think it should use the header filter strategy that other components uses, which allows to plugin custom filters if needed (and also filter out internal headers like Camel*). | Claus Ibsen: Claus Ibsen added a comment - 02/Jan/25 08:39 Actually I cant easily see how those headers would map to the grpc stub. What parameters should headers be mapped to, and how"
https://issues.apache.org/jira/browse/CAMEL-17559,Improvement,Open,Minor,Unresolved,None,None,camel-file,Unknown,Unassigned,Otavio Rodolfo Piske,27/Jan/22 18:10,29/Dec/24 21:06,"While working on CAMEL-15562 , with a very large directory tree, I noticed that sometimes it tends to perform a bit poorly when traversing very large directory trees. I think we could explore migrating some of the camel-file code to use newer (and, sometimes better/faster) I/O APIs to improve the performance/scalability for extreme use cases. Simulating the way Camel works now and comparing with some alternatives, indicates that there can be some possible performance gains (testOldIo is the current way the code works). Testing in not-so-large directory with 100k files (10 directories with 10k files within each): Java 17 Benchmark Mode Cnt Score Error Units MyBenchmark.testNewIo avgt 15 29468.995 ± 653.226 us/op MyBenchmark.testNewIoWithStream avgt 15 29563.389 ± 462.856 us/op MyBenchmark.testNewIoWithTraverse avgt 15 145232.034 ± 1467.996 us/op MyBenchmark.testOldIo avgt 15 44147.684 ± 723.055 us/op Java 11 Benchmark Mode Cnt Score Error Units MyBenchmark.testNewIo avgt 15 29471.651 ± 1105.507 us/op MyBenchmark.testNewIoWithStream avgt 15 28745.984 ± 616.324 us/op MyBenchmark.testNewIoWithTraverse avgt 15 149459.744 ± 2185.104 us/op MyBenchmark.testOldIo avgt 15 44486.002 ± 487.449 us/op",Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 27/Jan/22 19:55 On a different tree with more files and depths (note that this one is in ms): Benchmark Mode Cnt Score Error Units MyBenchmark.testNewIo avgt 15 7312.966 ± 79.059 ms/op MyBenchmark.testNewIoWithStream avgt 15 7474.397 ± 130.335 ms/op MyBenchmark.testNewIoWithTraverse avgt 15 8491.756 ± 123.993 ms/op MyBenchmark.testOldIo avgt 15 8699.885 ± 128.870 ms/op
https://issues.apache.org/jira/browse/CAMEL-20886,Task,Open,Minor,Unresolved,None,4.x,build system,Unknown,Unassigned,Aurélien Pupier,17/Jun/24 15:03,28/Dec/24 17:06,"if we can use parallel Maven build, it could save a lot of time during build phase locally and on CIs. Example on my locla machine with 8 cores with all dependencies downloaded: 11' for mvn clean install -D quickly 6'30 for mvn clean install -D quickly -T 1C Different possibilities: use it by default, configured in the pom (requires to be sure it is working great in all environments) include parameter only for GitHub actions and provide documentation for end-user to allow faster nuild and let them experiment for a while provide documentation for end-user to allow faster nuild and let them experiment for a while","Claus Ibsen: Claus Ibsen added a comment - 27/Jun/24 12:08 Parallel build is standard in Maven, so I think at first we can add something in the docs. | Claus Ibsen: Claus Ibsen added a comment - 28/Dec/24 17:06 You can use mvnd that can build quickly using parallel builds"
https://issues.apache.org/jira/browse/CAMEL-21027,Improvement,Open,Minor,Unresolved,None,4.x,camel-github,Unknown,Guillaume Nodet,Guillaume Nodet,30/Jul/24 06:39,28/Dec/24 17:06,The library (org.eclipse.mylyn.github:org.eclipse.egit.github.core) used by the camel-github component has not had any releases since 2013...,
https://issues.apache.org/jira/browse/CAMEL-21028,New Feature,Open,Minor,Unresolved,None,None,None,Unknown,Guillaume Nodet,Guillaume Nodet,30/Jul/24 06:41,28/Dec/24 17:05,,
https://issues.apache.org/jira/browse/CAMEL-21102,Improvement,Open,Minor,Unresolved,None,4.x,camel-aws,Unknown,Unassigned,Claus Ibsen,21/Aug/24 11:36,27/Dec/24 12:50,https://aws.amazon.com/about-aws/whats-new/2024/08/amazon-s3-conditional-writes/,"Claus Ibsen: Claus Ibsen added a comment - 27/Dec/24 12:50 Andrea, did we already implement this ?"
https://issues.apache.org/jira/browse/CAMEL-19434,Task,Open,Minor,Unresolved,None,Future,camel-spring-boot,Unknown,Unassigned,Claus Ibsen,09/Jun/23 19:53,19/Dec/24 16:17,These are hard to maintain as arqullian is eol project and dont work well with SB3,Aurélien Pupier: Aurélien Pupier added a comment - 19/Dec/24 15:44 Is it this Arquillian project https://github.com/arquillian ? Do you have pointers mentioning the EOL? | Aurélien Pupier: Aurélien Pupier added a comment - 19/Dec/24 16:17 org.jboss.arquillian.container:container-se-api and org.jboss.arquillian.container:container-se-server had their last release in 2017 https://github.com/apache/camel-spring-boot/blob/099708b22911ac1ede3a153d56ff3527cef872c8/tests/camel-itest-spring-boot/pom.xml#L119-L128 other arquillian dependencies seems to have updates published regularly https://github.com/apache/camel-spring-boot/blob/099708b22911ac1ede3a153d56ff3527cef872c8/tests/camel-itest-spring-boot/pom.xml#L103-L118 even if we are far behind in the version used 1.7.0 alpha instead 1.9 final ofhttps://github.com/apache/camel-spring-boot/blob/099708b22911ac1ede3a153d56ff3527cef872c8/pom.xml#L119
https://issues.apache.org/jira/browse/CAMEL-21111,Task,Open,Minor,Unresolved,None,4.x,upgrade-recipes,Unknown,Jiri Ondrusek,Jiri Ondrusek,22/Aug/24 13:00,16/Dec/24 08:54,Upgrade tests are currently resolving all camel-dependencies required for the test from the highest version defined by the recipe. This brings a lot of dependencies (with recipes 4.6->4.7 the number of test dependencies is 50+) The highest possible version might not be neccessary. Let say change in camel-api is happening between version 4.7.0 and 4.6.0. Current junit test would load dependency camel-api:4.6.0 (eventhough camel-ap:4.5.0 might be already loaded and would satisfy the recipe test) I think that it should be possible to change resolving so the number of dependencies would stay lower.,
https://issues.apache.org/jira/browse/CAMEL-21513,Improvement,Open,Minor,Unresolved,4.4.4,4.x,camel-core,Unknown,Unassigned,Nathan,04/Dec/24 11:26,04/Dec/24 14:13,"Context The CoreTypeConverterRegistry uses a map of converters to find a converter for a TypeConvertible<from,to>. If there is no known converter it attempts to find one in the existing converter map based on the idea that an existing converter on a super class can be used. This logic is contained in the TypeResolverHelper.tryMatch method. The tryMatch method will do an exhaustive search on the types in the converter and the super classes of the to convert value. To do this tryMatch will iterate over all the existing converters. Each existing converter<from,to> will then be compared to the super classes of the TypeConvertible<from,to>. Problem The problem is that the TypeResolverHelper.tryMatch can be highly random in selecting a converter. The first converter that matches is chosen and stored for all future usage of this specific type conversion. But the order of iteration for the converter map is not guaranteed to be the same every time. It is very likely that it is different for every load, since it depends on the order that converters have been added and there is no order guarantee on HashMap entry set iteration. This is not only theoretical, we already had a problem with the type conversion of DeferredElementNSImpl to CxfPayload. DeferredElementNSImpl implements both org.w3c.dom.Element and org.w3c.dom.NodeList. Both of those have converters in the CxfPayloadConverterLoader. But the converter chosen was random and often changed after application restarts. This caused problems for us since the NodeList to CxfPayload did not transform the DeferredElementNSImpl as expected. Workaround There is an easy workaround by defining your own converters to ensure the correct conversion happens, but this workaround can be cumbersome for applications with a lot of implicit type conversions. Especially if the correct conversion does exist, but is just not used. Solution? I do think there is a potential solution, the converter iteration is random and it would be inefficient to order it. That would also not necessarily fix anything since any order could be wrong for some specific conversion. Instead the TypeResolverHelper.tryMatch could change things by iterating over the super classes of the from first. And try to find a converter for each super class. The complication is that the super class iteration is done in the TypeConvertible, so it would have to be duplicated or moved into the TypeResolverHelper to do that. The method getInterfaces that is used in the TypeConvertible is ordered by the JDK, so there would be no randomness. Instead it would select the first existing converter that is actually closest to the target class. This is much better than just the first converter that happens to match with an interface removed 5 super classes. For the DeferredElementNSImpl it would then go: look for DeferredElementNSImpl -> not found look for ElementNSImpl -> not found look for ElementImpl -> not found Look for Element -> found CxfPayloadConverter.elementToCxfPayload",Claus Ibsen: Claus Ibsen added a comment - 04/Dec/24 14:13 You are welcome to work on a proposed path and send a PR or attach code to this JIRA
https://issues.apache.org/jira/browse/CAMEL-20726,Task,Open,Minor,Unresolved,None,4.x,documentation,Unknown,Andrea Cosentino,Andrea Cosentino,29/Apr/24 15:34,28/Nov/24 08:53,,Claus Ibsen: Claus Ibsen added a comment - 05/Sep/24 08:05 Can this be moved to 4.9
https://issues.apache.org/jira/browse/CAMEL-21008,Improvement,Open,Minor,Unresolved,None,None,"camel-ai,(1)camel-catalog",Unknown,Unassigned,Aurélien Pupier,23/Jul/24 13:52,27/Nov/24 09:13,"DJL component is supporting several engine https://camel.apache.org/components/next/djl-component.html#_djl_engine_implementation An end-user might search for them instead of DJL when looking for the component. It would be nice to have a way to find DJL component when searching for pytorch, tensorflow or mxnet in the various tooling. this is a very similar issue with https://issues.apache.org/jira/browse/CAMEL-20871 but for another component.","Tadayoshi Sato: Tadayoshi Sato added a comment - 26/Jul/24 08:31 apupier Interesting idea. What would be needed to make it more discoverable for the tooling? What's the ideal way to provide such metadata/information for them? | Aurélien Pupier: Aurélien Pupier added a comment - 26/Jul/24 08:43 - edited I proposed some ideas in the linked ticket which has similar structure and problem. here they are: add protocol as category improve catalog by adding ""search field""/""keywords"" but maybe too much redundant with category? have tooling searching in documentation pages too (even if I do not see well how it can work easily) provide Kamelets for each of the supported protocols. it has the benefit that we can also add the specific dependency provide specific component for each protocol which are using djl under the hood also has the benefit that we can also add the specific dependency. Can be the best if there are specific parameter for a specific protocol. Will require to keep the generic one so that newly supported protocols can be sued without modifications. I did not had time to dig more on that and do a proper pros/cons analysis Note that I suspect that several other components are following the same structure and thus has the same kind of problematic."
https://issues.apache.org/jira/browse/CAMEL-21439,Test,Open,Minor,Unresolved,4.9.0,None,camel-etcd3,Unknown,Otavio Rodolfo Piske,Otavio Rodolfo Piske,12/Nov/24 09:56,13/Nov/24 13:33,"Something has broken etcd3 very badly and tests are not working at all. This could indicate a serious problem with the component. Running the tests causes these messages to be printed: Nov 11, 2024 10:29:41 AM io.grpc.internal.ManagedChannelImpl$NameResolverListener handleErrorInSyncContext WARNING: [Channel<1>: (ip:///localhost:36757)] Failed to resolve name. status=Status{code=NOT_FOUND, description=null, cause=null} Nov 11, 2024 10:29:42 AM io.grpc.internal.ManagedChannelImpl$NameResolverListener handleErrorInSyncContext WARNING: [Channel<1>: (ip:///localhost:36757)] Failed to resolve name. status=Status{code=NOT_FOUND, description=null, cause=null} Nov 11, 2024 10:29:44 AM io.grpc.internal.ManagedChannelImpl$NameResolverListener handleErrorInSyncContext WARNING: [Channel<1>: (ip:///localhost:36757)] Failed to resolve name. status=Status{code=NOT_FOUND, description=null, cause=null} Nov 11, 2024 10:29:47 AM io.grpc.internal.ManagedChannelImpl$NameResolverListener handleErrorInSyncContext WARNING: [Channel<1>: (ip:///localhost:36757)] Failed to resolve name. status=Status{code=NOT_FOUND, description=null, cause=null} Nov 11, 2024 10:29:51 AM io.grpc.internal.ManagedChannelImpl$NameResolverListener handleErrorInSyncContext WARNING: [Channel<1>: (ip:///localhost:36757)] Failed to resolve name. status=Status{code=NOT_FOUND, description=null, cause=null} Nov 11, 2024 10:29:59 AM io.grpc.internal.ManagedChannelImpl$NameResolverListener handleErrorInSyncContext WARNING: [Channel<1>: (ip:///localhost:36757)] Failed to resolve name. status=Status{code=NOT_FOUND, description=null, cause=null} Nov 11, 2024 10:30:09 AM io.grpc.internal.ManagedChannelImpl$NameResolverListener handleErrorInSyncContext WARNING: [Channel<1>: (ip:///localhost:36757)] Failed to resolve name. status=Status{code=NOT_FOUND, description=null, cause=null} Nov 11, 2024 10:30:25 AM io.grpc.internal.ManagedChannelImpl$NameResolverListener handleErrorInSyncContext WARNING: [Channel<1>: (ip:///localhost:36757)] Failed to resolve name. status=Status{code=NOT_FOUND, description=null, cause=null} And the logs: 2024-11-12 10:01:46,517 [ault-executor-0] WARN AbstractNameResolver - Error while getting list of servers java.lang.IllegalStateException: Not called from the SynchronizationContext at com.google.common.base.Preconditions.checkState(Preconditions.java:513) ~[guava-33.3.1-jre.jar:?] at io.grpc.SynchronizationContext.throwIfNotInThisSynchronizationContext(SynchronizationContext.java:134) ~[grpc-api-1.68.1.jar:1.68.1] at io.grpc.internal.ManagedChannelImpl$NameResolverListener.onResult2(ManagedChannelImpl.java:1686) ~[grpc-core-1.68.1.jar:1.68.1] at io.grpc.internal.RetryingNameResolver$RetryingListener.onResult2(RetryingNameResolver.java:107) ~[grpc-core-1.68.1.jar:1.68.1] at io.grpc.NameResolver$Listener2.onAddresses(NameResolver.java:228) ~[grpc-api-1.68.1.jar:1.68.1] at io.etcd.jetcd.resolver.AbstractNameResolver.doResolve(AbstractNameResolver.java:124) ~[jetcd-core-0.8.3.jar:?] at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144) ~[?:?] at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642) ~[?:?] at java.base/java.lang. Thread .run( Thread .java:1583) [?:?]","Claus Ibsen: Claus Ibsen added a comment - 12/Nov/24 19:28 If etcd3 is hard to maintain we can consider deprecating it | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 13/Nov/24 07:06 davsclaus is it widely used? I don't remember seeing much activity on this one, so we could consider deprecating it, indeed. | Claus Ibsen: Claus Ibsen added a comment - 13/Nov/24 08:52 No its not really in use, its preview level for a long time | Claus Ibsen: Claus Ibsen added a comment - 13/Nov/24 08:52 Camel is a very big project and from time to time then stuff needs to go for the project to be maintainable | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 13/Nov/24 09:31 +1. Let's deprecate this one. Later I'll create the ticket and mark the code as deprecated so we can remove it after the next LTS."
https://issues.apache.org/jira/browse/CAMEL-17914,Test,Open,Minor,Unresolved,None,4.x,camel-kafka,Novice,Unassigned,James Netherton,06/Apr/22 12:16,13/Nov/24 06:23,"If camel-kafka enables users to configure SSL and the various Kafka security protocols, then we should have some basic tests for them. E.g the items listed in the SecurityProtocol enum: SSL SASL_PLAINTEXT SASL_SSL",Ivan Kulaga: Ivan Kulaga added a comment - 12/Nov/24 20:22 Is this issue still relevant? I would like to work on it. | Claus Ibsen: Claus Ibsen added a comment - 13/Nov/24 06:23 Yes you are welcome
https://issues.apache.org/jira/browse/CAMEL-21437,Improvement,Open,Minor,Unresolved,"4.8.0,4.8.1",None,camel-core,Unknown,Unassigned,Olivier Jacquemart,12/Nov/24 09:29,12/Nov/24 10:06,"At the moment, the DefaultRestClientRequestValidator not give any information in case of an invalid json object. It could be nice to have more info like a log in that particular case (and maybe other cases like empty body, not allowed query params or http headers). About the json validation, the json-validator module has another approach and allows to catch exception so we can decide what exception to log.",
https://issues.apache.org/jira/browse/CAMEL-21408,Task,Open,Minor,Unresolved,4.8.1,None,camel-jbang,Unknown,Unassigned,Aurélien Pupier,31/Oct/24 08:40,12/Nov/24 09:06,"when calling something like: jbang '-Dcamel.jbang.version=4.8.1' camel@apache/camel export --runtime=quarkus --gav=com.acme:myproject:1.0-SNAPSHOT module-01/demo.camel.yaml The genrated project is invalid. The camel file is copied in src/main/resources/camel/democamel.yaml The application.properties file contains: quarkus.native.resources.includes=camel/module-01/demo.camel.yaml camel.main.routes-include-pattern=camel/module-01/demo.camel.yaml which is leading to this kind of error at runtime: 2024-10-31 08:37:02,010 ERROR [org.apa.cam.qua.mai.CamelMainRuntime] (main) Failed to start application: org.apache.camel.RuntimeCamelException: java.io.FileNotFoundException: Resource not found: classpath:camel/module-01/demo.camel.yaml at org.apache.camel.RuntimeCamelException.wrapRuntimeException(RuntimeCamelException.java:68) at org.apache.camel.main.RoutesConfigurer.configureModeline(RoutesConfigurer.java:366) at org.apache.camel.main.BaseMainSupport.modelineRoutes(BaseMainSupport.java:692) at org.apache.camel.main.BaseMainSupport.autoconfigure(BaseMainSupport.java:535) at org.apache.camel.main.MainSupport.autoconfigure(MainSupport.java:73) at org.apache.camel.main.BaseMainSupport.postProcessCamelContext(BaseMainSupport.java:772) at org.apache.camel.quarkus.main.CamelMain.initCamelContext(CamelMain.java:113) at org.apache.camel.quarkus.main.CamelMain.doInit(CamelMain.java:83) at org.apache.camel.support.service.BaseService.init(BaseService.java:85) at org.apache.camel.quarkus.main.CamelMain.startEngine(CamelMain.java:134) at org.apache.camel.quarkus.main.CamelMainRuntime.start(CamelMainRuntime.java:49) at org.apache.camel.quarkus.core.CamelBootstrapRecorder.start(CamelBootstrapRecorder.java:45) at io.quarkus.deployment.steps.CamelBootstrapProcessor$boot173480958.deploy_0(Unknown Source) at io.quarkus.deployment.steps.CamelBootstrapProcessor$boot173480958.deploy(Unknown Source) at io.quarkus.runner.ApplicationImpl.doStart(Unknown Source) at io.quarkus.runtime.Application.start(Application.java:101) at io.quarkus.runtime.ApplicationLifecycleManager.run(ApplicationLifecycleManager.java:119) at io.quarkus.runtime.Quarkus.run(Quarkus.java:71) at io.quarkus.runtime.Quarkus.run(Quarkus.java:44) at io.quarkus.runtime.Quarkus.run(Quarkus.java:124) at io.quarkus.runner.GeneratedMain.main(Unknown Source) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.base/java.lang.reflect.Method.invoke(Method.java:569) at io.quarkus.bootstrap.runner.QuarkusEntryPoint.doRun(QuarkusEntryPoint.java:62) at io.quarkus.bootstrap.runner.QuarkusEntryPoint.main(QuarkusEntryPoint.java:33) Caused by: java.io.FileNotFoundException: Resource not found: classpath:camel/module-01/demo.camel.yaml at org.apache.camel.dsl.yaml.YamlRoutesBuilderLoader.preParseRoute(YamlRoutesBuilderLoader.java:976) at org.apache.camel.main.RoutesConfigurer.doConfigureModeline(RoutesConfigurer.java:425) at org.apache.camel.main.RoutesConfigurer.configureModeline(RoutesConfigurer.java:352) ... 25 more Note that it also affects the Camel Kubernetes run as it is reusing the export.",
https://issues.apache.org/jira/browse/CAMEL-21314,Task,Open,Minor,Unresolved,4.8.0,4.x,camel-aws2,Unknown,Andrea Cosentino,Aurélien Pupier,03/Oct/24 14:10,31/Oct/24 07:59,"it is currently not possible. There is this test in error: [[1;31mERROR[m] [1;31mTests [0;1mrun: [0;1m1[m, [1;31mFailures: [0;1;31m1[m, Errors: 0, Skipped: 0, Time elapsed: 0.160 s[1;31m <<< FAILURE![m -- in org.apache.camel.component.aws2.s3.integration.[1mS3CopyObjectCustomerKeyIT[m [[1;31mERROR[m] org.apache.camel.component.aws2.s3.integration.S3CopyObjectCustomerKeyIT.sendIn -- Time elapsed: 0.153 s <<< FAILURE! org.opentest4j.AssertionFailedError: expected: not <null> at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152) at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132) at org.junit.jupiter.api.AssertNotNull.failNull(AssertNotNull.java:49) at org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:35) at org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:30) at org.junit.jupiter.api.Assertions.assertNotNull(Assertions.java:304) at org.apache.camel.component.aws2.s3.integration.S3CopyObjectCustomerKeyIT.sendIn(S3CopyObjectCustomerKeyIT.java:98) at java.base/java.lang.reflect.Method.invoke(Method.java:569) at java.base/java.util.ArrayList.forEach(ArrayList.java:1511) at java.base/java.util.ArrayList.forEach(ArrayList.java:1511) Tried with localstack/localstack:3.7.0 and localstack/localstack:3.7.2 to investigate if it is just a matter of test update or there is a real breakage with latest version of AWS","Aurélien Pupier: Aurélien Pupier added a comment - 10/Oct/24 06:40 - edited Upgrade of container from 3.6 to a 3.7+ (3.8) has been done despite the test failing so it is now failing on the main branch https://github.com/apache/camel/commit/6d908ba20b9c90fe727772236d230aaacafd15bd | Claus Ibsen: Claus Ibsen added a comment - 15/Oct/24 05:36 software.amazon.awssdk.services.s3.model.S3Exception: The object was stored using a form of Server Side Encryption. The correct parameters must be provided to retrieve the object. (Service: S3, Status Code: 400, Request ID: ab39a700-8191-4c53-b2c6-2f27c232b67a, Extended Request ID: s9lzHYrFp76ZVxRcpX9 5cjAnEH2ROuNkd2BHfIa6UkFVdtjf5mKR3/eTPFvsiP/XV/VLi31234=) | Claus Ibsen: Claus Ibsen added a comment - 15/Oct/24 05:40 https://docs.aws.amazon.com/AmazonS3/latest/userguide/ServerSideEncryptionCustomerKeys.html | Claus Ibsen: Claus Ibsen added a comment - 15/Oct/24 07:15 In that link if you open ""Using the AWS SDKs to specify SSE-C for PUT, GET, Head, and Copy operations"" then there is some Java SDK sample code for copyObject that uses SSEC keys but I cannot find these APIs in camel-aws we can use instead. CopyObjectRequest copyRequest = new CopyObjectRequest(bucketName, keyName, bucketName, targetKeyName) .withSourceSSECustomerKey(SSE_KEY) .withDestinationSSECustomerKey(newSSEKey); | Andrea Cosentino: Andrea Cosentino added a comment - 15/Oct/24 07:20 I'll have a look this week."
https://issues.apache.org/jira/browse/CAMEL-20227,Bug,Open,Minor,Unresolved,3.21.2,4.x,camel-kafka,Moderate,Claus Ibsen,Preetam Panchaksharaiah,12/Dec/23 16:45,30/Oct/24 19:40,"Kafka offset advances when using Pausable kafka consumer and messages are lost when resumed. Attached is the sample code Also tried with KafkaManualCommit manual = exchange.getIn().getHeader(KafkaConstants.MANUAL_COMMIT, KafkaManualCommit.class); manual.commit();","Preetam Panchaksharaiah: Preetam Panchaksharaiah added a comment - 13/Dec/23 12:00 Reviewing the latest docs, probably this is more of suspend and resume functionality. Since the camel-vertx-kafka is removed from latest versions | Claus Ibsen: Claus Ibsen added a comment - 16/Jun/24 07:52 Try with latest 4.x release"
https://issues.apache.org/jira/browse/CAMEL-21356,Task,Open,Minor,Unresolved,4.8.0,4.x,build system,Unknown,Unassigned,Aurélien Pupier,16/Oct/24 14:49,23/Oct/24 05:58,"currently the doclint is deactivated, which means that there are some wrong or badly displayed Javadoc in several places. To be able to reativate it (here https://github.com/apache/camel/blob/0c63d15314d90e03da251214c7f9e12bf0f938dd/pom.xml#L714 and in some other places), we need to fix these Javadoc issues",
https://issues.apache.org/jira/browse/CAMEL-21268,Improvement,Open,Minor,Unresolved,None,None,camel-google-pubsub,Unknown,Unassigned,Kurt Schoovaerts,25/Sep/24 16:31,16/Oct/24 10:04,"The Camel JMS transfers the message headers from sender to receiver. This enables for example end-to-end use of the same breadcrumbId across all routes processing data in the integration environment. Proposal is to align functioning of the Camel Google PubSub component with the functioning of the Camel JMS component in passing the message headers as attributes on the Google PubSub message when publishing a message. Likewise, on receipt of a message by a subscriber, copy all pubsub message attributes to camel message headers.",Claus Ibsen: Claus Ibsen added a comment - 16/Oct/24 10:04 that breadcrumb is a camel only feature - today you can use opentelemetry etc.
https://issues.apache.org/jira/browse/CAMEL-21196,Test,Open,Minor,Unresolved,4.8.0,4.x,tests,Unknown,Nikita_Konovalov,Otavio Rodolfo Piske,11/Sep/24 08:30,26/Sep/24 17:21,"Code like the one below should be modified to use modern JUnit 5 assertions: try { DefaultFluentProducerTemplate.on(context).withBody( ""Hello World"" ).to( ""direct:exception"" ).request(); fail( ""Should have thrown RuntimeCamelException"" ); } catch (RuntimeCamelException e) { boolean b = e.getCause() instanceof IllegalArgumentException; assertTrue(b); assertEquals( ""Forced exception by unit test"" , e.getCause().getMessage()); } This should be replaced with Assertions.assertDoesNotThrow and Assertions.assertThrows as needed.",
https://issues.apache.org/jira/browse/CAMEL-20858,Improvement,Open,Minor,Unresolved,4.6.0,4.x,camel-jbang,Unknown,Unassigned,Aurélien Pupier,10/Jun/24 14:47,18/Sep/24 13:26,"When calling transform command, it would be convenient to have a message log mentioning the file transformed with initial name and final name and if it is a new file created aor one exists and it is appended",Claus Ibsen: Claus Ibsen added a comment - 18/Sep/24 13:26 We should look at printing more activity in the jbang commands when --verbose is enabled
https://issues.apache.org/jira/browse/CAMEL-20870,Task,Open,Minor,Unresolved,None,None,website,Unknown,Unassigned,Aurélien Pupier,13/Jun/24 07:54,17/Sep/24 11:17,it is often that the camel-website is broken due to changes in documentation in other Camel repositories where the documentation is defined. it will be convenient to have a PR check on each of these repositories to avoid being in this state.,"Aurélien Pupier: Aurélien Pupier added a comment - 13/Jun/24 08:30 on camel-website, the checks are done with: https://github.com/apache/camel-website/blob/8f76ab02be27d68403aa4eed01d0800c5707b179/package.json#L15-L18 ""check:html"": ""html-validate public"", ""check:links"": ""deadlinks-linux public"", ""check:redirects"": ""tests/redirect.sh -s"", ""checks"": ""run-s -l check:links check:html check:redirects"","
https://issues.apache.org/jira/browse/CAMEL-21222,New Feature,Open,Minor,Unresolved,None,4.x,"camel-core,eip",Unknown,Unassigned,Claus Ibsen,14/Sep/24 13:09,14/Sep/24 13:09,https://www.linkedin.com/posts/herve-ciaravolo-silvain-ab453b2_etl-dataprocessing-dataengineering-activity-7239918712500232192-PMYf/ We could consider a new EIP that can be configured to keep only N top or bottom records. Where N can be defined via some logic (correlation key) etc.,
https://issues.apache.org/jira/browse/CAMEL-18701,Task,Open,Minor,Unresolved,None,Future,"camel-core,(2)camel-file,camel-test",Unknown,Unassigned,Otavio Rodolfo Piske,09/Nov/22 09:55,06/Sep/24 12:18,"Currently, the tests for core components are in the camel-core module (such as those for file). Not only this causes confusion, as the tests are not really in the component code, but also may lead to strange circular dependencies. We should investigate reorganizing the project layout so that the dependency tree is simpler and doesn't contain circular dependencies.","Claus Ibsen: Claus Ibsen added a comment - 19/Jun/23 12:02 This is too late to move around now | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 19/Jun/23 12:44 Also, I think this is more complicated than what it seems. I believe we do need to clean this up, but maybe we should consider doing it when we start on Camel 5 (or in another version where we can tweak these - 4.2, maybe? TBD ...)"
https://issues.apache.org/jira/browse/CAMEL-18022,Bug,Open,Minor,Unresolved,"3.15.0,3.16.0",4.x,camel-aws2,Unknown,Andrea Cosentino,Jawad Ahmad,27/Apr/22 18:10,19/Aug/24 06:40,"I am trying to configure AWS2 S3 component. I have folders under a hierarchy where the bucket name is top of the hierarchy and then different subfolders which will have actual files. But when I configure the route, it fails with 403 error on Head Bucket Request. I believe as my bucket name doesn't match the regex pattern (as it contains a subfolder name as well), this request gets failed. We need to move away from HeadBucketRequests or provide a way to configure herirchical folders structure. try { s3Client.headBucket(HeadBucketRequest.builder().bucket(bucketName).build()); LOG.trace( ""Bucket [{}] already exists"" , bucketName); return ; } catch (AwsServiceException ase) { /* 404 means the bucket doesn't exist */ if (!(ase.awsErrorDetails().sdkHttpResponse().statusCode() == 404)) { throw ase; } } E.g : If bucket name = Test and folder name = CSV then S3 path of folder would look like : s3://Test/CSV/ . Configuring this in AWS route fails on Bucket Head Request.","Andrea Cosentino: Andrea Cosentino added a comment - 27/Apr/22 20:14 Head bucket is a cheaper and faster invocation then listing all the buckets and check. This is the main reason for using it. Can you please show an example of your route and bucket name and structure? It's really a corner case and moving away from this for a corner case needs a justification | Jawad Ahmad: Jawad Ahmad added a comment - 27/Apr/22 20:20 E.g : If bucket name = Test and folder name = CSV then S3 path of folder would look like : s3://Test/CSV/ . Configuring this in the AWS route fails on Bucket Head Request. I don't think this is a corner case. It's very common to have sub folders in the main bucket. | Andrea Cosentino: Andrea Cosentino added a comment - 27/Apr/22 20:36 In that case the bucket name is only test and the check should be for test and not for subfolders | Andrea Cosentino: Andrea Cosentino added a comment - 27/Apr/22 20:54 I'll check, but bucket name is a thing, subfolders a different thing. The check is for the bucket name only, not for subfolders. Are you consuming or producing? | Jawad Ahmad: Jawad Ahmad added a comment - 27/Apr/22 21:30 I am using it for both. | Jawad Ahmad: Jawad Ahmad added a comment - 27/Apr/22 21:38 Maybe we can provide another header to set bucket name ? Or just split and use first name as bucket name. Will it be able to create sub folders ? | Claus Ibsen: Claus Ibsen added a comment - 05/Jul/24 05:30 Can you maybe paste more code for your aws producer what you do to be able to better reproduce and find a better solution, thanks. | Claus Ibsen: Claus Ibsen added a comment - 05/Jul/24 05:32 Maybe we can check for the folder only (ie test) such as String bucketName = getConfiguration().getBucketName(); LOG.trace( ""Querying whether bucket [{}] already exists..."" , bucketName); String folder = FileUtil.onlyPath(bucketName); if (folder == null ) { folder = bucketName; } try { s3Client.headBucket(HeadBucketRequest.builder().bucket(folder).build()); LOG.trace( ""Bucket [{}] already exists"" , folder); return ; } catch (AwsServiceException ase) { /* 404 means the bucket doesn't exist */ if (!(ase.awsErrorDetails().sdkHttpResponse().statusCode() == 404)) { throw ase; } }"
https://issues.apache.org/jira/browse/CAMEL-20942,Improvement,Open,Minor,Unresolved,None,4.x,"camel-avro,(1)camel-jackson",Unknown,Unassigned,Claus Ibsen,04/Jul/24 07:49,18/Aug/24 09:35,The exchange may have a pre-configured avro schema then we should use this. And as well set the schema on the exchange. Related to https://camel.zulipchat.com/#narrow/stream/352237-camel-jbang/topic/parquetAvro.20format.20marshal.2Funmarshal,
https://issues.apache.org/jira/browse/CAMEL-20940,Improvement,Open,Minor,Unresolved,None,4.x,None,Unknown,Unassigned,Claus Ibsen,03/Jul/24 14:17,18/Aug/24 09:35,Currently its hardcoded to a List List<?> list = (List<?>) graph; It should instead be more accepting input as it can be a string/stream/byte[] of json data or something. Or something that can be iterated.,
https://issues.apache.org/jira/browse/CAMEL-15922,Improvement,Open,Minor,Unresolved,3.7.0,Future,camel-core,Unknown,Unassigned,Claus Ibsen,04/Dec/20 09:30,15/Aug/24 08:10,"The csimple language does not support the following feature in its first release nested functions (${xxx} inside existing ${xxx} functions)) the null safe operator We need a smarter source code generator for this to support this, that supports building up multiple statements and assign to local variables, and branches for the null safe operator, and also to understand types of method calls for nested functions so its of the same type from the java compiler point of view.",Claus Ibsen: Claus Ibsen added a comment - 03/May/21 13:56 Lets wait for dropping Java 8 as source generating as Java 11 codes make this easier
https://issues.apache.org/jira/browse/CAMEL-21083,Improvement,Open,Minor,Unresolved,None,None,camel-platform-http,Moderate,Unassigned,Ivan Kulaga,14/Aug/24 12:57,14/Aug/24 14:00,See CAMEL-20237 We should add more http authentication options that can be configured via properties. Here are lists of currently existing Vert.x AuthenticationHandlers and AuthenticationProviders: https://vertx.io/docs/apidocs/io/vertx/ext/web/handler/AuthenticationHandler.html https://vertx.io/docs/apidocs/io/vertx/ext/auth/authentication/AuthenticationProvider.html Think we want to be able to configure via properties at least these: OAuth2AuthHandler handler + OAuth2Auth provider Support full set of options for JWTAuthHandler and JWTAuth to be configurable via properties BasicAuthHandler handler + JDBCAuthentication/SqlAuthentication provider,
https://issues.apache.org/jira/browse/CAMEL-21084,Improvement,Open,Minor,Unresolved,None,None,camel-platform-http,Moderate,Unassigned,Ivan Kulaga,14/Aug/24 13:04,14/Aug/24 13:59,See CAMEL-20237 We need to configure an auto-discovery for users' own org.apache.camel.component.platform.http.vertx.auth.AuthenticationConfig.AuthenticationConfigEntry definitions or something similar to this. So that users can write their own auth logic and have it auto-discovered.,Claus Ibsen: Claus Ibsen added a comment - 14/Aug/24 13:59 This is not so important yet - lets leave it for those out of the box.
https://issues.apache.org/jira/browse/CAMEL-21073,Task,Open,Minor,Unresolved,4.7.0,None,camel-salesforce,Unknown,Unassigned,Aurélien Pupier,12/Aug/24 12:20,14/Aug/24 07:57,there is several times the error: ``` package com.google.protobuf does not exist ``` building camel-salesforce locally with `mvn clean install` is working fine,Aurélien Pupier: Aurélien Pupier added a comment - 12/Aug/24 12:20 this is the last commit related to protobuf on the camel salesforce comonent I found: https://github.com/apache/camel/commit/da694a7a0fdc29a6840e072ffd2730ffc78cb55f
https://issues.apache.org/jira/browse/CAMEL-20871,Improvement,Open,Minor,Unresolved,None,None,camel-catalog,Unknown,Unassigned,Aurélien Pupier,13/Jun/24 08:36,26/Jul/24 08:57,"Toolings are currently using the catalog to let user browse components. In the IoT space, users are often coming with protocol names, such as OPC UA, CANOpen and more. Currently when searching for these protocols, no component are showing up. But the component PLC4X is supporting them. Adding all of these protocols in the description of the component, which is part of the catalog, is making the description too long. Other ideas to improve discoverability: add protocol as category but feels like a field designed for it improve catalog by adding ""search field""/""keywords"" but maybe too much redundant with category? have tooling searching in documentation pages too (even if I do not see well how it can work easily) provide Kamelets for each of the supported protocols. it has the benefit that we can also add the specific dependency. Not sure really convenient because we would like all the fields most fo the time so might be not really fitting well. provide specific component for each protocol which are using plc4x under the hood also has the benefit that we can also add the specific dependency. Can be the best if there are specific parameter for a specific protocol. Will require to keep the generic one so that newly supported protocols can be used without modifications. Might require more maintenance work than a specific search field. Note: initial discussion https://github.com/apache/camel/pull/14419",
https://issues.apache.org/jira/browse/CAMEL-20612,New Feature,Open,Minor,Unresolved,None,4.x,camel-qdrant,Unknown,Unassigned,Zineb Bendhiba,25/Mar/24 09:58,24/Jul/24 18:54,Qdrant is now part of TestContainers: https://java.testcontainers.org/modules/qdrant/ Move our test-infra to use the Qdrant test containers dependency,Thomas Cunningham: Thomas Cunningham added a comment - 24/Jul/24 18:54 Looking for tasks to pick up - I think this Jira was handled here https://github.com/apache/camel/commit/fa1107ec0c740d54ff33ded9abfb414d27eaf250
https://issues.apache.org/jira/browse/CAMEL-17088,New Feature,Open,Minor,Unresolved,None,4.x,camel-graphql,Novice,Unassigned,Luca Ferrari,15/Oct/21 11:02,16/Jul/24 18:04,"at the moment only producer is supported but there are libraries that allow for supporting this scenario as well https://www.graphql-java.com/tutorials/getting-started-with-spring-boot/ it would be interesting to offer an alternative to something like Apollo Server based on camel, with all the possible transformation and logic that you can apply to query and response","Shikhar: Shikhar added a comment - 09/Apr/24 09:18 Hi davsclaus , can I work on this? | Claus Ibsen: Claus Ibsen added a comment - 12/Apr/24 16:37 Yes you are welcome, thanks | Shikhar: Shikhar added a comment - 15/Apr/24 18:51 davsclaus From what I understand, a GraphQL consumer would receive events from Subscriptions like mentioned in https://issues.apache.org/jira/browse/CAMEL-14800 I am not sure what is exactly is meant by ""an alternative to Apollo server based on Camel"" | Luca Ferrari: Luca Ferrari added a comment - 21/Apr/24 16:26 you can ignore the apollo server example | Shikhar: Shikhar added a comment - 16/Jul/24 18:04 Hi davsclaus I'll be using graphql-ws library for building the client/consumer. Should I also add support for the older subscription-transport-ws ??"
https://issues.apache.org/jira/browse/CAMEL-20974,Improvement,Open,Minor,Unresolved,None,4.x,camel-netty,Unknown,Unassigned,Claus Ibsen,12/Jul/24 08:47,12/Jul/24 08:47,"When using netty as consumer (server vs client-mode) then it would be good to have a dev console that can show the state, such as the low-level connection channel is active / reconnecting or what happens.",
https://issues.apache.org/jira/browse/CAMEL-20936,New Feature,Open,Minor,Unresolved,None,None,camel-ai,Unknown,Unassigned,Zineb Bendhiba,02/Jul/24 15:15,03/Jul/24 06:33,"We have the opportunity to run Ollama test containers using a Hugging Face LLM model as a file, rather than continuously pulling the model. This change could facilitate running tests on our CI environment. Here's an example Before implementing this change, please verify which small model we can use or embed and ensure it complies with the Apache 2 license.",
https://issues.apache.org/jira/browse/CAMEL-19254,Bug,Open,Minor,Unresolved,"3.17.0,(3)3.18.0,3.19.0,3.20.3",None,camel-azure,Unknown,Unassigned,Idorasi Paul,06/Apr/23 09:00,02/Jul/24 17:52,"When downloading blobs using the camel component a ConditionNotMet exception is thrown. The condition that is not met is the if-match condition that contains the etag value of the blob. When endpoint polls the file, it attempts to download it in chunks. During the download, if the file is touched, the etag changes and the download fails, after that everything goes to hell. This does not happens on local, I think that downloading the file is much, much faster and this concurrency issue does not occur, but as soon as you switch to a real azure environment the issue will occur every time. To reproduce the error follow the steps: Start application in debug mode Add a breakpoint on StorageInputStream at line 317 Skip first chunk download Go to azure blob and touch the file (add new metadata) Skip second chunk download Exception is thrown Last version that works without this issue is 3.16.0 Zulip chat topic","Andrea Cosentino: Andrea Cosentino added a comment - 06/Apr/23 09:08 Maybe it's just me, but why someone should change metadata of a file while downloading it? Unless the container is on heavy loading for file updates, this is really a corner case. | Idorasi Paul: Idorasi Paul added a comment - 06/Apr/23 10:13 - edited It happens every time... I think it depends on the size of the file. Changing the metadata is to mimic a real world scenario. A new file comes in and replaces the old one (same name). If you change the metadata, the last modified date is changed and the file is considered new. | Idorasi Paul: Idorasi Paul added a comment - 06/Apr/23 12:20 - edited On further digging, I found out the issue. I tried comparing the azure blob versions, I thought the usage of etag for concurrency consistency was added between version 12.14.4 and 12.16.0, but I was wrong, etag check was there for a long time. What was actually changed and what is causing this issue is the stream caching being enabled by default. The default behaviour was changed between camel-azure 3.16.0 and 3.17.0. Turning off stream caching will fix the issue. Not sure why to be honest... | Claus Ibsen: Claus Ibsen added a comment - 02/Jul/24 17:42 - edited Hmm its hard to track this on latest code, but I wonder if the azure StorageInputStream when converted to StreamCache is closing the stream when done. And that this is somehow causes problems later public synchronized void close() { this .currentBuffer = null ; this .streamFaulted = true ; this .lastError = new IOException(Constants.STREAM_CLOSED); } | Claus Ibsen: Claus Ibsen added a comment - 02/Jul/24 17:42 I dont suppose you had a stacktrace of that error - or that you can turn of stream caching and reproduce the issues and submit the stracktrace | Claus Ibsen: Claus Ibsen added a comment - 02/Jul/24 17:52 How ""big"" are the files on azure you use? As the azure client has embedded client that will download on-demand when you read the input stream, so I assume what happens is that your file is larger than one chunk size, so the client calls azure for next chunk and this http request/response then have this HTTP header etag error. I wonder if anything can be reproduces using pure azure java client and then just read the input stream response till EOL (like Camel would do for converting to stream cache)."
https://issues.apache.org/jira/browse/CAMEL-20927,Improvement,Open,Minor,Unresolved,None,Future,camel-core,Unknown,Unassigned,Claus Ibsen,28/Jun/24 09:41,28/Jun/24 12:29,See CAMEL-16829 It may be better to reject tasks if thread pools are exhausted instead of stealing the current thread as it can lead to stuck threads in (advanced and special situations) or users not aware that their thread pools are not sized correctly and can cause system degration.,
https://issues.apache.org/jira/browse/CAMEL-18314,New Feature,Open,Minor,Unresolved,None,4.x,camel-core,Unknown,Unassigned,Claus Ibsen,27/Jul/22 13:23,27/Jun/24 14:07,"When using vault/secrets then you have to specify aws, azure, ... currently. But you may want to use a generic term `vault` that then delegates to a provider at runtime, so you can run the same route on aws, azure, local, etc. https://camel.apache.org/blog/2022/07/secrets-properties-functions-part-2/","Claus Ibsen: Claus Ibsen added a comment - 27/Jul/22 13:24 We can add a `vault` as general term that you can use, that then delegates to what we can find at runtime as a provider. | Claus Ibsen: Claus Ibsen added a comment - 27/Jul/22 13:25 cc lburgazzoli acosentino"
https://issues.apache.org/jira/browse/CAMEL-18372,New Feature,Open,Minor,Unresolved,None,4.x,None,Unknown,Unassigned,Claus Ibsen,09/Aug/22 12:24,27/Jun/24 14:06,"We need a new http consumer component that can do HTTP GET/POST, TLS/SSL et all and that then connects to a remote HTTP server and does http streaming.",Claus Ibsen: Claus Ibsen added a comment - 09/Aug/22 12:25 CAMEL-18369 is too limited as it uses the JDK URLConnection that can only do basic http stuff
https://issues.apache.org/jira/browse/CAMEL-19016,Sub-task,Open,Minor,Unresolved,None,4.x,camel-google-pubsub,Unknown,Andrea Cosentino,Andrea Cosentino,06/Feb/23 17:42,27/Jun/24 13:55,,"Andrea Cosentino: Andrea Cosentino added a comment - 23/Aug/23 05:34 Do we need to do something similar to AWS consumer? like using scheduling batch consumer here too davsclaus | Claus Ibsen: Claus Ibsen added a comment - 30/Aug/23 08:53 scheduling batch consumer works only when Camel needs to call some X service every N millis seconds. However if its the other way around, eg google calls Camel when it has a new message, then we use a regular consumer. And when we do that, then health checks need to be coded in a custom way for this. | Claus Ibsen: Claus Ibsen added a comment - 30/Aug/23 08:56 so camel-google-pubsub is more complex as today it has 2 modes - sync and async and each have their own code. the async with MessageReceiver is what a JMS component would do. the sync with blocking waiting for reply is more like for ad-hoc calls, and then to make it like a consumer, then there is code that creates thread pool that runs this in a loop to keep calling for more messages. Maybe this component only have 1 mode in start, and async was added later?"
https://issues.apache.org/jira/browse/CAMEL-19046,Improvement,Open,Minor,Unresolved,None,4.x,camel-core,Unknown,Unassigned,Claus Ibsen,14/Feb/23 08:01,27/Jun/24 13:55,"We would like to be able to categorize an error (exception thrown) by Camel routing engine whether that error happend in the consumer/source, during processing (routing) or in the producer/sink (sending to external system). This can better assist where a problem lies, i.e. source and sink are related to external systems, processing is related to Camel or custom end user integration/business logic. We can also have some kind of SPI to introspect the thrown exception and error message, to enrich error details.",
https://issues.apache.org/jira/browse/CAMEL-19165,Dependency upgrade,Open,Minor,Unresolved,None,4.x,camel-olingo2,Unknown,Unassigned,Nicolas Filotto,17/Mar/23 12:27,27/Jun/24 13:54,,"Nicolas Filotto: Nicolas Filotto added a comment - 17/Mar/23 14:29 This component supports both synchronous and asynchronous HTTP client which was possible with HttpComponents v4 since the APIs were compatible, but now they are split so a redesign is likely required | Claus Ibsen: Claus Ibsen added a comment - 26/Jul/23 07:40 It is okay to only have either sync or async http client for this in the future"
https://issues.apache.org/jira/browse/CAMEL-19166,Dependency upgrade,Open,Minor,Unresolved,None,4.x,camel-olingo4,Unknown,Unassigned,Nicolas Filotto,17/Mar/23 12:28,27/Jun/24 13:54,,"Nicolas Filotto: Nicolas Filotto added a comment - 17/Mar/23 14:29 This component supports both synchronous and asynchronous HTTP client which was possible with HttpComponents v4 since the APIs were compatible, but now they are split so a redesign is likely required | Claus Ibsen: Claus Ibsen added a comment - 27/Jun/24 13:54 Lets just keep it sync and make it easier for us"
https://issues.apache.org/jira/browse/CAMEL-19420,Improvement,Open,Minor,Unresolved,3.20.5,None,"camel-cxf,(1)documentation",Unknown,Unassigned,Lukas Lowinger,06/Jun/23 10:31,27/Jun/24 13:49,It would be nice to have some best practice security section in Camel CXF docs.,
https://issues.apache.org/jira/browse/CAMEL-19474,Task,Open,Minor,Unresolved,None,Future,camel-spring-boot,Unknown,Unassigned,Nicolas Filotto,20/Jun/23 07:38,27/Jun/24 13:48,"While trying to figure out why many integration tests of Camel SB failed, I realized that it was due to version conflicts that can be of 2 types: # Version of a specific library used in Camel is different from the version used in SpringBoot, for example, org.yaml:snakeyaml 2.0 is used in Camel while version 1.33 is used in SpringBoot 3.1 Libraries that are potentially part of the same family have a different version, for example, org.infinispan:infinispan-api 14.0.9.Final is used along with org.infinispan:infinispan-query-dsl 12.1.3.Final instead of 14.0.9.Final The goal of this task is to decide what to do with these conflicts, how they should be fixed, and fix them. Once fixed whatever the chosen way, we need to re-enable CamelSnakeyamlTest and make the build fail again on version conflict by removing https://github.com/apache/camel-spring-boot/blob/main/tests/camel-itest-spring-boot/pom.xml#L211-L212 . The full list of conflicts to fix can be found in this file https://github.com/apache/camel-spring-boot/suites/13714794833/artifacts/758695227 but the most important one is the following: Raised by CamelFhirTest WARN>>> Library version mismatch found. Found mismatch for dependency org.jetbrains:annotations: - org.jetbrains:annotations:jar: --> [17.0.0, 13.0] Raised by CamelInfinispanTest WARN>>> Library version mismatch found. Found mismatch for dependency org.apache.sshd:sshd: - org.apache.sshd:sshd-common:jar: --> [2.9.2, 2.7.0] Found mismatch for dependency org.infinispan.protostream:protostream: - org.infinispan.protostream:protostream-types:jar: --> [4.6.2.Final, 4.4.1.Final] - org.infinispan.protostream:protostream:jar: --> [4.6.2.Final, 4.4.1.Final] Found mismatch for dependency org.infinispan:infinispan: - org.infinispan:infinispan-api:jar: --> [14.0.9.Final] - org.infinispan:infinispan-client-hotrod-jakarta:jar: --> [14.0.9.Final] - org.infinispan:infinispan-client-hotrod:jar: --> [14.0.9.Final, 12.1.3.Final] - org.infinispan:infinispan-commons-jakarta:jar: --> [14.0.9.Final] - org.infinispan:infinispan-commons-test:jar: --> [14.0.9.Final] - org.infinispan:infinispan-commons:jar: --> [12.1.3.Final, 14.0.9.Final] - org.infinispan:infinispan-component-annotations:jar: --> [12.1.3.Final] - org.infinispan:infinispan-core-jakarta:jar: --> [14.0.9.Final] - org.infinispan:infinispan-core:jar: --> [14.0.9.Final, 12.1.3.Final] - org.infinispan:infinispan-jboss-marshalling:jar: --> [12.1.3.Final] - org.infinispan:infinispan-marshaller-protostuff:jar: --> [12.1.3.Final] - org.infinispan:infinispan-query-dsl:jar: --> [12.1.3.Final] - org.infinispan:infinispan-remote-query-client:jar: --> [12.1.3.Final] - org.infinispan:infinispan-spring5-common:jar: --> [14.0.9.Final] - org.infinispan:infinispan-spring5-remote:jar: --> [14.0.9.Final] Found mismatch for dependency org.jgroups:jgroups: - org.jgroups:jgroups:jar: --> [5.2.12.Final, 4.2.12.Final] Found mismatch for dependency org.wildfly.security:wildfly: - org.wildfly.security:wildfly-elytron-asn1:jar: --> [1.15.1.Final, 1.20.1.Final] - org.wildfly.security:wildfly-elytron-auth-server:jar: --> [1.15.1.Final, 1.20.1.Final] - org.wildfly.security:wildfly-elytron-auth:jar: --> [1.15.1.Final, 1.20.1.Final] - org.wildfly.security:wildfly-elytron-base:jar: --> [1.20.1.Final, 1.15.1.Final] - org.wildfly.security:wildfly-elytron-credential:jar: --> [1.20.1.Final, 1.15.1.Final] - org.wildfly.security:wildfly-elytron-http:jar: --> [1.20.1.Final, 1.15.1.Final] - org.wildfly.security:wildfly-elytron-keystore:jar: --> [1.15.1.Final, 1.20.1.Final] - org.wildfly.security:wildfly-elytron-mechanism-digest:jar: --> [1.20.1.Final, 1.15.1.Final] - org.wildfly.security:wildfly-elytron-mechanism-gssapi:jar: --> [1.20.1.Final, 1.15.1.Final] - org.wildfly.security:wildfly-elytron-mechanism-oauth2:jar: --> [1.20.1.Final, 1.15.1.Final] - org.wildfly.security:wildfly-elytron-mechanism-scram:jar: --> [1.15.1.Final, 1.20.1.Final] - org.wildfly.security:wildfly-elytron-mechanism:jar: --> [1.20.1.Final, 1.15.1.Final] - org.wildfly.security:wildfly-elytron-password-impl:jar: --> [1.15.1.Final, 1.20.1.Final] - org.wildfly.security:wildfly-elytron-permission:jar: --> [1.15.1.Final, 1.20.1.Final] - org.wildfly.security:wildfly-elytron-provider-util:jar: --> [1.15.1.Final, 1.20.1.Final] - org.wildfly.security:wildfly-elytron-sasl-digest:jar: --> [1.15.1.Final, 1.20.1.Final] - org.wildfly.security:wildfly-elytron-sasl-external:jar: --> [1.15.1.Final, 1.20.1.Final] - org.wildfly.security:wildfly-elytron-sasl-gs2:jar: --> [1.20.1.Final, 1.15.1.Final] - org.wildfly.security:wildfly-elytron-sasl-gssapi:jar: --> [1.15.1.Final, 1.20.1.Final] - org.wildfly.security:wildfly-elytron-sasl-oauth2:jar: --> [1.15.1.Final, 1.20.1.Final] - org.wildfly.security:wildfly-elytron-sasl-plain:jar: --> [1.20.1.Final, 1.15.1.Final] - org.wildfly.security:wildfly-elytron-sasl-scram:jar: --> [1.20.1.Final, 1.15.1.Final] - org.wildfly.security:wildfly-elytron-sasl:jar: --> [1.20.1.Final, 1.15.1.Final] - org.wildfly.security:wildfly-elytron-security-manager-action:jar: --> [1.15.1.Final, 1.20.1.Final] - org.wildfly.security:wildfly-elytron-ssl:jar: --> [1.15.1.Final, 1.20.1.Final] - org.wildfly.security:wildfly-elytron-util:jar: --> [1.15.1.Final, 1.20.1.Final] - org.wildfly.security:wildfly-elytron-x500-cert-util:jar: --> [1.20.1.Final] - org.wildfly.security:wildfly-elytron-x500-cert:jar: --> [1.20.1.Final] - org.wildfly.security:wildfly-elytron-x500:jar: --> [1.20.1.Final, 1.15.1.Final] Raised by CamelZookeeperTest WARN>>> Library version mismatch found. Found mismatch for dependency com.google.errorprone:error_prone_annotations: - com.google.errorprone:error_prone_annotations:jar: --> [2.18.0, 2.11.0] Found mismatch for dependency com.google.guava:guava: - com.google.guava:guava:jar: --> [31.1-jre, 32.0.0-jre] Found mismatch for dependency com.google.j2objc:j2objc: - com.google.j2objc:j2objc-annotations:jar: --> [2.8, 1.3] Found mismatch for dependency org.checkerframework:checker: - org.checkerframework:checker-qual:jar: --> [3.33.0, 3.12.0] Raised by CamelSnakeyamlTest WARN>>> Library version mismatch found. Found mismatch for dependency com.google.errorprone:snakeyaml: - org.yaml:snakeyaml:jar: --> [1.33, 2.0]","Nicolas Filotto: Nicolas Filotto added a comment - 20/Jun/23 07:40 - edited Generally speaking, this makes me wonder if it is the right approach to align our dependencies' version to the one used in SpringBoot (what about Quarkus BTW?) especially knowing their very strict policy which is a big lock when we have third-party libraries to upgrade due to CVEs like the 2 last ones that I raised recently or to innovate like SnakeYAML (v 2 used by Camel vs v 1.33 used by SB 3.1, 2 is only planned for SB 3.2 see https://github.com/spring-projects/spring-boot/issues/35982 )."
https://issues.apache.org/jira/browse/CAMEL-19832,Test,Open,Minor,Unresolved,"4.0.0,4.1.0",None,camel-rocketmq,Novice,Unassigned,Otavio Rodolfo Piske,05/Sep/23 11:37,27/Jun/24 13:40,"RocketMQ tests fail constantly on our CI, and, sometimes, even when running locally: org.awaitility.core.ConditionTimeoutException: Assertion condition defined as a org.apache.camel.component.rocketmq.RocketMQRouteTest null within 5 seconds. at org.awaitility.core.ConditionAwaiter.await(ConditionAwaiter.java:166) at org.awaitility.core.AssertionCondition.await(AssertionCondition.java:119) at org.awaitility.core.AssertionCondition.await(AssertionCondition.java:31) at org.awaitility.core.ConditionFactory.until(ConditionFactory.java:939) at org.awaitility.core.ConditionFactory.untilAsserted(ConditionFactory.java:723) at org.apache.camel.component.rocketmq.RocketMQRouteTest.testSimpleRoute(RocketMQRouteTest.java:84) at java.base/java.lang.reflect.Method.invoke(Method.java:568) at java.base/java.util.ArrayList.forEach(ArrayList.java:1511) at java.base/java.util.ArrayList.forEach(ArrayList.java:1511) Caused by: java.util.concurrent.TimeoutException at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:204) at org.awaitility.core.Uninterruptibles.getUninterruptibly(Uninterruptibles.java:101) at org.awaitility.core.Uninterruptibles.getUninterruptibly(Uninterruptibles.java:81) at org.awaitility.core.ConditionAwaiter.await(ConditionAwaiter.java:102) ... 8 more",Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 27/Jun/24 13:40 Marking as unassigned in case someone on the community wants to look at it.
https://issues.apache.org/jira/browse/CAMEL-19681,Task,Reopened,Minor,Unresolved,None,4.x,camel-joor,Advanced,Unassigned,Otavio Rodolfo Piske,29/Jul/23 07:11,27/Jun/24 13:39,"There are a couple of tests disabled in camel-joor that need to be reviewed. They are failing with compilation errors such as: org.apache.camel.language.csimple.joor.JoorCSimpleCompilationException: csimple-joor compilation error for class: org.apache.camel.language.csimple.joor.compiled.CSimpleScript130 1 package org.apache.camel.language.csimple.joor.compiled; 2 3 import java.util.*; 4 import java.util.concurrent.*; 5 import java.util.stream.*; 6 7 import org.apache.camel.*; 8 import org.apache.camel.util.*; 9 import org.apache.camel.spi.*; 10 import static org.apache.camel.language.csimple.CSimpleHelper.*; 11 12 import org.apache.camel.language.csimple.joor.OriginalSimpleTest.*; 13 14 public class CSimpleScript130 extends org.apache.camel.language.csimple.CSimpleSupport { 15 16 Language bean; 17 18 public CSimpleScript130() { 19 } 20 21 @Override 22 public boolean isPredicate() { 23 return false ; 24 } 25 26 @Override 27 public String getText() { 28 return ""${bodyAs(Animal).getFriend?.getFriend.getName}"" ; 29 } 30 31 @Override 32 public Object evaluate(CamelContext context, Exchange exchange, Message message, Object body) throws Exception { 33 return bodyAs(message, Animal.class).getFriend().get?.getFriend().getName(); 34 } 35 } at org.apache.camel.language.csimple.joor.JoorCSimpleCompiler.doCompile(JoorCSimpleCompiler.java:107) at org.apache.camel.language.csimple.joor.JoorCSimpleCompiler.compileExpression(JoorCSimpleCompiler.java:80) at org.apache.camel.language.csimple.CSimpleLanguage$CompilationSupport.compileExpression(CSimpleLanguage.java:271) at org.apache.camel.language.csimple.CSimpleLanguage.createExpression(CSimpleLanguage.java:176) at org.apache.camel.test.junit5.CamelTestSupport.assertExpression(CamelTestSupport.java:960) at org.apache.camel.test.junit5.LanguageTestSupport.assertExpression(LanguageTestSupport.java:69) at org.apache.camel.test.junit5.LanguageTestSupport.assertExpression(LanguageTestSupport.java:76) at org.apache.camel.language.csimple.joor.OriginalSimpleTest.testBodyOGNLNullSafeToAvoidNPE(OriginalSimpleTest.java:1416) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.base/java.lang.reflect.Method.invoke(Method.java:568) at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727) at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60) at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131) at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156) at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147) at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86) at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103) at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93) at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106) at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64) at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45) at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37) at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92) at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86) at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217) at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213) at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138) at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68) at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151) at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141) at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137) at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139) at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138) at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95) at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:202) at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.executeNonConcurrentTasks(ForkJoinPoolHierarchicalTestExecutorService.java:172) at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.invokeAll(ForkJoinPoolHierarchicalTestExecutorService.java:152) at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155) at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141) at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137) at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139) at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138) at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95) at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:202) at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.invokeAll(ForkJoinPoolHierarchicalTestExecutorService.java:146) at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155) at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141) at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137) at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139) at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138) at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95) at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:202) at java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:194) at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373) at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182) at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655) at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622) at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165) Caused by: org.joor.ReflectException: Compilation error: /org/apache/camel/language/csimple/joor/compiled/CSimpleScript130.java:33: error: illegal start of expression return bodyAs(message, Animal.class).getFriend().get?.getFriend().getName(); ^ 1 error at org.joor.Compile.compile(Compile.java:105) at org.joor.Reflect.compile(Reflect.java:104) at org.joor.Reflect.compile(Reflect.java:79) at org.apache.camel.language.csimple.joor.JoorCSimpleCompiler.doCompile(JoorCSimpleCompiler.java:103) ... 66 more","Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 29/Jul/23 07:30 davsclaus explained it here: https://github.com/apache/camel/pull/10897#issuecomment-1656584800 The reason is that csimple does not support yet all functions from simple. | Claus Ibsen: Claus Ibsen added a comment - 22/Dec/23 10:16 Yes its somewhat difficult to do that, as the generateCode for this kind is complex to do so it generates java code that can be compiled."
https://issues.apache.org/jira/browse/CAMEL-19704,Task,Open,Minor,Unresolved,4.0-RC2,None,camel-xmpp,Novice,Otavio Rodolfo Piske,Otavio Rodolfo Piske,03/Aug/23 09:50,27/Jun/24 13:39,"The logs for the camel-xmpp components are full of errors that happen during test. I believe we need to look at them to remove the invalid stuff, speed up the tests and make them more reliable. To reproduce: run mvn verify on camel-xmpp component and look for the logs on the target/camel-xmpp-test.log file.","Anton Goncharov: Anton Goncharov added a comment - 22/Nov/23 15:09 - edited Hi, I'll be happy to start working on this one. I see this issue when running xmpp tests locally. After a brief look, my suggestions are: reuse the testcontainer if possible, it's quite slow to ramp up (use singleton service similar to what is used in e.g. test-infra-kafka) ensure testcontainer stops gracefully, there're timeout errors seemingly because it shuts down before the connections check the tests flows, use awaitility instead of thread.sleep, etc In addition, I see CAMEL-19706 may affect performance, but I'd tackle it separately. | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 22/Nov/23 15:12 Thank you anton-goncharov ! Feel free to start working on this one. I will assign the ticket to myself (as it cannot yet be assigned to you) to indicate that there is work in progress for this. Thanks for contributing to Camel. Looking forward to review the PR! | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 07/Dec/23 14:15 Hello, any updates about this? | Anton Goncharov: Anton Goncharov added a comment - 07/Dec/23 16:00 Hey orpiske , I'm still on it. Will get PR ready next week, I need to spend some more time with it over the weekend. | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 07/Dec/23 16:06 Cool. Thanks for the update! | Anton Goncharov: Anton Goncharov added a comment - 17/Dec/23 20:29 Hey orpiske , just to keep you posted, I'm still working on it in a fragmented manner, when time permits. Many timeout errors are XMPP-protocol specific, e.g. on route shutdown the endpoint consumer disconnects, but expects some service message that doesn't arrive. I had to dive a bit into how the Vysper XMPP works to get my head around it. So far it seems many of the errors are not avoidable due to the XMPP server implementation, and lack of ""force shutdown"" options on the XMPP component. I'll improve it where it makes sense but some parts will be dependent on CAMEL-19706 . | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 18/Dec/23 13:50 Acknowledged! Thanks for supporting us and contributing with this task anton-goncharov"
https://issues.apache.org/jira/browse/CAMEL-19706,Task,Open,Minor,Unresolved,4.0.0,None,camel-test-infra,Novice,Unassigned,Otavio Rodolfo Piske,03/Aug/23 13:09,27/Jun/24 13:39,"The test container providing support for XMPP tests is very outdated, lack support for health checks and is flaky. Ideally, we should rework the way this test container work so that it doesn't make the tests unstable. Lastly, it is also missing support for ARM and other platforms we use, which reduce our test coverage.","Hitesh C: Hitesh C added a comment - 03/Aug/23 17:27 Hi orpiske , are you suggesting in improving this particular project https://github.com/mmelko/vysper-wrapper with arm support or identifying an alternative approach altogether. | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 04/Aug/23 15:41 jainhitesh9998 hi, that's correct. We should investigate doing something similar to what we do for Artemis (building the image on our own): https://github.com/apache/camel/tree/main/test-infra/camel-test-infra-artemis/src/test"
https://issues.apache.org/jira/browse/CAMEL-19763,New Feature,Open,Minor,Unresolved,None,None,camel-openapi-java,Unknown,Unassigned,Darius Cooper,18/Aug/23 14:41,27/Jun/24 13:38,"We have a use-case where we would like to exclude certain packages from our OpenAPI JSO spec. We'd like to use the Camel RestModelConverters class, but also add some more rules. Could some public methods be added to RestModelConverters, which would be very similar to what is in Open API's ModelConverters class here : public void addConverter(ModelConverter converter) public void addPackageToSkip(String pkg) public void addClassToSkip(String cls) Would that change be acceptable? If so, we can submit a PR. Thanks.","Claus Ibsen: Claus Ibsen added a comment - 18/Aug/23 16:30 Hmm I would rather see this can be done in a more Camel way. Make RestModelConverters an interface, and have a DefaultRestModelConverters. Add those methods in the API in the interface. Make Camel lookup from registry if there is a custom RestModelConverters, and use it if present, otherwise use the default. Add in the docs about this feature, in src/main/docs. There is already RestDefinitionsResolver as interface (however it does a classpath lookup) what you should do is lookup in Registry"
https://issues.apache.org/jira/browse/CAMEL-19824,Task,Open,Minor,Unresolved,"4.0.0,4.1.0",None,camel-test-infra,Unknown,Nikita_Konovalov,Otavio Rodolfo Piske,01/Sep/23 14:46,27/Jun/24 13:37,"Calling the provider should check for Void, not for null. For some reason this patch is failing: https://github.com/apache/camel/pull/11173/files . We need to investigate.",
https://issues.apache.org/jira/browse/CAMEL-19855,Improvement,Open,Minor,Unresolved,None,None,camel-spring-boot,Unknown,Unassigned,Nicolas Filotto,13/Sep/23 07:55,27/Jun/24 13:36,"In Camel Spring Boot, we have a use case where the generated converter is too limited. Indeed by default, the complex types can only be configured using references to specific beans but in this particular case, the target type could be easily converted from a string or an integer. The goal of this improvement is to provide a way to customize generated Converters to be able to add more converters and/or improve the generated code by, for example, delegating the conversion of a string to a specific type in case the string is not a reference.",
https://issues.apache.org/jira/browse/CAMEL-19900,Task,Open,Minor,Unresolved,None,None,camel-core,Unknown,Otavio Rodolfo Piske,Otavio Rodolfo Piske,21/Sep/23 13:03,27/Jun/24 13:34,Just a task for investigating the performance of `filter()` with xpath and text expressions.,
https://issues.apache.org/jira/browse/CAMEL-19916,New Feature,Open,Minor,Unresolved,4.0.0,4.x,camel-rabbitmq,Unknown,Unassigned,Dries Van Autreve,26/Sep/23 08:54,27/Jun/24 13:33,"In Camel 4, the component camel-rabbitmq was removed in favor of spring-rabbitmq-component It seems however that not all options are supported in the new component. I was looking for mandatory , but I cannot find a replacement. (Nor there seems a way to hook in a custom Spring RabbitTemplate with own implementation for it as SpringRabbitMQEndpoint creates its own.) The use case in which this is helpful, is when there's an exchange but the routing to a queue fails (e.g. invalid routing key). It would be useful if this option is also implemented in spring-rabbitmq-component","Claus Ibsen: Claus Ibsen added a comment - 26/Sep/23 12:04 Can you look at their connection factory as you can set confirm type CachingConnectionFactory cf = new CachingConnectionFactory(); if (confirm) { cf.setPublisherConfirmType(CachingConnectionFactory.ConfirmType.CORRELATED); } | Dries Van Autreve: Dries Van Autreve added a comment - 26/Sep/23 12:33 I had a look at ConfirmType.CORRELATED , however the javadoc says: Use with CorrelationData to correlate confirmations with sent messsages. I've not really found an option to pass such an object using the spring-rabbitmq-component I notice in SpringRabbitMQProducer::processInOnly there's an invocation of the RabbitMQTemplate : t.send(ex, rk, msg); when looking further at the implementation, it will delegate to the send method with correlationData parameter begin null | Claus Ibsen: Claus Ibsen added a comment - 29/Sep/23 12:12 It would be good if you can research more how to do what you want with spring rabbitmq, and if you find out, then you are welcome to work on a PR"
https://issues.apache.org/jira/browse/CAMEL-20020,Improvement,Open,Minor,Unresolved,None,4.x,camel-mock,Unknown,Unassigned,Claus Ibsen,20/Oct/23 11:55,27/Jun/24 13:32,"There is already a bunch of methods for expectedXXX, and message .xxx. Instead of some ad-hoc here and there in contributor PRs, then a general work must be done to look at what APIs can be added to benefit some use-cases where Camel users can do body/header checks from custom Java code via Lambdas or supplier etcs. https://github.com/apache/camel/pull/11785",
https://issues.apache.org/jira/browse/CAMEL-20171,Task,Open,Minor,Unresolved,None,4.x,camel-jetty,Unknown,Unassigned,Federico Mariani,30/Nov/23 14:15,27/Jun/24 12:27,"During the upgrade to jetty 12, the following code https://github.com/apache/camel/pull/12208/files#diff-729ca1c0fa2bbb1790fbbbc3076620428756a4bf74f07e59d737981d9614f501R92 was commented since out, since seems like that is not possible to remove headers from the request anymore. We should investigate if that piece of code is really needed, and somehow restore or remove it",
https://issues.apache.org/jira/browse/CAMEL-20282,Task,Open,Minor,Unresolved,4.3.0,None,build system,Unknown,Unassigned,Pasquale Congiusti,22/Dec/23 15:12,27/Jun/24 12:26,"Release pages offer the possibility to verify the download (ie, https://camel.apache.org/releases/release-4.3.0/#keys ) however keys expected in https://downloads.apache.org/camel/KEYS is returning a 404.",
https://issues.apache.org/jira/browse/CAMEL-20428,Improvement,Open,Minor,Unresolved,None,4.x,camel-kafka,Unknown,Andrea Cosentino,Andrea Cosentino,16/Feb/24 10:39,27/Jun/24 12:25,"In this way we could for example bring the kafka.TOPIC header value from the batch exchange and store it as variable, before splitting and re-use it in the logic after the split.",
https://issues.apache.org/jira/browse/CAMEL-20807,Task,Open,Minor,Unresolved,None,None,"documentation,(1)website",Unknown,Unassigned,Luca Burgazzoli,27/May/24 13:15,27/Jun/24 12:18,The list of spring boot properties listed in https://camel.apache.org/components/next/languages/tokenize-language.html does not seems to be right as it includes a number of unrelated properties i.e. from camel-main:,Claus Ibsen: Claus Ibsen added a comment - 29/May/24 09:07 the tokenizer is in core module and then the website has some javascript code to write that table and thus it grabs everything
https://issues.apache.org/jira/browse/CAMEL-20809,Task,Open,Minor,Unresolved,4.7.0,4.x,camel-core,Unknown,Otavio Rodolfo Piske,Otavio Rodolfo Piske,28/May/24 08:55,27/Jun/24 12:17,There's a chance we could reduce or delay unnecessary allocations by not creating message headers when the intention is just to check if headers are present .,Claus Ibsen: Claus Ibsen added a comment - 27/Jun/24 12:17 Take a look in camel-jms as I think it populate headers when headers are requested. It was original design in Camel that heads are lazy created. However most components populate some headers so the lazy does not make very much sense.
https://issues.apache.org/jira/browse/CAMEL-20874,Task,Open,Minor,Unresolved,None,4.x,build system,Unknown,Unassigned,Aurélien Pupier,13/Jun/24 11:52,27/Jun/24 12:14,"Currently, it is possible to play unit tests for specific component/group of components by providing a comment /component-test on a Pull request. It would be convenient to have the possibility to do it for Integration Tests; For instance with a comment: /compontent-it-test Technical points: are all integration tests can currently run on GitHub Actions? do we have enough resources available on GitHub for that?",
https://issues.apache.org/jira/browse/CAMEL-20875,Task,Open,Minor,Unresolved,None,None,build system,Unknown,Unassigned,Aurélien Pupier,13/Jun/24 11:58,27/Jun/24 12:13,"Currently there is the possibility to trigger component test by providing a comment on a PR with /component-test. it would be convenient to start the test automatically. Maybe easier starting with Dependabot as there is the name of the updated dependency in the message. Not necessarily easy to kno all of the component directly impacted. Currently what I'm doing manually is: pick the artifact id of modified dependency do a search on language Maven pom, for instance https://github.com/search?q=repo%3Aapache%2Fcamel+huaweicloud-sdk-core+language%3A%22Maven+POM%22&type=code look for components affected provide the comment Maybe as a first iteration, providing a link in the generated comment message to the search URL can help to save few clicks",
https://issues.apache.org/jira/browse/CAMEL-11226,Improvement,Open,Minor,Unresolved,2.19.0,Future,camel-salesforce,Unknown,Unassigned,Zoran Regvart,03/May/17 09:06,16/Jun/24 14:09,The current Velocity based templates for generating Salesforce DTOs are hard to maintain. We should switch to using Java code generator such as JavaPoet to make the code easier to follow and test. With this we could also consider implementing annotation processor along with Maven plugin to generate DTOs.,"Luca Burgazzoli: Luca Burgazzoli added a comment - 03/May/17 09:19 Agree! btw, we have forge roaster already used for spring boot starters auto generator so it would be nice to standardize on one tool (whatever it is) so we can eventually have utility classes to cope with code styles, conventions & co. | Jeremy Ross: Jeremy Ross added a comment - 17/May/21 23:54 Makes sense to wait until this is done before redoing templates."
https://issues.apache.org/jira/browse/CAMEL-15709,New Feature,Open,Minor,Unresolved,None,Future,camel-azure,Moderate,Unassigned,Tibin Lukose,19/Oct/20 21:53,16/Jun/24 14:07,"A producer for azure log analytics for forwarding the logs, similar to what we have for splunk HEC","Claus Ibsen: Claus Ibsen added a comment - 20/Oct/20 09:32 Anyone is welcome to work on this https://camel.apache.org/manual/latest/contributing.html | Tibin Lukose: Tibin Lukose added a comment - 20/Oct/20 10:02 Yes, i will contribute as my first commit to amazing camel project | Claus Ibsen: Claus Ibsen added a comment - 24/Jul/23 17:35 Any update on this | Claus Ibsen: Claus Ibsen added a comment - 25/Dec/23 18:53 Any update"
https://issues.apache.org/jira/browse/CAMEL-16147,Improvement,Open,Minor,Unresolved,None,4.x,camel-core,Unknown,Unassigned,Claus Ibsen,05/Feb/21 05:55,16/Jun/24 10:57,"Add description attribute for documentation, which the tooling can grab and use for metadata generation, so we can store this information in the component json file, so we now know about those header keys and documentation. We can then generate this in the adoc doc files.",
https://issues.apache.org/jira/browse/CAMEL-17254,New Feature,Open,Minor,Unresolved,None,Future,camel-jfr,Unknown,Unassigned,Claus Ibsen,01/Dec/21 06:48,16/Jun/24 10:54,"It can be beneficial to allow JFR to stream metrics once per second with aggregated metrics for context / per route. When analysing the JVM performance then you would like to know the ""load"" from Camel in terms of number of messages inflight at a given time etc.",
https://issues.apache.org/jira/browse/CAMEL-17305,New Feature,Open,Minor,Unresolved,None,4.x,None,Unknown,Unassigned,Claus Ibsen,08/Dec/21 19:55,16/Jun/24 10:53,Like we have in camel-platform-http to make it universal across http server components so we can capture the endpoints that Camel exposes. This allows us to report this to end users so they know what url they can call.,
https://issues.apache.org/jira/browse/CAMEL-18605,Wish,Open,Minor,Unresolved,None,Future,camel-xslt,Unknown,Unassigned,Raymond,11/Oct/22 13:59,16/Jun/24 10:47,"For XSLT and XPath (as a language in Camel) it's possible to set Saxon as parser. Saxon is used by default in XQuery, but not in XSLT and XPath. I see a lot of time that developers turn on Saxon by default. The question is why won't we use Saxon as the default everywhere. Advantages: 1. Saxon is the industry standard. It's actively developed and used by most Java developers. 2. It's already used by most Camel developers (at least those with some knowledge on XML processing). 3. Actively developed with support for XPATH/XQUERYXSLT 3.0 4. The highest level of conformance to the W3C specifications. 5. All processing whether it's Xpath / Xquery / XSLT will use the same parser and will have same results. 6. No need to add additional configuration 7. No need for an XSLT-Saxon and XSLT component 8. Friendlier for newcomers to XML processing. (less confusion). Disadvantage: 1. Bigger dependency 2. Major change (can break things, different output)",
https://issues.apache.org/jira/browse/CAMEL-18814,Improvement,Open,Minor,Unresolved,None,None,None,Unknown,Unassigned,Claus Ibsen,14/Dec/22 14:54,16/Jun/24 10:45,"// camel-k: language=js import { faker } from ""./js/node_modules/@faker-js/faker/dist/esm/index.mjs"" ; const greet = (exchange, message, headers, body) => { return { hello: faker.name.fullName() }; }; const greetByName = (exchange, message, headers, body) => { return { hello: headers.name }; }; const call = (e, callback) => { const result = callback( e, e.getMessage(), e.getMessage().getHeaders(), e.getMessage().getBody() ); e.getOut().setBody(result); }; from( ""direct:greet"" ).process((e)=>call(e, greet)).marshal().json(); from( ""direct:greetByName"" ).process((e)=>call(e,greetByName)).marshal().json(); I would like `process` to fire the call to a js function with all the params (Exchange, Message, Headers, Body) and accept the result as is instead of having manually to do it, like in the call function Is there a way to include this call function as part of the process DSL or even better add a new js process version?",Claus Ibsen: Claus Ibsen added a comment - 10/Jul/23 05:35 camel run https://gist.github.com/hguerrero/7757de49e4eb3f8c96e3e3756ddf02f9
https://issues.apache.org/jira/browse/CAMEL-19057,Improvement,Open,Minor,Unresolved,None,4.x,camel-cxfrs,Unknown,Freeman Yue Fang,Freeman Yue Fang,15/Feb/23 20:49,16/Jun/24 08:07,So we can easily define the cxfrs endpoint java code bean in spring boot runtime,
https://issues.apache.org/jira/browse/CAMEL-19611,Test,Open,Minor,Unresolved,"4.0-M3,4.0-RC1",None,camel-aws-xray,Unknown,Unassigned,Otavio Rodolfo Piske,17/Jul/23 14:42,16/Jun/24 08:02,"The test ABCRoute is failing constantly with the following reason: [ERROR] Failures: [ERROR] ABCRouteTest.testRoute:56->CamelAwsXRayTestSupport.verify:96 Incorrect name of subsegment. Expected seda:d but found: seda:d Expected: is ""direct:a"" but: was ""seda:d""",
https://issues.apache.org/jira/browse/CAMEL-19657,New Feature,Open,Minor,Unresolved,None,Future,camel-snmp,Unknown,Unassigned,Tobias Kleinschmidt,26/Jul/23 08:47,16/Jun/24 08:01,"The SNMP component currently only supports GET-REQUEST, GETNEXT-REQUEST and TRAP packages. Add support for SET-REQUEST packages.",
https://issues.apache.org/jira/browse/CAMEL-20126,Improvement,Open,Minor,Unresolved,None,4.x,camel-jbang,Unknown,Unassigned,Claus Ibsen,19/Nov/23 09:52,16/Jun/24 07:54,"Currently it just use some basic java string search/replace. But we need more flexibility and it would be worth to use a template engine like freemarker, thymaleaf, velocity or something else.",
https://issues.apache.org/jira/browse/CAMEL-20133,Task,Open,Minor,Unresolved,None,4.x,build system,Unknown,Andrea Cosentino,Andrea Cosentino,20/Nov/23 14:01,16/Jun/24 07:54,"regen_bot branch is polluted with multiple branches, we need to go through the active branches and create a dedicated regen_bot_version branch from the last tag. Otherwise we'll have invalid PRs.",
https://issues.apache.org/jira/browse/CAMEL-20443,Improvement,Open,Minor,Unresolved,None,None,documentation,Novice,Unassigned,Otavio Rodolfo Piske,21/Feb/24 09:36,16/Jun/24 07:46,"We have lots of FAQs that are specific to certain components (i.e., for Jetty) that create a lot of clutter in the main FAQ. These FAQs should be moved to their component pages.",
https://issues.apache.org/jira/browse/CAMEL-18277,Test,Open,Minor,Unresolved,3.18.0,Future,"camel-google-pubsub,tests",Unknown,Jiri Ondrusek,Jiri Ondrusek,18/Jul/22 13:18,14/Jun/24 11:27,"I'm working on test coverage of camel-pubsub extension in Camel-quarkus ([issue| https://github.com/apache/camel-quarkus/issues/3910 ).] I noticed: There is no easy way of running integration tests with the real account. It would be nice to have an option to export for example a several env. properties (like export GOOGLE_APPLICATION_CREDENTIALS=.. and export GOOGLE_PROJECT_ID=...) and allow execution of the tests with the real account. MessageOrderingIT does not work with the real cloud account. You can see an exception, which is probably caused by the use of regional endpoint. java.util.concurrent.ExecutionException: com.google.api.gax.rpc.UnauthenticatedException: io.grpc.StatusRuntimeException: UNAUTHENTICATED: Request had invalid authentication credentials. Expected OAuth 2 access token, login cookie or other valid authentication credential. See https: //developers.google.com/identity/sign-in/web/devconsole-project. at com.google.common.util.concurrent.AbstractFuture.getDoneValue(AbstractFuture.java:588) at com.google.common.util.concurrent.AbstractFuture.get(AbstractFuture.java:567) at com.google.api.core.AbstractApiFuture.get(AbstractApiFuture.java:55) at org.apache.camel.component.google.pubsub.GooglePubsubProducer.send(GooglePubsubProducer.java:117)",
https://issues.apache.org/jira/browse/CAMEL-20183,Improvement,Open,Minor,Unresolved,None,4.x,camel-jbang,Unknown,Unassigned,Claus Ibsen,04/Dec/23 10:00,12/Jun/24 14:32,"Body (ArrayList) (size: 5 bytes: 224) [ [Jack Dalton, 115, mad at Averell] , [Joe Dalton, 105, calming Joe] , [William Dalton, 105, keeping Joe from killing Averell] , [Averell Dalton, 80, playing with Rantanplan], [Lucky Luke, 120, capturing the Daltons] ] There are 5 elements, and they should be separated so its prettier",Aurélien Pupier: Aurélien Pupier added a comment - 12/Jun/24 14:32 Can you precise in which cases this kind of list is dumped?
https://issues.apache.org/jira/browse/CAMEL-20784,Improvement,Open,Minor,Unresolved,4.7.0,4.x,camel-test,Unknown,Jiri Ondrusek,Jiri Ondrusek,17/May/24 12:08,11/Jun/24 14:19,"I introduced an wrong condition into the CamelTestSupport a long time ago, The issue can not be detected, because camel-quarkus overrode the logic in its own class. The refactor https://github.com/apache/camel/commit/427c19faa5d2e5a3534f244e30355ec7134422e5 of that code revealed that mistake. The proper condition for the Camel-quarkus test is not existence of annotation org.apache.camel.quarkus.test.CamelQuarkusTest (which does not exist) , but inheritance from org.apache.camel.quarkus.test.CamelQuarkusTestSupport Ideally the fix would use clazz.isAssignableFrom(CamelQuarkusTestSupport.class). Unfortunately Camel does not know about CamelQuarkusTestSupport , therefore it hoas to be solved differently.",
https://issues.apache.org/jira/browse/CAMEL-19727,Dependency upgrade,Open,Minor,Unresolved,None,None,None,Unknown,Unassigned,Claus Ibsen,09/Aug/23 07:36,03/Jun/24 12:57,"There are both v3 and v4 (v4 is kotlin, and v3 is java). We should try to align transitive dependencies to a single version if possible. Also we should try to remove okhttp client if possible",Claus Ibsen: Claus Ibsen added a comment - 09/Aug/23 07:36 fyi ppalaga
https://issues.apache.org/jira/browse/CAMEL-20817,Improvement,Open,Minor,Unresolved,None,4.x,camel-core,Unknown,Unassigned,Claus Ibsen,30/May/24 11:12,30/May/24 13:23,When using PluginManager then the plugins can be added but these plugins are not started when camel starts and thus they can be in invalid state.,
https://issues.apache.org/jira/browse/CAMEL-19869,Task,Open,Minor,Unresolved,4.0.0,None,camel-infinispan,Unknown,Unassigned,Nicolas Filotto,14/Sep/23 08:21,19/May/24 12:03,"The integration tests InfinispanRemoteAggregationRepositoryIT and InfinispanRemoteAggregationRepositoryOperationsIT are failing on the CI, so they should be investigated and fixed. [ERROR] Errors: [ERROR] InfinispanRemoteAggregationRepositoryIT.checkAggregationFromOneRoute:60 » NoSuchMethod 'org.infinispan.client.hotrod.configuration.ConfigurationBuilder org.infinispan.client.hotrod.configuration.ConfigurationBuilder.read(org.infinispan.client.hotrod.configuration.Configuration)' [ERROR] InfinispanRemoteAggregationRepositoryOperationsIT.setupResources:59 » NoSuchMethod 'org.infinispan.client.hotrod.configuration.ConfigurationBuilder org.infinispan.client.hotrod.configuration.ConfigurationBuilder.read(org.infinispan.client.hotrod.configuration.Configuration)' NB: The same tests seem to pass on the main branch",
https://issues.apache.org/jira/browse/CAMEL-18597,New Feature,Open,Minor,Unresolved,None,Future,camel-micrometer,Unknown,Unassigned,Marco Bungart,08/Oct/22 15:24,19/May/24 09:59,"I would like to be able to monitor the state of my Circuit Breakers, as well as related elements, e.g. ThrottlingExceptionRoutePolicy. Thus, the state of such components should be exported in a standardized manner (e.g. through micrometer), so I can automate monitoring and altering.","Claus Ibsen: Claus Ibsen added a comment - 01/Nov/22 11:32 How should the state of a circuit breaker be represented in micrometer? As a gauge (can only have a single value), so we can then use the value to represent state (open, closed, half_open). But without as much more details. You can find information for circuit breakers in JMX today (as mbeans), and the Camel CLI can also output state in 3.20 onwards. | Marco Bungart: Marco Bungart added a comment - 01/Nov/22 12:34 This won't be possible since micrometer-metrics does not support String values. | Claus Ibsen: Claus Ibsen added a comment - 01/Nov/22 12:37 Then a numeric value can be used, 1, 2, 3 etc | Marco Bungart: Marco Bungart added a comment - 01/Nov/22 12:39 - edited Or a value per breaker and state: <breaker-name>_open , <breaker-name>_half_open , <breaker-name>_closed , and set the one value to 1 that is active, all others to 0 . | Marco Bungart: Marco Bungart added a comment - 01/Nov/22 12:43 Another recomendation from the micrometer team would be to use tags instead of separate values: https://github.com/micrometer-metrics/micrometer/issues/1033#issuecomment-442965567 | Marco Bungart: Marco Bungart added a comment - 01/Nov/22 14:03 - edited I opened a simliar issue against smallrye-health . The implementation here should probably be aligned with the implementation in smallrye-health. Here is the corresponding PR in smallrye-health."
https://issues.apache.org/jira/browse/CAMEL-19578,New Feature,Open,Minor,Unresolved,None,Future,"camel-aws2,(2)camel-azure,camel-google-storage",Unknown,Unassigned,Hitesh C,05/Jul/23 09:05,18/May/24 15:55,Camel Minio has the following two operations in relation to presigned urls createDownloadLink createUploadLink Other mentioned object storage have functionality of createDownloadLink The proposal is to add the functionality of createDownloadLink(if missing) and createUploadLink in all the object storage components where they are supported by the underlying libraries and rename them into a single operation called createPresignedUrl The operation configuration upload(PUT) or download(GET) can be supplied through headers.,
https://issues.apache.org/jira/browse/CAMEL-20681,Improvement,Open,Minor,Unresolved,None,4.x,camel-jbang,Unknown,Unassigned,Claus Ibsen,16/Apr/24 10:07,04/May/24 09:21,"To make it easy to use a quarkus specific datasource, so users can build a prototype quickly and then later export to CEQ. https://stackoverflow.com/questions/78328521/run-camel-k-jdbc-locally-with-jbang",Claus Ibsen: Claus Ibsen added a comment - 26/Apr/24 09:36 You can use camel run --runtime=quarkus and it runs inside quarkus in 4.6 onwards. But you need to add the dependencies for the database etc. | Claus Ibsen: Claus Ibsen added a comment - 04/May/24 06:15 And the same for SB https://camel.zulipchat.com/#narrow/stream/352237-camel-jbang/topic/Missing.20datasource
https://issues.apache.org/jira/browse/CAMEL-19524,Task,Open,Minor,Unresolved,4.0.0,None,"camel-infinispan,(1)tests",Novice,Unassigned,Otavio Rodolfo Piske,28/Jun/23 08:24,30/Apr/24 07:52,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities. Ideally we should replace these with: Awaitility Java's native syncronization mechanism (Latches, Phasers, Locks, etc) Nothing (i.e.; in some cases the sleep can simply be removed)",
https://issues.apache.org/jira/browse/CAMEL-19522,Task,Open,Minor,Unresolved,4.0.0,None,"camel-http,(2)camel-http-common,tests",Novice,Unassigned,Otavio Rodolfo Piske,28/Jun/23 08:23,29/Apr/24 04:28,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities. Ideally we should replace these with: Awaitility Java's native syncronization mechanism (Latches, Phasers, Locks, etc) Nothing (i.e.; in some cases the sleep can simply be removed)",
https://issues.apache.org/jira/browse/CAMEL-20654,Improvement,Open,Minor,Unresolved,None,4.x,camel-spring-redis,Unknown,Unassigned,Claus Ibsen,05/Apr/24 10:57,26/Apr/24 11:01,"See https://github.com/apache/camel-quarkus/issues/5962 We can make Camel able to auto configure a redis template via configuration and use the new @bean generator for tooling support. Then all of Camel can use this. Just need to ensure we use a camel specific name, something ala camel.component.redis-template.xxx","Claus Ibsen: Claus Ibsen added a comment - 26/Apr/24 11:01 It seems that camel-spring-redis dont have configurations for different redis servers cluster/sentinel/standalone, and that it lacks some options to configure this."
https://issues.apache.org/jira/browse/CAMEL-20390,New Feature,Open,Minor,Unresolved,None,4.x,None,Unknown,Unassigned,Otavio Rodolfo Piske,04/Feb/24 08:20,13/Apr/24 07:27,Create a component for interacting with the Zulip API .,
https://issues.apache.org/jira/browse/CAMEL-19542,Task,Open,Minor,Unresolved,4.0.0,None,"camel-sjms,tests",Novice,Vaishnavi R,Otavio Rodolfo Piske,28/Jun/23 08:41,01/Apr/24 04:37,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities. Ideally we should replace these with: Awaitility Java's native syncronization mechanism (Latches, Phasers, Locks, etc) Nothing (i.e.; in some cases the sleep can simply be removed)",
https://issues.apache.org/jira/browse/CAMEL-19469,Improvement,Open,Minor,Unresolved,"3.20.5,4.0-M3",None,camel-opentelemetry,Unknown,Unassigned,James Netherton,19/Jun/23 09:00,22/Mar/24 09:06,"OpenTelemetry enables you to trace arbitrary method invocations by tagging them with the @WithSpan annotation: https://opentelemetry.io/docs/instrumentation/java/automatic/annotations/#creating-spans-around-methods-with-withspan For some scenarios, the tracing context does not seem to get propagated and the resulting spans end up being disassociated. For example: from(""timer:tick?period=5s) .process( ""myProcessor"" ); public class MyProcessor implements Processor { @WithSpan @Override public void process(Exchange exchange) { // Useful work here... } } This results in 2 spans. One for timer:tick & another for MyProcessor. The problem is that the parent span for MyProcessor is not set, so they appear as 2 distinct traces. There is a workaround where you can configure the route like this and the span hierarchy ends up being correct: from( ""timer:tick?period=5s"" ) .to( ""direct:start"" ); from( ""direct:start"" ) .process( ""myProcessor"" ); There's some more background in the original issue reported on Camel Quarkus: https://github.com/apache/camel-quarkus/issues/4981 There's also a reproducer project here: https://github.com/jamesnetherton/camel-opentelemetry-demo","Claus Ibsen: Claus Ibsen added a comment - 21/Jun/23 11:44 The @WithSpan is not a Camel annotation so not sure how Camel should deal with this. | John Poth: John Poth added a comment - 21/Mar/24 16:49 I'm also curious about the use case. The OpenTelemetryTracingStrategy already creates a Span for Processors. It seems adding @WithSpan would just create another identical Span. Unfortunately, naively putting, // Some comments here from(""timer:tick?period=5s) .process( ""myProcessor"" ); public class MyProcessor implements Processor { @WithSpan @Override public void process(Exchange exchange) { // Useful work here... } } In a Unit test does not reproduce the issue and the Context is correctly propagated. | James Netherton: James Netherton added a comment - 22/Mar/24 09:06 The OpenTelemetryTracingStrategy already creates a Span for Processors True, but that wasn't the case when this issue was created. So this issue probably needs a retest / reassessment."
https://issues.apache.org/jira/browse/CAMEL-18855,Improvement,Open,Minor,Unresolved,"3.20.0,(2)4.4.0,4.5.0",None,tests,Novice,Unassigned,Otavio Rodolfo Piske,03/Jan/23 11:51,21/Mar/24 12:46,Our tests are very slow to run. We need to investigate if using an in-memory filesystem can help them run faster: https://github.com/marschall/memoryfilesystem https://github.com/google/jimfs,
https://issues.apache.org/jira/browse/CAMEL-20015,Improvement,Open,Minor,Unresolved,None,None,camel-core,Unknown,Otavio Rodolfo Piske,Otavio Rodolfo Piske,19/Oct/23 09:19,21/Mar/24 12:40,"As part of CAMEL-15105 we decoupled the ExtendedExchange from the AbstractExchange. This helped us reduce the incidence of type polution problems, cleanup and simplify the code. However, there's still many cases of cyclic dependencies between these two types. We should move the handling of the internal APIs fully to the extension class.",
https://issues.apache.org/jira/browse/CAMEL-16187,Improvement,Open,Minor,Unresolved,3.7.2,4.x,tooling,Unknown,Unassigned,Vladimír Váša,11/Feb/21 18:40,14/Mar/24 13:50,"Hi, I discovered this great tool (camel-restdsl-openapi-plugin) two days ago. It's almost perfect. I have only one suggestion for improvement: Actually the plugin is generating ""controller"" like class with code similar to: rest () .get( ""/somepath"" ) .id( ""operationIdFromOpenAPI"" ) .produces( ""application/json"" ) .to( ""direct:operationIdFromOpenAPI"" ); And ""user"" can continue route with: from(direct:operationIdFromOpenAPI)... Problem: The problem occurs during the change operationId in next version of OpenAPI definition. It have to be manually checked. Improvement: It would be very nice if the plugin generated an enum of operationIds from the OpenAPI definition. Something like: public enum ApiOperation { OPERATION_ID_1( ""operationId1"" ), ANOTHER_OPERATION_ID( ""anotherOperationId"" ); private final String value; // ... constructor, toString... And route with: ...to( ""direct:"" + ApiOperation.OPERATION_ID_1); With best regards Vladimir","Claus Ibsen: Claus Ibsen added a comment - 14/Mar/24 13:50 This would only be for Java DSL, the tool can output for XML and YAML also"
https://issues.apache.org/jira/browse/CAMEL-20553,Task,Open,Minor,Unresolved,"4.4.0,4.5.0",4.x,camel-amqp,Novice,Unassigned,Otavio Rodolfo Piske,12/Mar/24 09:46,12/Mar/24 13:57,"When reviewing the PR for CAMEL-20521 I noticed that the test library for camel-amqp is not very extensive. Although that component is built on top of camel-jms (which is battle tested for many years and has an extensive library of tests), we may be lacking test coverage in a few areas that are specific to AMQP or for which the behavior and/or features don't align 1-to-1 with those implemented in camel-jms. As such, this is a tracking ticket to identify those areas and implement tests for these edge cases as needed. Obs.: these should focus on easily testable items that could be automated and handled in the ASF CI. Large scale, performance and others should be handled on a per-case basis.",
https://issues.apache.org/jira/browse/CAMEL-19807,New Feature,Open,Minor,Unresolved,None,4.x,camel-jbang,Unknown,Claus Ibsen,Claus Ibsen,30/Aug/23 05:40,10/Mar/24 17:17,"Today its embedded in the camel-xml-io-dsl, we should move this logic to a new camel-xml-io-legacy-dsl and have the current logic from camel-kamelet-main in there as well, which is the logic that will post process the parsed XML to build beans with spring bean factory and whatever we will use for OSGi (maybe pojosr) This also means that camel-jbang needs to be able to detect and use this JAR when detected those legacy XML files.",
https://issues.apache.org/jira/browse/CAMEL-20527,Task,Open,Minor,Unresolved,None,None,"build system,(1)tooling",Unknown,Unassigned,Otavio Rodolfo Piske,06/Mar/24 15:19,06/Mar/24 15:20,"There are many places where we consume metadata directly from the source code and use it to generate json, runtime metadata, catalog files, configurators, and much more. In some cases this code is not sanitized, and as such, may suffer from problems where invalid characters are used on those Strings. We should implement sanitization for those strings to avoid problems such as those on CAMEL-20518 .",
https://issues.apache.org/jira/browse/CAMEL-20141,Improvement,Open,Minor,Unresolved,None,4.x,camel-joor,Unknown,Claus Ibsen,Claus Ibsen,21/Nov/23 12:56,04/Mar/24 06:17,"If you run this in --dev mode and change code, then the inlined bean script should reload the newly compiled classes https://github.com/apache/camel-kamelets-examples/tree/main/jbang/bean-inlined-code","Claus Ibsen: Claus Ibsen added a comment - 11/Dec/23 20:08 - edited TODO: move multicompile into camel-joor so it can be shared and reused for both modules. DONE | Claus Ibsen: Claus Ibsen added a comment - 12/Dec/23 13:56 This is tricky so lets at first get first set of work merged, and then if time later try to find out updated classloading"
https://issues.apache.org/jira/browse/CAMEL-20412,Improvement,Open,Minor,Unresolved,None,4.x,camel-knative,Unknown,Unassigned,Luca Burgazzoli,13/Feb/24 08:25,17/Feb/24 09:22,"When the camel-knative was first created as part of the camel-k project, knative was supposed to support different transports hence the component was designed with that in mind and a number of SPI were introduced to abstract the component from the specific transport. However as today, Knative is http only so we can remove the abstractions and make the code simpler.",
https://issues.apache.org/jira/browse/CAMEL-20395,Test,Open,Minor,Unresolved,None,4.x,camel-coap,Unknown,Unassigned,Claus Ibsen,08/Feb/24 09:51,09/Feb/24 05:46,"See comment https://github.com/apache/camel/pull/12769#issuecomment-1913517747 This requires some investigations as the test code is big, ugly and complex. Don't build giant tests with many routes in one class. Harder to investigate one aspect when a lot of other stuff is setup as well.",
https://issues.apache.org/jira/browse/CAMEL-20374,Test,Open,Minor,Unresolved,4.4.0,4.x,camel-google,Unknown,Unassigned,Claus Ibsen,28/Jan/24 07:53,08/Feb/24 23:40,Since these changes https://ci-builds.apache.org/job/Camel/job/Camel%20JDK17/job/main/1557/,"Brice Frisco: Brice Frisco added a comment - 08/Feb/24 15:06 I noticed this failing test when working https://issues.apache.org/jira/browse/CAMEL-15252 . I will work on fixing this first. | Brice Frisco: Brice Frisco added a comment - 08/Feb/24 23:37 - edited This test is failing due to a bug in the `com.google.cloud:google-cloud-pubsub` library which was introduced in versions >= 1.126.0. This bug only affects the Pub/Sub emulator that is used for running the test. I have opened an issue with Google here: https://issuetracker.google.com/issues/324482163 I have also created a simple reproducer which demonstrates the issue: https://github.com/bricefrisco/pubsub-emulator-ordering-reproducer I was not able to find any workaround, and unless someone else is able to find one then this test will have to remain disabled until the bug with the library is fixed."
https://issues.apache.org/jira/browse/CAMEL-18569,Improvement,Open,Minor,Unresolved,3.18.2,None,camel-smpp,Unknown,Unassigned,Ilham Elyazov,29/Sep/22 12:07,22/Dec/23 12:47,"Currently, SmppConsumer creates session with static variables. In connect and bind method, it uses BIND_RX, NPI, and TON. This prevents usage of other binding types, NPI and TON options.",Andrea Cosentino: Andrea Cosentino added a comment - 29/Sep/22 12:10 You're welcome to work on a Pull request if you have time. | Claus Ibsen: Claus Ibsen added a comment - 22/Dec/23 12:47 How would other bind types help in the consumer? BIND_RX is for receiving. There are only these types receiver (BIND_RX) - receive only transmitter (BIND_TX) - transmit only transceiver (BIND_TRX) - receive and transmit
https://issues.apache.org/jira/browse/CAMEL-19623,Sub-task,Open,Minor,Unresolved,None,4.x,camel-jbang,Unknown,Unassigned,Claus Ibsen,19/Jul/23 16:35,22/Nov/23 20:00,This requires jkube to make it possible to generate yaml manifest for health probes for general apps (they have special for SB or Quarkus).,
https://issues.apache.org/jira/browse/CAMEL-18561,Improvement,Open,Minor,Unresolved,3.18.2,None,camel-knative,Moderate,Unassigned,Zineb Bendhiba,27/Sep/22 08:51,14/Nov/23 13:31,"In camel-quarkus, we need to add those classes for reflection. a goal would be to avoid that. There's a discussion here around `@Configurer` usage : https://github.com/apache/camel-quarkus/pull/3705",
https://issues.apache.org/jira/browse/CAMEL-18486,Test,Open,Minor,Unresolved,3.19.0,None,camel-xchange,Novice,Unassigned,Jiri Ondrusek,08/Sep/22 11:31,14/Nov/23 13:30,"During implementation of https://issues.apache.org/jira/browse/CAMEL-18484 I had a problem with the test AccountProducerTest#testFundingHistory . Test works when using real account, but once I added a wiremock recording server to catch communication, I got org.knowm.xchange.exceptions.ExchangeException: API-key format invalid. (HTTP status code: 400) I'm not sure why this is happening. It would be nice to solve this problem and once it works, enable this test for the mocked testing (it is disabled with a comment now)",
https://issues.apache.org/jira/browse/CAMEL-18709,Improvement,Open,Minor,Unresolved,3.14.2,None,"camel-hl7,(1)camel-mllp",Unknown,Unassigned,Michael Jensen Garde,10/Nov/22 09:24,14/Nov/23 13:21,"Hi I have noticed some discrepancies between the HL7 component and the MLLP component in how the HL7 Sending Application message header (MSH-3) is extracted from an HL7 message and saved in their respective Camel exchange headers. In short The MSH-3 header may contain 3 components separated by ""hats"" (^) namespace id^universal id^universal id type Here is a couple of examples of how the two Camel components interpret these headers: (1) HL7 message MSH-3: UNIVERSAL_ID Camel exchange headers: CamelHL7SendingApplication -> UNIVERSAL_ID CamelMllpSendingApplication -> UNIVERSAL_ID (2) HL7 message MSH-3: ^UNIVERSAL_ID Camel exchange headers: CamelHL7SendingApplication -> null CamelMllpSendingApplication -> ^UNIVERSAL_ID (3) HL7 message MSH-3: ^UNIVERSAL_ID^TYPE Camel exchange headers: CamelHL7SendingApplication -> null CamelMllpSendingApplication -> ^UNIVERSAL_ID^TYPE So... I'm not entirely sure what expected behaviour should be. We expected to use the CamelHL7SendingApplication exchange header for validating the sending application Universal Id but as of now we can't really trust it. Similarly CamelMllpSendingApplication isn't useful for validating the Universal Id, otherwise we need to do a manual split of the exchange header and the we would rather just have a Terser do it for us instead. So right now, we just do this instead: private static String getSendingSystemUniversalId(Message hl7Message) throws HL7Exception { Terser terser = new Terser(hl7Message); return terser.get( ""MSH-3-2"" ); } Link to the MSH-3 standard: https://hl7-definition.caristix.com/v2/HL7v2.8/Fields/MSH.3",
https://issues.apache.org/jira/browse/CAMEL-16435,Improvement,Open,Minor,Unresolved,"3.8.0,3.9.0",None,None,Moderate,Unassigned,lyndonmiao,31/Mar/21 02:06,14/Nov/23 12:53,"In current SMN component, we get endpoint of the service using the SmnRegion.valueOf(region).getEndpoint() method in huaweicloud-sdk-smn-3.0.32, while the SmnRegion.valueOf() method restricts the region to Huawei Public Cloud regions. In some situation, sunch as Huwei Private Cloud, the regions are differernt from those in Public Cloud, and we cannot use the method anymore, so we need to customize the endpoint address. We can add a new parameter In SMN component , which can enable users to use a custom SMN endpoint.",Claus Ibsen: Claus Ibsen added a comment - 31/Mar/21 05:08 You are welcome to work on a PR
https://issues.apache.org/jira/browse/CAMEL-16191,Improvement,Open,Minor,Unresolved,3.8.0,None,None,Novice,Unassigned,Jiri Ondrusek,12/Feb/21 11:55,14/Nov/23 12:53,It is possible to use nitrite with for example jackson serializerinstead of default java serialization. (See https://github.com/nitrite/nitrite-java/blob/master/nitrite/src/main/java/org/dizitart/no2/mapper/JacksonMapper.java and https://github.com/nitrite/nitrite-java/issues/17#issuecomment-310963459 ) It would be nice to enhance configuration of camel-nitrite to use different serializer.,"Claus Ibsen: Claus Ibsen added a comment - 02/Sep/22 17:39 Jiri any update on this or we can abandon this | Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 14/Nov/23 12:53 Checked with Jiri, he is not working on it and told me to unassign it from him."
https://issues.apache.org/jira/browse/CAMEL-15912,New Feature,Open,Minor,Unresolved,None,Future,camel-pdf,Unknown,Unassigned,Dmitry Volodin,02/Dec/20 07:13,14/Nov/23 12:50,There are 14 standard fonts provided OOB and not able to load custom fonts from file in camel-pdf component Custom fonts with Apache PDFBox component,"Claus Ibsen: Claus Ibsen added a comment - 02/Sep/22 17:24 Anyone has such a need, then welcome to help"
https://issues.apache.org/jira/browse/CAMEL-20027,Improvement,Open,Minor,Unresolved,None,4.x,camel-file,Unknown,Unassigned,Claus Ibsen,21/Oct/23 10:43,21/Oct/23 10:43,"The changed that causes some problems has been reverted. See CAMEL-20023 . For users that want the ""new broken behaviour"" we could have a new option to set a minimum-wait-time. This can be needed for users that copy files with preserve old timestamp, and the copy operation is slow and still in progress. Then the minimum-wait-time can be used to keep cycling and detecting file changes (size) as the timestamp is preserved and stay constant.",
https://issues.apache.org/jira/browse/CAMEL-16501,Improvement,Open,Minor,Unresolved,None,4.x,camel-jpa,Unknown,Unassigned,Claus Ibsen,14/Apr/21 08:51,23/Sep/23 11:41,"See CAMEL-16470 Historically camel-jpa would lookup from exchange header / property an EntityManager to use instead of from its own component. This was needed by jbpm and other 3rd party frameworks that integrated with Camel. However this causes pain for normal users, where you just want to use the jpa component out of the box with the JPA EM it has been configured with. And if you add other jpa components to integrate with other databases, then they should out of the box use their own EM and so on. This is how JMS, Kafka and other components work. So to allow the old behavior, we add a boolean option on the jpa component to turn on the old style. And then leave it off for new style onwards.",Claus Ibsen: Claus Ibsen added a comment - 24/Jul/23 18:08 We no longer have the old camel-jbpm in 4.x to worry about
https://issues.apache.org/jira/browse/CAMEL-18238,Improvement,Open,Minor,Unresolved,None,4.x,camel-jbang,Unknown,Claus Ibsen,Claus Ibsen,28/Jun/22 10:56,23/Sep/23 11:40,With CAMEL-18171 then when using configmap or secret then we should capture these names so we know what are in use. This can aid for deployment which allows us to generate manifest files that refer to the used cm/secrets so k8s can mount these automatic.,
https://issues.apache.org/jira/browse/CAMEL-18695,Improvement,Open,Minor,Unresolved,"3.18.3,3.19.0",4.x,camel-resume-api,Unknown,Otavio Rodolfo Piske,Otavio Rodolfo Piske,07/Nov/22 13:30,23/Sep/23 11:40,"Currently, in order to update the offsets, the resume API requires a processor so that the code can do something like: File path = exchange.getMessage().getHeader( ""CamelFilePath"" , File.class); exchange.getMessage().setHeader(Exchange.OFFSET, Resumables.of(path.getParentFile(), path)); However, it would be easier if the code could do something like: from( ""file:{{input.dir}}?noop= true &recursive= true "" ) .resumable().configuration(resumeStrategyConfigurationBuilder.withResumeCache(cache)).offset().auto().to( ""file:{{output.dir}}"" ); In this case, the adapter would take care of handling the offset updates. Alternatively, for slightly more complex scenarios, it could also allow something like this: from( ""file:{{input.dir}}?noop= true &recursive= true "" ).resumable().configuration(resumeStrategyConfigurationBuilder.withResumeCache(cache)).offset().key(header( ""AHeaderValue"" )).value(header( ""SomeOtherHeader"" ).to( ""file:{{output.dir}}"" ); Offset updates via processors could still be possible using the existing way.",Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 09/Nov/22 09:08 Marking CAMEL-18698 as related to this because there is an overlapping problem to solve in both of the tickets.
https://issues.apache.org/jira/browse/CAMEL-19872,New Feature,Open,Minor,Unresolved,None,None,camel-kafka,Unknown,Unassigned,Aayush,15/Sep/23 10:03,15/Sep/23 10:24,"Today, It is not possible to configure the AWS Glue schema registry for the Camel Kafka Component. There is no information about how to configure Camel DSL with the AWS GLU in the current documentation https://camel.apache.org/components/4.0.x/kafka-component.html { }",Andrea Cosentino: Andrea Cosentino added a comment - 15/Sep/23 10:24 A missing way of configuring an external registry cannot be a critical issue.
https://issues.apache.org/jira/browse/CAMEL-19761,Improvement,Open,Minor,Unresolved,4.x,None,camel-aws2,Unknown,Unassigned,Gerda Ilger,18/Aug/23 05:33,18/Aug/23 05:39,"As discussed on January 16, 2023 : aws2-ses is based on Amazon' AWS v2 SES v1 client, which has a 10 MB per message limit. In order to send messages up to 40 MB, we'll need to switch to Amazon’s SESV2Client. Service quotas in Amazon SES Duplicating the aws2-ses component and upgrading the SES client seems to do the trick. The changes to upgrade to SESV2Client would look something like this: https://github.com/gerdailger/camel/commit/09996edf939b7082af5bb6fcc1d6cf514b776aea As suggested by Andrea Consentino, creating a JIRA issue to discuss the best way to merge & whether it would be better to have only one component based on SESV2Client. Note that while SESV2Client has been working very well & exactly like the v1 client (only better - supporting 40 MB messages) for us for the last 8 months, I don't know if there may be (edge) cases where it behaves differently and breaks things for others.",
https://issues.apache.org/jira/browse/CAMEL-11246,Improvement,Open,Minor,Unresolved,None,4.x,tooling,Unknown,Claus Ibsen,Luca Burgazzoli,09/May/17 13:04,09/Aug/23 09:27,"Some component like camel-sql support expressions to be used inside the uri definition and this may cause troubles in environment like spring as the simple language prefix/suffix clash with spring's property resolution. By providing some information about what languages the endpoint supports in the camel-catalog, tools like IDEs or validation plugins can provide some hints or warning to the user/developer.",
https://issues.apache.org/jira/browse/CAMEL-12866,Improvement,Open,Minor,Unresolved,2.22.1,4.x,tooling,Unknown,Unassigned,Jochen Cordes,08/Oct/18 04:07,09/Aug/23 09:27,"The camel-restdsl-swagger-plugin should include additional meta-information from an OpenAPI/Swagger definition and add them to the generated code, f.e. from the following blocks (info, license, tags) : ""info"":{ ""description"":""A description"", ""version"":""1.0.0"", ""title"":""A title"", ""termsOfService"":""http://myhost.com/terms/"", ""contact"": { ""email"":""apiteam@myhost.com"" } , ""license"": { ""name"":""Apache 2.0"", ""url"":""http://www.apache.org/licenses/LICENSE-2.0.html"" } }, ""tags"":[]",Claus Ibsen: Claus Ibsen added a comment - 20/Mar/22 11:13 Zoran the status says in progress. I assume you are not working on this so can you update the status.
https://issues.apache.org/jira/browse/CAMEL-13188,Improvement,Open,Minor,Unresolved,2.23.0,4.x,camel-mongodb3,Novice,Unassigned,Carl-Philipp Harmant,12/Feb/19 20:33,09/Aug/23 09:26,"When doing something like: from(""direct:my-endpoint"") .to(""mongodb3:cosmosdb?database=dbname&collection=collname&operation=findOneByQuery"") The code works fine if something is found in the db. If no result is returned from the query, I obtain a stacktrace like that: org.apache.camel.RuntimeCamelException: java.io.IOException: Stream closed at org.apache.camel.http.common.HttpMessage.createBody(HttpMessage.java:80) at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:54) at org.apache.camel.processor.RestBindingAdvice.marshal(RestBindingAdvice.java:402) at org.apache.camel.processor.RestBindingAdvice.after(RestBindingAdvice.java:151) at org.apache.camel.processor.RestBindingAdvice.after(RestBindingAdvice.java:51) at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:251) at org.apache.camel.processor.Pipeline.process(Pipeline.java:127) at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97) at org.apache.camel.http.common.CamelServlet.doService(CamelServlet.java:213) at org.apache.camel.http.common.CamelServlet.service(CamelServlet.java:79) at javax.servlet.http.HttpServlet.service(HttpServlet.java:750) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408) at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:770) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415) at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:745) Caused by: java.io.IOException: Stream closed at org.apache.catalina.connector.InputBuffer.read(InputBuffer.java:338) at org.apache.catalina.connector.CoyoteInputStream.read(CoyoteInputStream.java:132) at org.apache.catalina.connector.CoyoteInputStream.read(CoyoteInputStream.java:110) at org.apache.camel.util.IOHelper.copy(IOHelper.java:202) at org.apache.camel.util.IOHelper.copy(IOHelper.java:174) at org.apache.camel.util.IOHelper.copyAndCloseInput(IOHelper.java:234) at org.apache.camel.util.IOHelper.copyAndCloseInput(IOHelper.java:230) at org.apache.camel.http.common.HttpHelper.readResponseBodyFromInputStream(HttpHelper.java:243) at org.apache.camel.http.common.HttpHelper.readRequestBodyFromServletRequest(HttpHelper.java:194) at org.apache.camel.http.common.DefaultHttpBinding.parseBody(DefaultHttpBinding.java:595) at org.apache.camel.http.common.HttpMessage.createBody(HttpMessage.java:78) ... 48 more Note that I call the route from a rest endpoint and that the stacktrace appear in the http response (not in the logs) I found a work around: from(""direct:my-endpoint"") .to(""mongodb3:cosmosdb?database=dbname&collection=collname&operation=findOneByQuery"") .choice() .when(header(RESULT_TOTAL_SIZE).isLessThan(1)) .setBody(simple(""{}"")) .end()","Onder Sezgin: Onder Sezgin added a comment - 13/Feb/19 08:28 I suspect if there is something wrong in your http stream handling. I remember not having such effect Do you have a unit test showing this? | Carl-Philipp Harmant: Carl-Philipp Harmant added a comment - 13/Feb/19 21:39 Have a look here: https://github.com/carlphilipp/camel-bug I created 3 integration tests, one of them fails, this is the one that describes the issue. The others tests can help resolving the issue. Let me know if you have any questions. (The first time you run the tests, it can take a long time as it's going to download an embed mongodb) | Onder Sezgin: Onder Sezgin added a comment - 13/Feb/19 22:22 Thanks, Fair enough. I understand your point even though i disagree. The point i disagree is that what you did was not a workaround but must to do. because mongo component reflects the capability of what java mongo driver can do. i believe the code is simple enough, and those kind of CBR might be needed for certain scenarios. however, one side of me also agrees with you. what you want to have at the end of the day is simpler route syntactically. I would suggest may be doing something like in findAll would be helpful https://github.com/apache/camel/blob/master/components/camel-mongodb3/src/main/java/org/apache/camel/component/mongodb3/MongoDbProducer.java#L395 Please submit PR if you agree. Contributions are more than welcome | Carl-Philipp Harmant: Carl-Philipp Harmant added a comment - 14/Feb/19 00:02 Yes ok, I have debugged more the component, and I see what you mean. I do not have a strong opinion on what the component should return. I guess the question comes back to ""what's the default behavior of other Camel components when there is no result to return?"". I would prefer not to have to write this ""workaround"" but it's not a big deal. The surprising part of the behavior, is the fact that because the body is null, the rest of the route is not processed. To me this is why I thought it was a bug. Now if this is how it's done for any other components, then it's fine; the developer need to handle it. | Claus Ibsen: Claus Ibsen added a comment - 14/Feb/19 04:50 Is there a way to know easily if findOneByQuery returned data or not? If so I think we should use that and set an empty/null body if no data, as reading an input stream that is EOL is not helping the end user. Other components such as camel-sql will set a null body if you ask for a single object and there is no data. | Carl-Philipp Harmant: Carl-Philipp Harmant added a comment - 14/Feb/19 05:23 The return of the query is null: https://github.com/apache/camel/blob/master/components/camel-mongodb3/src/main/java/org/apache/camel/component/mongodb3/MongoDbProducer.java#L302 And the body is set to null already: https://github.com/apache/camel/blob/master/components/camel-mongodb3/src/main/java/org/apache/camel/component/mongodb3/MongoDbProducer.java#L273 It's failing downstream, after the component. I'm not sure what stream it's trying to read. You can see/debug that behavior in the project I posted. | Claus Ibsen: Claus Ibsen added a comment - 21/Jul/23 12:56 It seems that it should set the result size to 0 or 1 like the other find operations exchange.getMessage().setHeader(RESULT_TOTAL_SIZE, ret == null ? 0 : 1); That can help to know if there was data or not | Claus Ibsen: Claus Ibsen added a comment - 21/Jul/23 13:00 That header above should be made consistent for all the find operations."
https://issues.apache.org/jira/browse/CAMEL-14949,Improvement,Open,Minor,Unresolved,"3.2.0,2.25.1",Future,camel-slack,Unknown,Andrea Cosentino,Zoran Regvart,22/Apr/20 08:42,09/Aug/23 09:24,"Slack is deprecating the ""legacy"" token authentication . We should migrate from that to OAuth for authentication. Note there are several types of tokens at Slack.",Claus Ibsen: Claus Ibsen added a comment - 02/Sep/22 15:11 Is this still the case with old authentication todaty?
https://issues.apache.org/jira/browse/CAMEL-15523,Task,Open,Minor,Unresolved,None,4.x,camel-influxdb,Unknown,Unassigned,Andrea Cosentino,11/Sep/20 05:47,09/Aug/23 09:23,,
https://issues.apache.org/jira/browse/CAMEL-16073,Improvement,Open,Minor,Unresolved,None,4.x,camel-pulsar,Unknown,Unassigned,Claus Ibsen,23/Jan/21 10:00,09/Aug/23 09:22,We should use negativeAck if exchange has exception after processing.,
https://issues.apache.org/jira/browse/CAMEL-16133,Improvement,Open,Minor,Unresolved,3.7.0,Future,None,Unknown,Unassigned,fly,03/Feb/21 02:47,09/Aug/23 09:22,How can I use TMultiplexProtocol in camel-thrift component? It doesn't seem to support it,"Claus Ibsen: Claus Ibsen added a comment - 03/Feb/21 08:03 Can you explain more what you want, and can you find information from Apache Thrift about this protocol so we can better help | fly: fly added a comment - 04/Feb/21 14:01 - edited I need to use the component as the client to connect to a server. The server uses the TMultiplexedProtocol . The component has no place to set this protocol and specify the service name"
https://issues.apache.org/jira/browse/CAMEL-16188,Test,Open,Minor,Unresolved,None,4.x,camel-kudu,Unknown,Unassigned,Claus Ibsen,12/Feb/21 06:09,09/Aug/23 09:21,We use a binary download for testing https://kudu.apache.org/docs/developing.html#_using_the_kudu_binary_test_jar Instead we should use test containers. then it can run as linux and always work.,
https://issues.apache.org/jira/browse/CAMEL-16306,New Feature,Open,Minor,Unresolved,3.7.2,Future,camel-sjms,Unknown,Unassigned,Raymond,04/Mar/21 19:13,09/Aug/23 09:21,"In the current SJMS implementation the docs says: ""Currently the only correlation strategy is to use the JMSCorrelationId ."" I would like to correlate by property just as the JMS component has ( correlationProperty ). or by JMSMessageId ( UseJMSMessageIDAsCorrelationId ).","Claus Ibsen: Claus Ibsen added a comment - 05/Mar/21 15:33 There is a bit of work to support such kind, especially the latter as you only know the actual JMSMessageID after the message is sent. The former is easier. See the jms component and you can copy over its code to camel-sjms where it needs to be."
https://issues.apache.org/jira/browse/CAMEL-16399,Task,Open,Minor,Unresolved,None,4.x,tests,Unknown,Andrea Cosentino,Andrea Cosentino,24/Mar/21 14:31,09/Aug/23 09:21,,
https://issues.apache.org/jira/browse/CAMEL-16431,New Feature,Open,Minor,Unresolved,None,4.x,None,Unknown,Unassigned,Luca Burgazzoli,30/Mar/21 10:50,09/Aug/23 09:21,"We should evaluate adding support for JSON Streaming and Server Side Events i.e. we could create the json-streaming and sse façade that delegate to real components (vertx, platform-http, etc)",
https://issues.apache.org/jira/browse/CAMEL-16483,New Feature,Open,Minor,Unresolved,None,Future,camel-nats,Unknown,Unassigned,Andrea Cosentino,12/Apr/21 05:34,09/Aug/23 09:20,https://docs.nats.io/jetstream/jetstream https://github.com/nats-io/nats.java#jetstream,Brendan: Brendan added a comment - 19/Jul/22 21:36 There are many differences in the API and configuration for Jetstream. Should this be a new component (`camel-nats-jetstream`)? | Claus Ibsen: Claus Ibsen added a comment - 02/Sep/22 17:49 Yes a new component is welcome if anyone is able to work on this
https://issues.apache.org/jira/browse/CAMEL-16624,Improvement,Open,Minor,Unresolved,3.9.0,4.x,camel-salesforce,Unknown,Unassigned,Hemang Ajmera,17/May/21 13:44,09/Aug/23 09:20,"We should replace Map with Multi Value, so that they can be initialized in URI sting. Please refer to https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/set.20Map.20option/near/239077029 for details The Map options in Salesforce Component are apexQueryParams initialReplayIdMap If there is quick way to find all the options in other component which is Map, then this Jira can be extended to convert them all.","Claus Ibsen: Claus Ibsen added a comment - 03/Sep/22 07:45 Ah you mean apexQuery.key1=blah&apexQuery.key2=yada&apexQuery.key3=123 Which then can be extracted into a map by the component (like some other component do) | Claus Ibsen: Claus Ibsen added a comment - 03/Sep/22 07:46 The initialReplayIdMap what details would you need to configure, I am just curiois what a real world example would be | Hemang Ajmera: Hemang Ajmera added a comment - 08/Sep/22 11:04 I do not remember for sure since lately I am not working on camel. It could be either, I just happened to notice initialReplayIdMap also, so added to jira. But if I remember correctly, initialReplayIdMap can be used to set different values of replay Id for different topics."
https://issues.apache.org/jira/browse/CAMEL-16691,New Feature,Open,Minor,Unresolved,None,Future,None,Unknown,Unassigned,Godfrey,06/Jun/21 16:11,09/Aug/23 09:20,"Kafka dataproc sink is very useful to subscribe from Kafka topic into Google cloud Dataproc (Apache spark). Dataproc is a fast , easy-to-use, ful ly managed cloud service for running Apache Spark and Apache Hadoop clusters in a simpler, more cost-efficient way. Any ideas of how to create it related Kamelet?","Claus Ibsen: Claus Ibsen added a comment - 07/Jun/21 07:29 A new camel-google-dataproc component would be a good start, then a kamelet can be built that uses this component. | Claus Ibsen: Claus Ibsen added a comment - 07/Jun/21 07:29 There are some existing google components here https://github.com/apache/camel/tree/main/components/camel-google | Godfrey: Godfrey added a comment - 07/Jun/21 07:50 - edited Where do I start to implement Google Dataproc from the git repo ? | Claus Ibsen: Claus Ibsen added a comment - 07/Jun/21 11:00 You can either create a new component as standalone in your own maven project (or you can fork the camel git repo, and work on this source code - although its huge, so you need to build it once to get local JARs for the main branch build and installed in your local m2 repo). There is a contribution guide at https://camel.apache.org/community/contributing/ However at first you can also research how to integrate with google dataproc from Java. eg is there a google java library that can be used for that, and if so how would you do that. You can then build a prototype of something (without Camel) to learn how to do that part, and then after that put it into a camel component. When you get to that part write back here | Godfrey: Godfrey added a comment - 14/Jun/21 12:46 Am a newbie, and not a Java developer - Is any chance some developers build it? | Andrea Cosentino: Andrea Cosentino added a comment - 14/Jun/21 12:55 If someone would like to work on this, it will be available for devs to work on it."
https://issues.apache.org/jira/browse/CAMEL-16710,Improvement,Open,Minor,Unresolved,3.7.0,Future,camel-quickfix,Unknown,Unassigned,Mathias Aebersold,11/Jun/21 07:20,09/Aug/23 09:20,"Hi there, we are implementing a Quickfix request-reply message exchange where the reply message can be one of 2 different message types, which is not supported by the current implementation. However, this is a common situation during FIX business processes. E.g. sending a QuoteRequest message will yield in a response of either a Quote or QuoteRequestReject message. The current implementation of the correlation criteria with a MessagePredicate object requires exactly 1 MsgType in its constructor: https://camel.apache.org/components/latest/quickfix-component.html#_implementing_inout_exchanges_for_producers exchange.setProperty(QuickfixjProducer.CORRELATION_CRITERIA_KEY, new MessagePredicate( new SessionID(sessionID), MsgType.EXECUTION_REPORT) .withField(ExecTransType.FIELD, Integer .toString(ExecTransType.STATUS)) .withField(OrderID.FIELD, request.getString(OrderID.FIELD))); I see 2 potential approaches to improve the current implementation: 1) Correlation criteria without a MsgType . This could be very quickly implemented using a new {{MessagePredicate }}constructor: Existing constructor: org.apache.camel.component.quickfixj.MessagePredicate#MessagePredicate public MessagePredicate(SessionID requestingSessionID, String msgType) { addHeaderFieldIfPresent(SenderCompID.FIELD, requestingSessionID.getSenderCompID()); addHeaderFieldIfPresent(TargetCompID.FIELD, requestingSessionID.getTargetCompID()); withMessageType(msgType); } Proposed new constructor without the parameter String msgType : org.apache.camel.component.quickfixj.MessagePredicate#MessagePredicate public MessagePredicate(SessionID requestingSessionID) { addHeaderFieldIfPresent(SenderCompID.FIELD, requestingSessionID.getSenderCompID()); addHeaderFieldIfPresent(TargetCompID.FIELD, requestingSessionID.getTargetCompID()); } 2) Multiple MessagePredicate for different MsgType This approach would replace the existing correlation criteria consisting of a single MessagePredicate object with a list of MessagePredicate objects. An incoming message would be successfully correlated if any of the MessagePredicate objects would evaluate to true .",Claus Ibsen: Claus Ibsen added a comment - 03/Sep/22 07:57 Are you able to work on a PR with this functionality | Deven Phillips: Deven Phillips added a comment - 04/Feb/23 18:51 Another possible option might be to create a superclass or parent interface which both of those types inherit from?
https://issues.apache.org/jira/browse/CAMEL-16789,Task,Open,Minor,Unresolved,None,Future,None,Unknown,Unassigned,Alex Dettinger,06/Jul/21 13:52,09/Aug/23 09:19,"It looks like faulttolerance timeoutScheduledExecutorServiceRef and bulkHead * have no effect. FaultToleranceConfiguration.getTimeoutScheduledExecutorServiceRef() is never called from camel code, so the configured value is never reified into an actual processor as far as I get it. Concerning bulkHead*, the FaultToleranceReifier does not propagate the bulkHeadEnabled boolean by calling something like target.setBulkheadEnabled(true); As such, the FaultToleranceProcessor never actually executes the doStart() and process() code related to bulkhead.","Claus Ibsen: Claus Ibsen added a comment - 09/Jul/21 07:19 Yeah this requires some work as the bulk head executing is a bit tricky to implement for the current camel implementation. I took a look and it seems we need to refactor this to setup the circuit breaker and its bulk head, timeout etc in doStart."
https://issues.apache.org/jira/browse/CAMEL-17177,Task,Open,Minor,Unresolved,3.13.0,Future,camel-salesforce,Unknown,Unassigned,Otavio Rodolfo Piske,08/Nov/21 09:26,09/Aug/23 09:19,"These methods may be candidates for moving to the repeatable tasks implemented as part of CAMEL-17121 : org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper#performClientRestart org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper#subscribe I don't know much about Salesforce and it may require some more effort to test. Therefore, logging and saving for later.","Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 09/Aug/23 09:19 - edited It would be good to perform this migration, but I have no knowledge at all about Salesforce."
https://issues.apache.org/jira/browse/CAMEL-16825,Improvement,Open,Minor,Unresolved,"3.6.0,3.11.0",Future,"camel-core,eip",Unknown,Unassigned,tang honggang,28/Jul/21 09:31,09/Aug/23 09:19,"I want to use nest choice DSL to finish some job, but it doesn't work well in my test case. When I use endChoice() in the inner choice clause, it return back to the outer choice definition actually. And this is the test case: ProcessorDefinition<?> end = from(""timer:foo?period=5000&synchronous=true"") .transform(simple(""${random(1000)}"")) .choice() .when(simple(""${body} > 500"")) .log(""High number ${body}"") .choice() .when(simple(""${body} > 750"")) .log(""High number >750 ${body}"") .endChoice() .otherwise() .log(""High number <750 ${body}"") .endChoice() .endChoice() .otherwise() .log(""Low number ${body}"") .endChoice(); Though in this case, I can fix the problem by not use endChoice(), I see the code of endChoice(). I found that change the sequence of the two judgement below can fix my problem, but I am not sure the influence. So I hope you can give me an answer, thx! // are we nested choice? ProcessorDefinition<?> def = this; if (def.getParent() instanceof WhenDefinition) { return (ChoiceDefinition) def.getParent().getParent(); } // are we already a choice? if (def instanceof ChoiceDefinition) { return (ChoiceDefinition) def; }","Claus Ibsen: Claus Ibsen added a comment - 28/Jul/21 13:05 You are welcome to create a PR against main branch then we can use that as a start | tang honggang: tang honggang added a comment - 29/Jul/21 11:55 davsclaus I have fix the problem and add a test case, but i have no permission push the code, will you help add my github ID ttyy1112 to camel project? | Claus Ibsen: Claus Ibsen added a comment - 29/Jul/21 11:59 You need to fork the github project and then push there, and then you can create a PR to apache camel. | tang honggang: tang honggang added a comment - 29/Jul/21 12:34 got it. | Dirk Vanhaute: Dirk Vanhaute added a comment - 30/Jul/21 08:52 - edited Hi, I happen to be investigating an identical problem (in 3.7.4) while migrating from 2. Using your testcase, it would probably look like this: ( took the liberty of changing second endChoice to end, as I can't see why this should work. ) ProcessorDefinition<?> end = from(""timer:foo?period=5000&synchronous=true"") .transform(simple(""${random(1000)}"")) .choice() .when(simple(""${body} > 500"")) .log(""High number ${body}"") .choice() .when(simple(""${body} > 750"")) .log(""High number >750 ${body}"") .endChoice() .otherwise() .log(""High number <750 ${body}"") .endChoice() .end() .log(simple(""extra log"")) .endChoice() .end() It gives: org.apache.camel.model.RouteDefinition cannot be cast to class org.apache.camel.model.ChoiceDefinition in the last endChoice. I don't understand the code completely, but I believe ""choice"" adds a new child to the OutputNode tree. While ""when"" and ""otherwise"" are pretty much treated like normal statements and are added to ""blocks"". This causes all other non OutputNode statements like log to be placed in the same block. Because of that, you should never expect to find ""WhenDefinition"" in your tree, but still, ChoiceDefinition.endChoice has a check on it: public ChoiceDefinition ProcessorDefinition.endChoice() { // are we nested choice? ProcessorDefinition<?> def = this; if (def.getParent() instanceof WhenDefinition) { return (ChoiceDefinition) def.getParent().getParent(); } But then it would not be doing anything. Perhaps I am wrong and ChoiceDefinition ends the inner choice, while the next end ends the second one. But that is not what the documentation says. | tang honggang: tang honggang added a comment - 02/Aug/21 05:22 d.vanhaute The code will run like this, ProcessorDefinition<?> end = from(""timer:foo?period=1000&synchronous=true"") .transform(simple(""${random(1000)}"")) .choice() .when(simple(""${body} > 500"")).log(""High number ${body}"") .choice() .when(simple(""${body} > 750"")).log(""High number >750 ${body}"") .otherwise().log(""High number <750 ${body}"") .end().log(""extra log"") .endChoice() .end(); | Dirk Vanhaute: Dirk Vanhaute added a comment - 02/Aug/21 16:18 Ok, I See where I was wrong, the ChoiceDefinition.addClause clears the block before adding a when or otherwise, thus WhenDefinition and OtherwiseDefinition are indeed on top of ChoiceDefinition. It is a special construction. It is a child of choice, and ChoiceDefinition.when creates the new WhenDefinition or OtherwiseDefinition, but returns the current ChoiceDefinition instead. Thus, indeed, I agree, endChoice should test first on being on level ChoiceDefinition and, if so, decide we're fine, not end the choice, but just return itself. But then, what follows has two strange things: WhenDefinition has an endParent method to cope with the in-between focus of that level, but OtherDefinition does not have or inherit that method. Thus nesting in ""when"" brings back ChoiceDefinition, but nesting in ""otherwise"" leaves you unexpectedly in the otherwise level. The second thing is that ProcessorDefinition.endChoice first part, check for nested blocks, only checks for WhenDefinition, and not for OtherwiseDefinition, and it does not call ""end"", so blocks are not popped. If we remove that, the endChoice does an ""end"", ending whatever OutputNode we were in. ( after having a safety check for WhenDefinition and OtherDefinition ), So it appears to me, it should just be removed, and the OtherDefinition should get an endParent identical to the one in WhenDefinition. The only problem would be, that it would work just like end in any other place outside endChoice. So perhaps, it should fail it end does not return ChoiceDefinition. | tang honggang: tang honggang added a comment - 04/Aug/21 12:37 davsclaus Hi, I have created a PR and what's the next step I should do? | Claus Ibsen: Claus Ibsen added a comment - 03/Sep/22 08:10 Where did your PR go - I cannot see it , or cant remember we have got it from you - my bad as this ticket is 1+ year old now | Dirk Vanhaute: Dirk Vanhaute added a comment - 13/Sep/22 21:46 - edited Hi Claus, I believe this is what you are looking for: https://github.com/apache/camel/pull/5890 It does what I explained here : WhenDefinition and OtherwiseDefinition are indeed on top of ChoiceDefinition. It is a special construction. It is a child of choice, and ChoiceDefinition.when creates the new WhenDefinition or OtherwiseDefinition, but returns the current ChoiceDefinition instead. Thus, indeed, I agree, endChoice should test first on being on level ChoiceDefinition and, if so, decide we're fine, not end the choice, but just return itself. What I explained further is that in CAMEL-4050 , endParent was created in ProcessorDefinition and overridden in WhenDefinition but not in OtherDefinition. The reasoning might have been that after an otherwise, the choice ends, and there is no reason to return to ChoiceDefinition. The NestedChoiceIssueTest is also constructed in this way of thinking : .to(""mock:big"").otherwise().to(""mock:med"") .endChoice().otherwise().to(""mock:low"").end(); The endChoice in this sequence should be followed by end() to terminate the inner choice, but the boolean construction onlyWhenOrOtherwise fails to notice this because it is followed by an otherwise. This explains why his PR failed. The inner choice got the two otherwises. It might also be this endParent thing that makes it impossible to use endChoice in a nested choice where it is not necessarry ( see my first example for a test )."
https://issues.apache.org/jira/browse/CAMEL-16826,Improvement,Open,Minor,Unresolved,None,4.x,camel-azure,Unknown,Andrea Cosentino,Andrea Cosentino,28/Jul/21 09:38,09/Aug/23 09:19,,"Claus Ibsen: Claus Ibsen added a comment - 26/Sep/21 17:40 Can this be moved to 3.13 ? | Andrea Cosentino: Andrea Cosentino added a comment - 27/Sep/21 04:36 Yes, nothing critical."
https://issues.apache.org/jira/browse/CAMEL-16860,Improvement,Open,Minor,Unresolved,None,Future,camel-salesforce,Unknown,Unassigned,Zineb Bendhiba,10/Aug/21 14:20,09/Aug/23 09:19,"The Salesforce component uses the commons-lang3 utilities for working with Fields reflection. Find a better way to create the Jackson Mapper for the consumer with PUSH_TOPIC, dealing with the NULL fields without using the org.apache.commons.lang3.reflect.FieldUtils in the FieldsToNullPropertyFilter. This is the problematic line of code : https://github.com/apache/camel/blob/7406711360935a11ade7e0c90989832079e3b2d1/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/api/FieldsToNullPropertyFilter.java#L34",Jeremy Ross: Jeremy Ross added a comment - 02/Oct/21 16:38 zbendhiba is this for Quarkus? There are probably other places that would need to be addressed too.
https://issues.apache.org/jira/browse/CAMEL-16871,Improvement,Open,Minor,Unresolved,None,4.x,camel-aws2,Unknown,Unassigned,Brendan,18/Aug/21 14:45,09/Aug/23 09:18,"Camel aws2-s3 mutlipart upload only supports Files. There are at least two approaches to solving this: The hard, general case and a simple specific case. 1) The harder but general case: use something like Spring's aws SimpleStorageInputStream: https://github.com/spring-cloud/spring-cloud-aws/blob/main/spring-cloud-aws-core/src/main/java/org/springframework/cloud/aws/core/io/s3/SimpleStorageResource.java and translate any exchange body to an Inputstream for mulitpart uploads. 2) The simpler but specific case: for remote files in particular, camel often makes use of a localwork directory to download files. In fact, e.getIn().getBody(File.class) will resolve the file in the local work directory when polling from an FTP site with a local work directory specified. The aws2-s3 producer (AWS2S3Producer.class) on lines 134 to 145 would need to be modified in both cases.",Andrea Cosentino: Andrea Cosentino added a comment - 13/Sep/21 05:55 I think we could also use the same approach as the single op is doing https://github.com/apache/camel/blob/main/components/camel-aws/camel-aws2-s3/src/main/java/org/apache/camel/component/aws2/s3/AWS2S3Producer.java#L270 as an else case. | Brendan: Brendan added a comment - 13/Sep/21 18:39 I suppose it depends on what line 271 does. But that might actually be sufficient.
https://issues.apache.org/jira/browse/CAMEL-17025,Improvement,Open,Minor,Unresolved,None,4.x,"camel-aws,(1)camel-aws2",Unknown,Andrea Cosentino,Fabio Zani,30/Sep/21 11:38,09/Aug/23 09:18,"Using the AWS2 S3 component it would be nice to have a way to move a file inside a different subfolder in the same bucket after reading it. AS IS With the current implementation, the moveAfterRead option requires to specify the destination bucket and eventually a prefix and/or suffix. As it is not intended for moving into a different folder in the same bucket, trying to specify the original bucket as destination and the path to the subfolder as a prefix has an ugly result, as shown in the following example. Original bucket: myBucket File path: /path/to/foloder/run/test.txt moveAfterRead=true destinationBucket=myBucket destinationBucketPrefix=/path/to/folder/done Result: file is moved, but file key is /path/to/folder/done/path/to/folder/test.txt TO BE Allow moving the file under a different folder in the same bucket. An option would be to recognize if the destination bucket is the same as the original bucket, requiring the destinationBuketPrefix to be set, moving the file (with the filename extracted from the CamelAwsS3Key ) under the specified prefix. Another option would be to introduce a new option designed specifically to move the file within the same bucket. The moveAfterRead option would then require either the destinationBucket option or the destinationSubfolderPrefix to be set. In case the second solution is chosen, the destinationBucketSuffix option could be renamed in destinationSuffix to be used with both moving within the bucket or to another bucket or a new option ( destinationSubfolderSuffix ) should be introduced.",Andrea Cosentino: Andrea Cosentino added a comment - 30/Sep/21 15:00 Feel free to propose a PR if you want to
https://issues.apache.org/jira/browse/CAMEL-17235,New Feature,Open,Minor,Unresolved,None,Future,camel-infinispan,Unknown,Andrea Cosentino,Andrea Cosentino,26/Nov/21 07:00,09/Aug/23 09:17,https://infinispan.org/docs/stable/titles/query/query.html#ickle-queries_ickle-query-language,
https://issues.apache.org/jira/browse/CAMEL-17348,Improvement,Open,Minor,Unresolved,3.14.0,Future,camel-jira,Unknown,Unassigned,Zachary Gutterman,16/Dec/21 16:15,09/Aug/23 09:15,"The camel-Jira newIssue endpoint depends on Jira's sorting by id to find the most recent issue. Jira sort by id, however, does not sort across all projects and is not a reliable way to return a list of newest issues. (See attached screenshot of sorted issues by id desc with endpoint /rest/api/latest/search?jql=ORDER+BY+id+desc .) A solution could use the ""created"" field instead which reliably returns issues by most recent.",Claus Ibsen: Claus Ibsen added a comment - 03/Sep/22 10:44 Thanks are you able to send a PR
https://issues.apache.org/jira/browse/CAMEL-17368,Improvement,Open,Minor,Unresolved,None,4.x,camel-google,Unknown,Andrea Cosentino,Andrea Cosentino,22/Dec/21 07:27,09/Aug/23 09:15,Like CAMEL-16883,
https://issues.apache.org/jira/browse/CAMEL-17369,Improvement,Open,Minor,Unresolved,None,4.x,camel-google,Unknown,Andrea Cosentino,Andrea Cosentino,22/Dec/21 07:27,09/Aug/23 09:14,Like CAMEL-16883,
https://issues.apache.org/jira/browse/CAMEL-17423,Improvement,Open,Minor,Unresolved,3.14.0,4.x,camel-google-pubsub,Unknown,Unassigned,Rob Arnhart,03/Jan/22 17:10,09/Aug/23 09:14,"I work for a cloud service provider that includes an integration application that uses Camel for the core operations of an integration. Because of factors such as industry regulation and customer InfoSec policies/requirements, placing access keys within an application, its filesystem, associated direct data stores, etc. is not permitted. This requires credentials to be provided by a lookup service that provides decrypted values to an application, exposed through variables. While our SaaS offering does provide an identity hub that integrates with customer IdPs, these integration applications will not use those as credential stores, directly. With that, the serviceAccountKey would need to be provided via a variable, environment variable, etc., where the JSON string would be passed into that field value. I've made a modification to allow for this by modifying the getCredentialsProvider method of the GooglePubsubCompenent.java file of the camel-google-pubsub component. This would respond to a prefix and then take the value from the passed parameter and use it for the credentials. GooglePubsubComponent.java private CredentialsProvider getCredentialsProvider(GooglePubsubEndpoint endpoint) throws IOException { CredentialsProvider credentialsProvider; // The original method logic // if (endpoint.isAuthenticate()) { // credentialsProvider = FixedCredentialsProvider.create(ObjectHelper.isEmpty(endpoint.getServiceAccountKey()) // ? GoogleCredentials.getApplicationDefault() : ServiceAccountCredentials.fromStream(ResourceHelper // .resolveMandatoryResourceAsInputStream(getCamelContext(), endpoint.getServiceAccountKey()))); // } else { // credentialsProvider = NoCredentialsProvider.create(); // } // Modified for JSON input if (endpoint.isAuthenticate()) { if (ObjectHelper.isEmpty(endpoint.getServiceAccountKey())) { credentialsProvider = FixedCredentialsProvider.create(GoogleCredentials.getApplicationDefault()); } else if (endpoint.getServiceAccountKey().startsWith( ""json:"" )) { // <- For the JSON string credentialsProvider = FixedCredentialsProvider.create(ServiceAccountCredentials.fromStream( new ByteArrayInputStream(Base64.getUrlDecoder().decode(endpoint.getServiceAccountKey().substring(5))))); } else { credentialsProvider = FixedCredentialsProvider.create(ServiceAccountCredentials.fromStream( ResourceHelper.resolveResourceAsInputStream(getCamelContext(), endpoint.getServiceAccountKey()))); } } else { credentialsProvider = NoCredentialsProvider.create(); } return credentialsProvider; } This would then allows for the component to be defined with the serviceAccountKey as below. The JSON string would need to be encoded via Base64 to allow the internal encoded key to be properly passed through. GcpPubsubRoute.java @Override public void configure() throws Exception { from( ""direct:gcpTest"" ).id( ""gcpTest"" ) .setHeader(GooglePubsubConstants.ATTRIBUTES, constant(Map.of( ""testKey1"" , ""testValue1"" , ""testKey2"" , ""testValue2"" ))) .setBody(simple( ""{\"" someKey\ "": \"" someValue\ ""}"" )) .toD( ""google-pubsub:{{PROJECT_NAME}}:{{TOPIC_NAME}}?serviceAccountKey=json:{{BASE64_CREDS}}"" ) .log( ""Message ID: ${header."" + GooglePubsubConstants.MESSAGE_ID + ""}"" ); } I understand the concern around using an environment variable to pass credentials to a container. There is, however, a common pattern of cloud providers that expose external configuration to containers through environment variables.","Andrea Cosentino: Andrea Cosentino added a comment - 04/Jan/22 05:54 I'm just wondering why the Google SDK doesn't provide anything for use cases like this. cibsen@e-ma.net what do you think about this? | Benjamin Vollmer: Benjamin Vollmer added a comment - 14/Apr/22 12:49 acosentino , rarnhart : What about an option to override the client implementation to pass in a custom CredentialsProvider implementation? | Andrea Cosentino: Andrea Cosentino added a comment - 14/Apr/22 13:02 It makes sense totally, please raise another issue for that and if you have time open a PR. | Rob Arnhart: Rob Arnhart added a comment - 15/Apr/22 13:31 Yeah, I'd like to see that implemented as well bvollmer and acosentino - good suggestion."
https://issues.apache.org/jira/browse/CAMEL-17595,New Feature,Open,Minor,Unresolved,None,4.x,camel-tracing,Unknown,Unassigned,Sijmen Huizenga,03/Feb/22 13:26,09/Aug/23 09:13,"Add the ability to start a new trace during the exeuction of a route. For example, we use an aggregate with completionInterval to group messages. All messages from the aggregate share the same traceID. This results in a single trace spanning all messages over many weeks. We would like each message after the aggregate to receive a new trace to improve visibility. Having the ability to manually close & start the trace would be ideal. It would be amazing if it would be possible to call .reset() method from the ActiveSpanManager : .process(e -> ActiveSpanManager.reset(e))",Claus Ibsen: Claus Ibsen added a comment - 03/Sep/22 10:59 You are welcome to send a PR
https://issues.apache.org/jira/browse/CAMEL-17598,New Feature,Open,Minor,Unresolved,3.14.1,4.x,camel-bindy,Unknown,Unassigned,Jeremy Ross,03/Feb/22 20:45,09/Aug/23 09:13,"If bindy fails to parse a value, say a date, an exception is thrown and the entire unmarshal operation is aborted. It would be nice if the exception could be handled and processing could resume. We'd probably also want a way to specify a default value in the case of a parse failure. Here are some choices that need to be made: A way to indicate unmarshaling should resume in the event of a parse failure. Where would this live? Options are at the component option level, @CsvRecord level, and @DataField level. Maybe all of these with each one successively overriding the higher level setting. But maybe that's too complex. What would this be called? continueOnParseFailure ? Is this even the right concept? A way to specify a default value to use when a parse fails. @DataField already has a defaultValue element, so maybe we use this value in the event of a failure. If defaultValue is not set, it could default to null or the default value for a primitive type. Zulip chat: https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/Bindy.20continue.20on.20parse.20exception","Zoran Regvart: Zoran Regvart added a comment - 04/Feb/22 08:11 I think on a framework (i.e. Camel) level, adding an error handler that folk can provide implementations of could be helpful. Perhaps something like: class ParseException extends Exception { int lineNumber; String line; // perhaps some other context needed here } interface ParserErrorHandler { /** * Given a ParseException that occurred while trying to parse a record choose to either rethrow the exception preventing further parsing, ignore it returning {@code null } or provide a substitute object for the parsed row. */ Object handle(ParseException e); } (2c) | Jeremy Ross: Jeremy Ross added a comment - 08/Feb/22 16:15 I think that solution probably provides the best flexibility. But I suspect the use of options I described would cover the vast majority of uses cases and is obviously much simpler. I'm kinda liking the idea of having both of these solutions. The ability to set options to define simpler parse failure behavior, and ParseErrorHandler for ultimate flexibility."
https://issues.apache.org/jira/browse/CAMEL-17904,Test,Open,Minor,Unresolved,None,4.x,"camel-aws2,(1)tests",Unknown,Jiri Ondrusek,Jiri Ondrusek,05/Apr/22 13:22,09/Aug/23 09:11,"During development of https://issues.apache.org/jira/browse/CAMEL-17860 , i found that there are 2 use cases in documentation which are not covered (server side encryption) or not working correctly (deduplication strategy) in component tests. It would be nice to cover/fix them.",
https://issues.apache.org/jira/browse/CAMEL-17926,Task,Open,Minor,Unresolved,3.17.0,4.x,"camel-spring-boot-starters,(1)documentation",Unknown,Unassigned,Zoran Regvart,07/Apr/22 15:07,09/Aug/23 09:11,"During the recent troubleshooting of the differences between the documentation in Camel Spring Boot and Camel I've identified some long standing issues with the documentation. To appease the referential integrity checks a placeholder springdoc component documentation was created. This should be removed and the SpringDoc Starter documentation should remain only visible via the Camel Spring Boot documentation. DSLs in Camel do not include the Camel Spring Boot configuration snippet like the component documentation has. It should be added to the DSLs as they have starters much like the component documentation it includes now. DSLs in Camel do not have the camel-spring-boot-name attribute, it should be set for the referential integrity to notice issues other than the mismatch in component vs starter counts. Camel metadata JSON (in src/main/docs ) is missing for debug, cloudevents and DSLs. It was manually copied over from the Camel project in this commit . Automation should be done to make sure those are present and updated with changes in the Camel repository. DSL documentation doesn't appear in the Camel Spring Boot starter list page. It should be added, most likely as a separate section.",
https://issues.apache.org/jira/browse/CAMEL-17951,Improvement,Open,Minor,Unresolved,None,4.x,camel-platform-http-vertx,Unknown,Unassigned,Claus Ibsen,12/Apr/22 16:38,09/Aug/23 09:11,Today you need to configure this in java code with some special configuration class that you then need to add to camel context as service or on the component somehow. We should make it easier to configure so you can also do this with known configuration keys ala camel.component.platform-http-vertx.fookey=myvalue,
https://issues.apache.org/jira/browse/CAMEL-17970,New Feature,Open,Minor,Unresolved,None,Future,camel-test,Unknown,Unassigned,Belaggoun Salah Eddine,14/Apr/22 15:48,09/Aug/23 09:10,"In some test scenarios, we have to exclude a specific route from being loaded in the camel context. The @ExcludeRoutes Junit5 annotation provides this functionality at the Class level. There is no way to Exclude a specific route within a class if there are multiple routes (filtering). The only alternative is to use auto startup or precondition.","Claus Ibsen: Claus Ibsen added a comment - 26/May/23 18:33 How do you think this should be specified, can you provide an example"
https://issues.apache.org/jira/browse/CAMEL-18112,New Feature,Open,Minor,Unresolved,None,4.x,tooling,Unknown,Unassigned,Aurélien Pupier,16/May/22 09:05,09/Aug/23 09:09,"it would be nice to support trace breakpoints. Most IDEs are providing this kind of feature. It allows to provide traces during a debug session without modifying the source code. see: https://microsoft.github.io/debug-adapter-protocol/specification#Types_SourceBreakpoint logMessage In IntelliJ, using non-suspended in combination with logging options https://www.jetbrains.com/help/idea/using-breakpoints.html#suspend_policy In Eclipse, Tracepoint https://www.eclipse.org/community/eclipse_newsletter/2017/june/article1.php In VS Code, Logpoint https://code.visualstudio.com/docs/editor/debugging#_logpoints","Aurélien Pupier: Aurélien Pupier added a comment - 29/Jun/22 08:40 Technical thoughts: Debug Adapter Protocol is supporting a single language, so maybe we can implement it for single language, the simple one only Debug Adapter protocol doesn't support providing completion. it would be dependent on each IDEs capabilities."
https://issues.apache.org/jira/browse/CAMEL-18158,Task,Open,Minor,Unresolved,None,4.x,camel-netty-http,Novice,Unassigned,Otavio Rodolfo Piske,01/Jun/22 07:37,09/Aug/23 09:09,Based on a suggestion from Claus in this PR: https://github.com/apache/camel/pull/7694#pullrequestreview-990818819,Otavio Rodolfo Piske: Otavio Rodolfo Piske added a comment - 01/Jun/22 07:38 Added related ticket that triggered the suggestion.
https://issues.apache.org/jira/browse/CAMEL-18235,Improvement,Open,Minor,Unresolved,None,4.x,camel-aws,Unknown,Unassigned,Claus Ibsen,28/Jun/22 04:20,09/Aug/23 09:07,"some of the other components in camel-google or camel-minio seems to have it as true, but s3 is false. Noticed this in this PR https://github.com/apache/camel/pull/7901",
https://issues.apache.org/jira/browse/CAMEL-18259,Improvement,Open,Minor,Unresolved,None,Future,camel-fhir,Unknown,Unassigned,James Netherton,07/Jul/22 06:35,09/Aug/23 09:07,"The FHIR component has a polling consumer where it can do polling operations against a FHIR server. Seems we have no documentation or tests for this though, so it'd be useful to add some.",
https://issues.apache.org/jira/browse/CAMEL-18272,New Feature,Open,Minor,Unresolved,None,4.x,None,Unknown,Andrea Cosentino,Andrea Cosentino,15/Jul/22 12:43,09/Aug/23 09:07,,
https://issues.apache.org/jira/browse/CAMEL-18334,Improvement,Open,Minor,Unresolved,None,Future,camel-cxf,Unknown,Unassigned,Claus Ibsen,02/Aug/22 07:52,09/Aug/23 09:06,"With camel-cxf split into smaller JARs then we can look at if we can do a platform-http adapter for CXF HTTP Transport, so we can use what comes from the runtime platform such as vertx-http when using quarkus / jbang / camel-k.",
https://issues.apache.org/jira/browse/CAMEL-18392,Improvement,Open,Minor,Unresolved,3.9.0,Future,camel-jt400,Unknown,Jesse Gorzinski,Jesse Gorzinski,13/Aug/22 21:21,09/Aug/23 09:05,"A popular trend lately is to send UTF-8 JSON data through data queues on IBM i. Currently, the JT400 components has a `format` parameter that can be either ""binary"" or ""text"". This parameter affects how the component interprets both the data queue key as well as the data queue data. JSON is text, but unfortunately the CCSID (encoding) used for text mode assumes the CCSID of the connection, and IBM i does not support unicode connections! In order to properly read UTF-8 data from the queue, you need to use `format=binary` and then convert to String manually (for instance, with `.convertBodyTo(String.class, ""UTF-8"")`). This isn't all-in-all horrible, but I've seen it catch a decent number of people. This should be addressed by either or both of: Having a UTF-8 example in the doc Providing a new `dataQueueCCSID` parameter that allows for the explicit declaration of CCSID read from the data independent from the connection CCSID",
https://issues.apache.org/jira/browse/CAMEL-18512,Wish,Open,Minor,Unresolved,3.18.2,Future,camel-bindy,Unknown,Unassigned,Jussi Wallin,15/Sep/22 07:45,09/Aug/23 09:05,"Our project has a use-case for Bindy where we would like to define a Model POJO that has less fields than the resulting CSV would have. We tried to achieve this by defining a model with the proper annotations and using the ""pos"" parameter in the DataField annotations. For example you might want to define one field at position 4 and another at position 6. The resulting CSV should then contain an empty field at position 5. We used BeanIO previously and it supported this use-case. Adding dummy fields is fine in simple cases but when a CSV exceeds 100 fields, of which a couple dozen are used, it becomes very cumbersome to handle. Specifically the unmarshal obviously works fine, but we are trying to marshal in this case. We are transitioning to using Bindy for all CSV handling and ran into this problem. I believe this would be useful generally. Sample project that illustrates this case: https://github.com/jwwallin/bindy-csv-sample",
https://issues.apache.org/jira/browse/CAMEL-18517,Improvement,Open,Minor,Unresolved,3.18.2,Future,camel-mail,Unknown,Unassigned,Jeff,15/Sep/22 16:58,09/Aug/23 09:05,"Camel mail does not include all MIME body parts in multipart messages. In the unit test linked below, the `htmlPart` body part is not contained in the body parts of the deserialized message. This test can easily be broken by simply changing the order that the MIME body parts are added to the multipart message in the `populateMimeMessageBody` method. https://github.com/apache/camel/blob/main/components/camel-mail/src/test/java/org/apache/camel/component/mail/MimeMessageConsumeTest.java Users expect to be able to send multipart emails which contain both plain text and html parts (multipart/alternative) so that the users email clients can display it appropriately. This is not possible with Camel, since only one of the two alternative body parts is deserialized.","Claus Ibsen: Claus Ibsen added a comment - 16/Sep/22 04:38 You are welcome to try to implement this and send a PR | Jeff: Jeff added a comment - 16/Sep/22 14:25 Ok, if I can find the time I might do that. For anyone else that is interested, the MailBinding class calls the `populateContentOnBodyPart` method which converts the message body to a String. This delegates to the MailConverters.java class which selects the first body part that has a Content-Type starting with 'text' and converts that body part to a String. So only the first 'text' body part is included, all others are lost. | Claus Ibsen: Claus Ibsen added a comment - 16/Sep/22 20:39 Thanks for sharing your findings"
https://issues.apache.org/jira/browse/CAMEL-18667,Improvement,Open,Minor,Unresolved,None,Future,camel-telegram,Unknown,Unassigned,Sergei Portnov,30/Oct/22 18:09,09/Aug/23 09:04,Current Telegram models are outdated. Need to update this to match the current API documentation .,"Sergei Portnov: Sergei Portnov added a comment - 30/Oct/22 19:35 I'm working on it | Claus Ibsen: Claus Ibsen added a comment - 12/Dec/22 08:32 Are you still working on this? | Sergei Portnov: Sergei Portnov added a comment - 13/Dec/22 12:15 Sorry, I was sick. I'm still working on this"
https://issues.apache.org/jira/browse/CAMEL-19715,Improvement,Open,Minor,Unresolved,None,None,camel-endpointdsl,Unknown,Unassigned,Claus Ibsen,06/Aug/23 07:22,07/Aug/23 04:33,There is only the first alias from camel-mail in endpointdsl (imap). But it also has smtp and pop3 etc. This is an old component that should have been mail:xxx?protocol=imap instead of impa:xxxx smtp:xxxx,Claus Ibsen: Claus Ibsen added a comment - 06/Aug/23 07:23 See more at https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/DSL.20for.20smtp
https://issues.apache.org/jira/browse/CAMEL-19548,Task,Open,Minor,Unresolved,4.0.0,None,"camel-zookeeper-master,tests",Novice,Federico Mariani,Otavio Rodolfo Piske,28/Jun/23 08:44,02/Aug/23 13:30,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities. Ideally we should replace these with: Awaitility Java's native syncronization mechanism (Latches, Phasers, Locks, etc) Nothing (i.e.; in some cases the sleep can simply be removed)",
https://issues.apache.org/jira/browse/CAMEL-19678,New Feature,Open,Minor,Unresolved,None,Future,camel-health,Unknown,Unassigned,Claus Ibsen,28/Jul/23 14:42,28/Jul/23 14:42,"It would be good if we can markup every component with the health check ids they provide OOTB. We should see if we can markup this in the source code and have it generated into the json files, then we can have it shown in the docs. And tooling would also better know about which health checks are provided.",
https://issues.apache.org/jira/browse/CAMEL-19167,Improvement,Open,Minor,Unresolved,None,None,None,Unknown,Unassigned,Nicolas Filotto,17/Mar/23 14:17,26/Jul/23 07:49,This component should be redesigned to avoid instantiating a new HttpClient for each request because they are expensive to create. See point #7 https://hc.apache.org/httpcomponents-client-5.2.x/migration-guide/preparation.html,"Claus Ibsen: Claus Ibsen added a comment - 26/Jul/23 07:49 A quick look in the code, then it looks like its OAIPMHHttpClient that creates a new client in its doRequest method, so its not as much we can improve on the Camel side."
https://issues.apache.org/jira/browse/CAMEL-18836,Improvement,Open,Minor,Unresolved,3.20.0,None,camel-azure,Unknown,Unassigned,Andrea Tarocchi,22/Dec/22 13:57,26/Jul/23 05:54,"At the moment there is no reliable way to instruct getChangefeed operation of camel-azure-storage-blob component to resume processing the events from where the previous call finished. Theoretically the changeFeedStartTime and changeFeedEndTime could be used to somehow achieve that, but per the documentation those are not very precise (you can lose event if you don't round them at the hour) and the suggestion is to use the resume cursor mechanism see: https://learn.microsoft.com/en-us/azure/storage/blobs/storage-blob-change-feed-how-to#resume-reading-records-from-a-saved-position",
https://issues.apache.org/jira/browse/CAMEL-18685,Improvement,Open,Minor,Unresolved,None,None,camel-file,Unknown,Unassigned,Otavio Rodolfo Piske,03/Nov/22 17:06,17/Jul/23 13:46,"In the file component, reading a file that contains an unmappable character causes the component to throw UnmappableCharacterException. This happens because, by default, the behavior for handling unmapped characters in the Charset class is to report them . Ideally, we should allow configuring the behavior so that it can either be replaced or ignored. For instance, we can try tweaking the code to use something like (in FileOperations) to ignore errors: Charset.forName(charset).newDecoder().onMalformedInput(CodingErrorAction.IGNORE).charset(); Ignore is just one of the options. We may also want to try to replace them (as Camel did prior to 2.20).",
https://issues.apache.org/jira/browse/CAMEL-16212,New Feature,Open,Minor,Unresolved,None,Future,camel-core,Unknown,Unassigned,Peter Palaga,15/Feb/21 10:59,17/Jul/23 11:41,We currently (mis)use the fact that current model classes have JAXB annotations to discover CSimple expressions in Camel Quarkus - see https://github.com/apache/camel-quarkus/blob/master/extensions/csimple/deployment/src/main/java/org/apache/camel/quarkus/component/csimple/deployment/CSimpleProcessor.java#L337-L347 davsclaus mentioned recently that he would like to remove JAXB from Camel Core. It would be nice if Camel provided an API for route introspection at build time before JAXB is removed.,
https://issues.apache.org/jira/browse/CAMEL-18721,New Feature,Open,Minor,Unresolved,3.19.0,None,camel-jbang,Unknown,Tadayoshi Sato,Tadayoshi Sato,14/Nov/22 05:30,17/Jul/23 10:38,"Similarly to CAMEL-18716 , we can provide positional parameter completion for integration names and pids with camel top and camel stop : $ camel top context [TAB] $ camel stop [TAB] But implementing this should be a bit trickier as the completion script needs to call back camel ps to get completion candidates. We can embed the completion by using Picocli's @Parameters completionCandidates attribute.","Claus Ibsen: Claus Ibsen added a comment - 08/Mar/23 14:13 Yeah the completion is not dynamic | Claus Ibsen: Claus Ibsen added a comment - 08/Mar/23 14:21 https://github.com/remkop/picocli/issues/506 | Claus Ibsen: Claus Ibsen added a comment - 08/Mar/23 14:24 We can possible have camel-jbang keep a special file up to date with current running camel integration names. Then if we can get the completion script to load from the file instead of hardcoded values? ~/.camel/names Then names is a text file with the current running names. When a camel is stopped, then we need to update the file, in camel-kamelet-main/camel-cli-connector. | Claus Ibsen: Claus Ibsen added a comment - 08/Mar/23 14:25 tadayosi not sure if you have ideas for custom completion script in bash/zsh where we read the names"
https://issues.apache.org/jira/browse/CAMEL-18867,New Feature,Open,Minor,Unresolved,None,None,camel-jbang,Unknown,Unassigned,Claus Ibsen,08/Jan/23 12:14,17/Jul/23 10:28,"We have --watch that will keep watching and output in full screen mode. We can have a --listen that will not do a full screen, but only output new changes like kuberntetes cli can do, such as when you see pod activity. This requires to detect ""what is changed"" and then only output changes, such as if you do camel get event, camel get health, camel get event etc.",Mrinal: Mrinal added a comment - 02/May/23 02:02 Can I help with this? | Claus Ibsen: Claus Ibsen added a comment - 02/May/23 04:14 Yes sure anyone is welcome to help. The code are in dsl/camel-jbang
https://issues.apache.org/jira/browse/CAMEL-19172,Wish,Open,Minor,Unresolved,None,None,camel-jbang,Unknown,Unassigned,Ramesh Venkitaswaran,20/Mar/23 11:17,16/Jul/23 11:59,"Currently, when using Camel Jbang and avro, these errors are emitted in the logs. WARN 2098 — [XXXXXX]] fka.clients.consumer.ConsumerConfig : The configuration 'specific.avro.reader' was supplied but isn't a known config WARN 2098 --- [XXXXX]]fka.clients.consumer.ConsumerConfig : The configuration 'basic.auth.user.info' was supplied but isn't a known config Please provide an example in https://github.com/apache/camel-kamelets-examples on how to use Avro with a schema registry. The error above was produced when trying to use it with Confluent's schema registry.",
https://issues.apache.org/jira/browse/CAMEL-19551,Task,Open,Minor,Unresolved,4.0.0,None,"camel-jpa,tests",Novice,Unassigned,Otavio Rodolfo Piske,28/Jun/23 08:52,28/Jun/23 08:52,"Some tests do not have assertions and that prevents us from fully understanding what is a test failure and what is an error. In many cases, these are tests that were originally written with older versions of JUnit in mind (i.e: equal or older than v4), so they lack modernization. We should ensure every test has an assertion. The assertion does not, necessarily, needs to be visible (i.e.: it can be called in a separate method). When asserting that a piece of code does not throw an error, we should use JUnit's 5 assertDoesNotThrow (either the linked method or one of the others with different signatures).",
https://issues.apache.org/jira/browse/CAMEL-19549,Task,Open,Minor,Unresolved,4.0.0,None,"camel-core,tests",Moderate,Unassigned,Otavio Rodolfo Piske,28/Jun/23 08:44,28/Jun/23 08:45,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities. Ideally we should replace these with: Awaitility Java's native syncronization mechanism (Latches, Phasers, Locks, etc) Nothing (i.e.; in some cases the sleep can simply be removed)",
https://issues.apache.org/jira/browse/CAMEL-19514,Task,Open,Minor,Unresolved,4.0.0,None,"camel-aws2,(1)tests",Novice,Unassigned,Otavio Rodolfo Piske,28/Jun/23 08:16,28/Jun/23 08:44,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities. Ideally we should replace these with: Awaitility Java's native syncronization mechanism (Latches, Phasers, Locks, etc) Nothing (i.e.; in some cases the sleep can simply be removed)",
https://issues.apache.org/jira/browse/CAMEL-19545,Task,Open,Minor,Unresolved,4.0.0,None,"camel-stream,(1)tests",Novice,Unassigned,Otavio Rodolfo Piske,28/Jun/23 08:42,28/Jun/23 08:42,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities. Ideally we should replace these with: Awaitility Java's native syncronization mechanism (Latches, Phasers, Locks, etc) Nothing (i.e.; in some cases the sleep can simply be removed)",
https://issues.apache.org/jira/browse/CAMEL-19540,Task,Open,Minor,Unresolved,4.0.0,None,"camel-pulsar,(1)tests",Novice,Unassigned,Otavio Rodolfo Piske,28/Jun/23 08:38,28/Jun/23 08:38,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities. Ideally we should replace these with: Awaitility Java's native syncronization mechanism (Latches, Phasers, Locks, etc) Nothing (i.e.; in some cases the sleep can simply be removed)",
https://issues.apache.org/jira/browse/CAMEL-19532,Task,Open,Minor,Unresolved,4.0.0,None,"camel-lumberjack,tests",Novice,Unassigned,Otavio Rodolfo Piske,28/Jun/23 08:29,28/Jun/23 08:29,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities. Ideally we should replace these with: Awaitility Java's native syncronization mechanism (Latches, Phasers, Locks, etc) Nothing (i.e.; in some cases the sleep can simply be removed)",
https://issues.apache.org/jira/browse/CAMEL-19531,Task,Open,Minor,Unresolved,4.0.0,None,"camel-leveldb,(1)tests",Novice,Unassigned,Otavio Rodolfo Piske,28/Jun/23 08:29,28/Jun/23 08:29,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities. Ideally we should replace these with: Awaitility Java's native syncronization mechanism (Latches, Phasers, Locks, etc) Nothing (i.e.; in some cases the sleep can simply be removed)",
https://issues.apache.org/jira/browse/CAMEL-19530,Task,Open,Minor,Unresolved,4.0.0,None,"camel-kubernetes,tests",Novice,Unassigned,Otavio Rodolfo Piske,28/Jun/23 08:28,28/Jun/23 08:28,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities. Ideally we should replace these with: Awaitility Java's native syncronization mechanism (Latches, Phasers, Locks, etc) Nothing (i.e.; in some cases the sleep can simply be removed)",
https://issues.apache.org/jira/browse/CAMEL-19529,Task,Open,Minor,Unresolved,4.0.0,None,"camel-knative,(1)tests",Novice,Unassigned,Otavio Rodolfo Piske,28/Jun/23 08:28,28/Jun/23 08:28,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities. Ideally we should replace these with: Awaitility Java's native syncronization mechanism (Latches, Phasers, Locks, etc) Nothing (i.e.; in some cases the sleep can simply be removed)",
https://issues.apache.org/jira/browse/CAMEL-19528,Task,Open,Minor,Unresolved,4.0.0,None,"camel-jpa,tests",Novice,Unassigned,Otavio Rodolfo Piske,28/Jun/23 08:27,28/Jun/23 08:27,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities. Ideally we should replace these with: Awaitility Java's native syncronization mechanism (Latches, Phasers, Locks, etc) Nothing (i.e.; in some cases the sleep can simply be removed)",
https://issues.apache.org/jira/browse/CAMEL-19527,Task,Open,Minor,Unresolved,4.0.0,None,"camel-jmx,tests",Novice,Unassigned,Otavio Rodolfo Piske,28/Jun/23 08:27,28/Jun/23 08:27,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities. Ideally we should replace these with: Awaitility Java's native syncronization mechanism (Latches, Phasers, Locks, etc) Nothing (i.e.; in some cases the sleep can simply be removed)",
https://issues.apache.org/jira/browse/CAMEL-19525,Task,Open,Minor,Unresolved,4.0.0,None,"camel-jetty,tests",Novice,Unassigned,Otavio Rodolfo Piske,28/Jun/23 08:25,28/Jun/23 08:25,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities. Ideally we should replace these with: Awaitility Java's native syncronization mechanism (Latches, Phasers, Locks, etc) Nothing (i.e.; in some cases the sleep can simply be removed)",
https://issues.apache.org/jira/browse/CAMEL-19521,Task,Open,Minor,Unresolved,4.0.0,None,"camel-hdfs,tests",Novice,Unassigned,Otavio Rodolfo Piske,28/Jun/23 08:22,28/Jun/23 08:22,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities. Ideally we should replace these with: Awaitility Java's native syncronization mechanism (Latches, Phasers, Locks, etc) Nothing (i.e.; in some cases the sleep can simply be removed)",
https://issues.apache.org/jira/browse/CAMEL-19520,Task,Open,Minor,Unresolved,4.0.0,None,"camel-google,(1)tests",Novice,Unassigned,Otavio Rodolfo Piske,28/Jun/23 08:21,28/Jun/23 08:22,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities. Ideally we should replace these with: Awaitility Java's native syncronization mechanism (Latches, Phasers, Locks, etc) Nothing (i.e.; in some cases the sleep can simply be removed)",
https://issues.apache.org/jira/browse/CAMEL-19517,Task,Open,Minor,Unresolved,4.0.0,None,"camel-cxf,tests",Novice,Unassigned,Otavio Rodolfo Piske,28/Jun/23 08:18,28/Jun/23 08:18,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities. Ideally we should replace these with: Awaitility Java's native syncronization mechanism (Latches, Phasers, Locks, etc) Nothing (i.e.; in some cases the sleep can simply be removed)",
https://issues.apache.org/jira/browse/CAMEL-19482,Task,Open,Minor,Unresolved,None,None,camel-hashicorp-vault,Unknown,Unassigned,Chandranana,21/Jun/23 09:13,22/Jun/23 13:06,We want to provide ppc64le arch support to hashicorp/vault image in the camel-hashicorp-vault component,Chandranana: Chandranana added a comment - 21/Jun/23 09:19 Power supported image:icr.io/ppc64le-oss/vault-ppc64le: v1.13.1 | Chandranana: Chandranana added a comment - 22/Jun/23 13:04 [^log_install.txt] [^log_Verify.txt] | Chandranana: Chandranana added a comment - 22/Jun/23 13:06 log_Verify.zip
https://issues.apache.org/jira/browse/CAMEL-19170,Wish,Open,Minor,Unresolved,None,None,camel-activemq,Unknown,Unassigned,Romeo Köppel,20/Mar/23 08:30,23/Mar/23 15:22,"Hi Currently when the services has no connection to the ActiveMQ .... Feb 17 17:14:06 XXXXXXXX[568839]: 2023-02-17T16:14:06.810Z ERROR trace_id= span_id= [org.apache.camel.component.jms.DefaultJmsMessageListenerContainer] (Camel (camel-1) thread #1 - JmsConsumer[XXXXXXXX]) Could not refresh JMS Connection for destination 'XXXXXXXX' - retrying using FixedBackOff{interval=5000, currentAttempts=1, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp: //localhost:61616. Reason: java.net.ConnectException: Connection refused Feb 17 17:14:11 XXXXXXXX[568839]: 2023-02-17T16:14:11.813Z ERROR trace_id= span_id= [org.apache.camel.component.jms.DefaultJmsMessageListenerContainer] (Camel (camel-1) thread #1 - JmsConsumer[XXXXXXXX]) Could not refresh JMS Connection for destination 'XXXXXXXX' - retrying using FixedBackOff{interval=5000, currentAttempts=2, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp: //localhost:61616. Reason: java.net.ConnectException: Connection refused ... the service is UP anyway: { ""status"" : ""UP"" , ""checks"" : [ { ""name"" : ""Database connections health check"" , ""status"" : ""UP"" , ""data"" : { ""< default >"" : ""UP"" } }, { ""name"" : ""camel-routes"" , ""status"" : ""UP"" }, { ""name"" : ""context"" , ""status"" : ""UP"" , ""data"" : { ""context.name"" : ""camel-1"" , ""context.phase"" : ""5"" , ""context.version"" : ""3.19.0"" , ""context.status"" : ""Started"" , ""check.kind"" : ""READINESS"" } }, { ""name"" : ""camel-consumers"" , ""status"" : ""UP"" } ] } The reason for this is probably, that the JMS Consumer hasn't implemented a HealthCheck by default. I found this out within the ConsumerHealthCheck class in the doCallCheck method. Because of this I had to implement a custom HealthCheck for ActiveMQ. Is it possible that in the future a HealthCheck for ActiveMQ will be delivered by default? Thanks a lot","Claus Ibsen: Claus Ibsen added a comment - 23/Mar/23 15:22 This component has auto-recovery built-in, and you can have situations where this is okay, and that the entire Camel app should not be DOWN because of that."
https://issues.apache.org/jira/browse/CAMEL-14807,New Feature,Open,Minor,Unresolved,None,Future,camel-core,Unknown,Unassigned,Claus Ibsen,29/Mar/20 08:20,23/Feb/23 06:09,"It would be good with a fluent builder for JSSE to setup the SSLContext stuff that is tedious to do. For example from this unit test public class VertxPlatformHttpEngineTest { public static SSLContextParameters serverSSLParameters; public static SSLContextParameters clientSSLParameters; @BeforeAll public static void setUp() { serverSSLParameters = new SSLContextParameters(); clientSSLParameters = new SSLContextParameters(); KeyStoreParameters keystoreParameters = new KeyStoreParameters(); keystoreParameters.setResource( ""jsse/service.jks"" ); keystoreParameters.setPassword( ""security"" ); KeyManagersParameters serviceSSLKeyManagers = new KeyManagersParameters(); serviceSSLKeyManagers.setKeyPassword( ""security"" ); serviceSSLKeyManagers.setKeyStore(keystoreParameters); serverSSLParameters.setKeyManagers(serviceSSLKeyManagers); KeyStoreParameters truststoreParameters = new KeyStoreParameters(); truststoreParameters.setResource( ""jsse/truststore.jks"" ); truststoreParameters.setPassword( ""storepass"" ); TrustManagersParameters clientAuthServiceSSLTrustManagers = new TrustManagersParameters(); clientAuthServiceSSLTrustManagers.setKeyStore(truststoreParameters); serverSSLParameters.setTrustManagers(clientAuthServiceSSLTrustManagers); SSLContextServerParameters clientAuthSSLContextServerParameters = new SSLContextServerParameters(); clientAuthSSLContextServerParameters.setClientAuthentication( ""REQUIRE"" ); serverSSLParameters.setServerParameters(clientAuthSSLContextServerParameters); TrustManagersParameters clientSSLTrustManagers = new TrustManagersParameters(); clientSSLTrustManagers.setKeyStore(truststoreParameters); clientSSLParameters.setTrustManagers(clientSSLTrustManagers); KeyManagersParameters clientAuthClientSSLKeyManagers = new KeyManagersParameters(); clientAuthClientSSLKeyManagers.setKeyPassword( ""security"" ); clientAuthClientSSLKeyManagers.setKeyStore(keystoreParameters); clientSSLParameters.setKeyManagers(clientAuthClientSSLKeyManagers); } ...",
https://issues.apache.org/jira/browse/CAMEL-18950,Improvement,Open,Minor,Unresolved,3.19.0,None,camel-openapi-java,Unknown,Unassigned,Sami Peltola,18/Jan/23 12:57,18/Jan/23 12:57,"Related to issue CAMEL-16986 When using the @Schema annotation for OpenAPI documentation, still some of the properties of the annotation are ignored, mainly ""maxLength"", ""minLength"" and ""defaultValue"". These values missing from the generated JSON file. Related Open API definition: https://github.com/OAI/OpenAPI-Specification/blob/3.0.2/versions/3.0.2.md#schema-object Example: @Schema(required = true , description = ""Message description"" , example = ""Example message"" , defaultValue = ""Default message"" , maxLength = 20, minLength = 1) private String message; Currently generated JSON: ""components"" : { ""schemas"" : { ""InputModel"" : { ""required"" : [ ""message"" ], ""type"" : ""object"" , ""properties"" : { ""message"" : { ""description"" : ""Message description"" , ""type"" : ""string"" , ""example"" : ""Example message"" },",
https://issues.apache.org/jira/browse/CAMEL-18941,Task,Open,Minor,Unresolved,4.0.0,None,"build system,(1)camel-spring-boot",Unknown,Unassigned,Federico Mariani,17/Jan/23 16:04,17/Jan/23 18:55,"During the generation phase of spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports files, AutoConfiguration classes that are created manually are not added the imports file, and subsequent generation may break some starter, ex. https://github.com/apache/camel-spring-boot/pull/705/commits/663ac4a77921f356ef34357d2a5627bdb78fbc77 manually fix this issue, but it would be nice to update SpringBootAutoConfigurationMojo so that all the AutoConfiguration are added into the imports file.","Claus Ibsen: Claus Ibsen added a comment - 17/Jan/23 18:55 Yeah it would be good to make the plugin load the existing import file, and only append to that file if an entry is missing"
https://issues.apache.org/jira/browse/CAMEL-18799,Improvement,Open,Minor,Unresolved,3.19.0,None,camel-azure,Unknown,Unassigned,Andrea Tarocchi,06/Dec/22 14:42,16/Dec/22 15:48,Implement an Azure Storage Blob changefeed consumer,"Claus Ibsen: Claus Ibsen added a comment - 07/Dec/22 11:55 - edited You can try using a split eip in a kamelet, though when its a source it may indeed be trickier | Andrea Tarocchi: Andrea Tarocchi added a comment - 16/Dec/22 15:40 - edited Has been possible to achieve what was needed in a kamelet see https://github.com/apache/camel-kamelets/pull/1217 might be useful to incorporate part of that behavior in a consumer?"
https://issues.apache.org/jira/browse/CAMEL-18654,Improvement,Open,Minor,Unresolved,None,None,camel-azure,Unknown,Unassigned,Luca Burgazzoli,26/Oct/22 13:48,26/Oct/22 13:48,"In order to test the azure components against i.e. azurite, it would be nice if the azure components would provide a way to to override the service endpoint used by the clients at the component and endpoint level.",
https://issues.apache.org/jira/browse/CAMEL-8499,Improvement,Open,Minor,Unresolved,2.15.0,Future,"camel-core,jmx",Unknown,Unassigned,Claus Ibsen,17/Mar/15 07:17,23/Sep/22 15:37,"When Camel is doing a graceful shutdown, it may take some time to shutdown to drain inflight exchanges. And as that by default has a timeout of 300 seconds that is counting down. Then sometimes end users dont bother, eg its a test environment etc. Then we should have a JMX / Java API on graceful shutdown to terminate this timeout asap. Its basically to cancel the future task to do it. We can then also have a karaf commands as well. Maybe its reusing the stop command but with a --kill flag. If kill is a too extreme wording, we could use force stop or something instead.","Antoine DESSAIGNE: Antoine DESSAIGNE added a comment - 17/Mar/15 09:58 Hi Claus, We implemented this using a simple call to cancel(true) on the currentShutdownTaskFuture of the DefaultShutdownStrategy . Maybe it would be better to make the DefaultShutdownStrategy truly stateless. For instance we could have something like public interface ShutdownStrategy { public Shutdown shutdown(CamelContext context); } public interface Shutdown { boolean isComplete(); boolean hasTimeoutOccured(); int getPendingMessageCount(); // refreshed every second int getDuration(); boolean forceShutdown(); } Right now the fields of a particular shutdown task are direct attributes of DefaultShutdownStrategy . What do you think ? | Chris Geer: Chris Geer added a comment - 17/Mar/15 16:53 Would there be a way to trigger this when you stop a bundle in Karaf that has routes managed via blueprint? Along with a kill option it might be nice to have a feature to specify the wait period on a stop. That way you could allow for at least a partial graceful shutdown if you have multiple routes as part of a bundle or context. | Antoine DESSAIGNE: Antoine DESSAIGNE added a comment - 17/Mar/15 17:07 By default, it waits 5 minutes before forcing the shutdown. This task is just for allowing to trigger this force shutdown from outside. Regarding blueprint, I don't know yet | Claus Ibsen: Claus Ibsen added a comment - 18/Mar/15 06:41 The idea of having state of the shutdown task is a good idea. Notice the shutdown is also used for shutting down routes, not only camel itself. So the state needs to know if its for a route or for camel context itself. | Antoine DESSAIGNE: Antoine DESSAIGNE added a comment - 18/Mar/15 09:13 I know that you can either stop a particular route, all routes or event the context but I'm failing to see how it would be different in the API, in the Shutdown interface. | Claus Ibsen: Claus Ibsen added a comment - 23/Sep/22 15:37 The camel cli has a stop command, we can add --kill to it to make it force killing the pid"
https://issues.apache.org/jira/browse/CAMEL-17776,New Feature,Open,Minor,Unresolved,None,None,camel-salesforce,Unknown,Unassigned,Jawad Ahmad,10/Mar/22 15:20,03/Sep/22 12:06,It would be great to support Health Cloud Connect API using Camel Salesforce Component. I am not sure if this can be achieved with current implementations. https://developer.salesforce.com/docs/atlas.en-us.234.0.health_cloud_object_reference.meta/health_cloud_object_reference/hc_business_apis.htm,
https://issues.apache.org/jira/browse/CAMEL-16690,Improvement,Open,Minor,Unresolved,None,Future,camel-google-mail,Unknown,Unassigned,Christos Gkoros,06/Jun/21 13:23,03/Sep/22 07:56,"The messages List operation returns a list of messages, however, although the Gmail API supports adding a query (""q"") to the request, the camel endpoint/component does not The option is only available in Camel Google Mail Stream. f.e.","Christos Gkoros: Christos Gkoros added a comment - 06/Jun/21 13:29 davsclaus I would like to take on this task. | Andrea Cosentino: Andrea Cosentino added a comment - 06/Jun/21 13:52 You're welcome to work on it. | Christos Gkoros: Christos Gkoros added a comment - 15/Oct/21 06:32 Hello acosentino , after reviewing the component, it is evident that the part that controls the arguments that the endpoint can accept and passes to Gmail API is generated from -> camel-api-component-maven-plugin However, the pom.xml does not include the execution for this generation. It only has the generate-test-component-classes execution for test classes. Would you please advise on how this task should best proceed? | Andrea Cosentino: Andrea Cosentino added a comment - 15/Oct/21 07:18 Usually the code is autogenerated starting from the classes. It might be the gmail API use a builder approach for example. In that case the query parameter could have been omitted and not added to generated code. I think davsclaus may help on this particular aspect. | Claus Ibsen: Claus Ibsen added a comment - 17/Oct/21 18:44 Yeah this would take some effort as the gmail java api has the required parameters currently, but there are a number of optional parameters that can be set via setter afterwards. This would require the camel-api-maven-plugin to add support for this which is somewhat complex to do."
https://issues.apache.org/jira/browse/CAMEL-16452,Improvement,Open,Minor,Unresolved,None,None,camel-core,Unknown,Unassigned,Claus Ibsen,05/Apr/21 16:38,02/Sep/22 17:49,"Camel has been optimized so much that profiling now reveals that when using JDKs thread pool then every time a a task is submitted then a FutureTask is created which then costs object allocations. We can look at having a PooledFutureTask where you can execute runAndReset instead. However this prevents using future get to get a result. But in some use-cases we do not use this, such as WireTap EIP and (and maybe some other EIPs) java.util.concurrent.FutureTask#runAndReset",
https://issues.apache.org/jira/browse/CAMEL-16360,New Feature,Open,Minor,Unresolved,None,None,camel-pulsar,Unknown,Unassigned,obby,16/Mar/21 17:36,02/Sep/22 17:45,Pulsar supports delayed/scheduled messages as stated here delayed-message-delivery . can this be added as this has been in place from pulsar version 2.4.0. I would be willing to implement it.,Claus Ibsen: Claus Ibsen added a comment - 02/Sep/22 17:45 Any update on this?
https://issues.apache.org/jira/browse/CAMEL-15897,Improvement,Open,Minor,Unresolved,None,Future,camel-core,Unknown,Unassigned,Claus Ibsen,26/Nov/20 14:37,02/Sep/22 17:21,"Lets see if we can optimize camel-bean and the bean parameter binding, and method call resolution that happens at runtime. There are situations where we have type information and can optimize for that, and also maybe have a source code generated way for optimal performance and overhead, something like we have with csimple language.",
https://issues.apache.org/jira/browse/CAMEL-15744,Improvement,Open,Minor,Unresolved,None,Future,"camel-kafka,(1)camel-micrometer",Unknown,Unassigned,Stefan Stus,23/Oct/20 08:32,02/Sep/22 17:16,"In Mirometer introduces an ability to get technical metrics from Kafka's consumers and producers. It seems to be production-ready since 1.5.4 based on our production experience and available since 1.4.0. See: Micrometer implementation I tried to add a custom implementation to my project to extract those metrics from Camel. I found out that I'm unable to do it for the Kafka Consumer since the actual Kafka Consumer hides deeply inside KafkaConsumer Camel class. At the same time, I'm able to get KafkaProducer from Camel class here. Desired Solution: Add additional CamelKafkaMicrometerRoutePolicy to extract Kafka technical metrics. Add the ability to inject CamelKafkaMicrometerRoutePolicy into Consumer and Producer components. Will this feature be welcomed in Camel?",Zachariah Young: Zachariah Young added a comment - 27/Apr/21 15:49 Did you find a solution for this? | Claus Ibsen: Claus Ibsen added a comment - 02/Sep/22 17:16 does opentelemetry have something for kafka as this component is what we prioritize
https://issues.apache.org/jira/browse/CAMEL-15401,Task,Open,Minor,Unresolved,3.4.2,None,"camel-spring-boot,camel-test",Unknown,Unassigned,Bert Koorengevel,12/Aug/20 12:26,02/Sep/22 15:51,"When searching online for strategies to test a fragment of a Camel route with JUnit5 in the context of a Spring Boot application, the returned documentation seems somewhat outdated (favouring xml instead of java config for both Spring and Camel related aspects) and missing a major point. Some top google hits for ""apache camel test spring boot"" are: https://camel.apache.org/manual/latest/testing.html One (at least me) gets drawn to the ""Spring Test With Java Config"" example. When rebuilding from that example in a SpringBoot app, it won't ever work because the ProducerTemplate and MockEndpoint instances remain null . I happened to have an old working example of a project built with Camel v2.20 which had the annotation @ContextConfiguration(loader = CamelSpringDelegatingTestContextLoader.class) . Adding that (and a dependency on camel-test-spring on top of camel-test-spring-junit5 ) made the injections work but caused an NPE at org.apache.camel.test.spring.CamelAnnotationsHandler.handleDisableJmx(CamelAnnotationsHandler.java:90) which gets fixed by adding a static method that sets a dummy test class in CamelSpringTestHelper . After asking for assistance on gitter it was suggested to try to annotate the test class with @CamelSpring*Boot*Test instead of @CamelSpringTest as the example showed. As always with annotations: that "" magically "" solved all issues. There was no way I could have known it existed. https://camel.apache.org/manual/latest/spring-testing.html Using CamelSpringTestSupport and rolling your own implementation of an AbstractApplicationContext does not sound very attractive. The list of examples goes further with ""Plain Spring tests"" but only supported by JUnit4. It is uncertain whether this has any chance to work with JUnit5. https://camel.apache.org/components/latest/others/test-spring.html As already stated on the page: old and needs updating. Won't comment further. This looks like the original example I built my Camel v2.20 project with, using the CamelSpringDelegatingTestContextLoader https://camel.apache.org/components/latest/others/test-spring-junit5.html It first suggests to extend CamelSpringTestSupport, but writing only my test config in xml does not sound appealing. Next comes an example again using @CamelSpringTest which has identical issues as brought up in my first bullet.",Claus Ibsen: Claus Ibsen added a comment - 02/Sep/22 15:51 Community users is welcome to help with this
https://issues.apache.org/jira/browse/CAMEL-14800,New Feature,Open,Minor,Unresolved,None,Future,camel-graphql,Moderate,Unassigned,Hiram R. Chirino,26/Mar/20 15:38,02/Sep/22 14:52,"In addition to Queries and Mutations, GraphQL, supports Subscriptions to notify the client of events in GraphQL engine. These would map nicely to a camel consumer endpoint so that you can use subscriptions to trigger EIP processing in a camel route.","Manaswini Das: Manaswini Das added a comment - 21/Oct/21 09:17 Hi, I'm interested to contribute. Is anybody already working on this? | Claus Ibsen: Claus Ibsen added a comment - 25/Oct/21 19:03 No, you are welcome to work on this"
https://issues.apache.org/jira/browse/CAMEL-14189,Improvement,Open,Minor,Unresolved,None,Future,None,Unknown,Unassigned,Claus Ibsen,18/Nov/19 18:18,02/Sep/22 11:41,"So you can configure resilience4j via its SB starter JAR, and then refer to the logical name of its SB, Bulkhead etc configuration and then Camel can use that.",
https://issues.apache.org/jira/browse/CAMEL-13948,Improvement,Open,Minor,Unresolved,None,Future,camel-core,Unknown,Unassigned,Luca Burgazzoli,05/Sep/19 16:16,02/Sep/22 11:35,"The camel registry support binding multiple classes to the same entry via the bind method: void bind( String id, Class <?> type, Object bean) The underlying implementation is roughly: void bind( String id, Class <?> type, Object bean) { computeIfAbsent(id, k -> new LinkedHashMap<>()).put(type, bean); } So assuming I have a class MyLogComponent which extends LogComponent and I do the following binding: Component a = new LogComponent() Component b = new MyLogComponent() registry.bind( ""log"" , LogComponent.class, a ) registry.bind( ""log"" , MyLogComponent.class, b) then lookupByNameAndType may return different values depending on the type used for looking up the beans: registry.lookupByNameAndType( ""log"" , LogComponent.class) ==> a registry.lookupByNameAndType( ""log"" , MyLogComponent.class) ==> b registry.lookupByNameAndType( ""log"" , DefaultComponent.class) ==> a or b (depends on the order)","Luca Burgazzoli: Luca Burgazzoli added a comment - 05/Sep/19 16:17 - edited //cc gnodet | Guillaume Nodet: Guillaume Nodet added a comment - 05/Sep/19 18:06 Right, unpredictable results is really a bad idea. I think when an object is bound in the registry, we should first walk through each of the instance's parent classes and interfaces and unbind any object with the same name + class/interface, then bind the object. | Claus Ibsen: Claus Ibsen added a comment - 06/Sep/19 16:52 gnodet what would that mean in lucas example? Wont that mean that when b is bound then a is unbound, because they are both DefaultComponent / Compoent? | Guillaume Nodet: Guillaume Nodet added a comment - 04/Nov/19 07:26 Yes, my suggestion was to unbind a from DefaultComponent / Component . Another possibility is to maintain a List instead of a single object, but we would need additional methods to retrieve a list of beans instead of a single instance. | Claus Ibsen: Claus Ibsen added a comment - 02/Sep/22 11:35 This is only for advanced use cases - end users dont really do this"
https://issues.apache.org/jira/browse/CAMEL-13242,New Feature,Open,Minor,Unresolved,2.22.0,Future,camel-zookeeper,Unknown,Unassigned,Dennis,21/Feb/19 10:07,02/Sep/22 11:27,"In camel-zookeeper-master please add support for using one master route policy to control multiple routes MasterRoutePolicy policy = new MasterRoutePolicy(); from(""quartz2://r1?cron=0+0+15+? ** "").routePolicy(policy).log(""r1 doing work"") from(""timer://r2?period=120s"").routePolicy(policy).log(""r2 doing work"") Both routes must start only if the node is master See discussion",Claus Ibsen: Claus Ibsen added a comment - 21/Feb/19 11:33 You can use the zookeeper-master as endpoint to do this. Its a bit more tricky with the route policy to make it support this.
https://issues.apache.org/jira/browse/CAMEL-12941,Improvement,Open,Minor,Unresolved,2.22.1,Future,camel-bindy,Unknown,Unassigned,michael elbaz,15/Nov/18 20:03,02/Sep/22 11:19,"From 2.18.0 the default value for empty string is """" and it is not possible to set default string value to null please provide a way to do that, maybe the good solution is to set the default value to null when empty and provide the ability to change this with the annotion parameter 'defaultValue' ( related subject )","Claus Ibsen: Claus Ibsen added a comment - 06/Aug/19 15:12 Whats the use-case for using null as default value? | michael elbaz: michael elbaz added a comment - 06/Aug/19 15:14 davsclaus Some json manipulation | Mikael Andersson Wigander: Mikael Andersson Wigander added a comment - 30/Mar/22 10:10 I also second that and my reason is also when later marshalling from POJO to json the Jackson Library will include this as a key with an empty string as value. In comparison to primitives which gets a null value (by definition) if no value. If a default value is needed, then use defaultValue = """". In my case I have to define a default value (not """"), create a custom converter for all String fields, which then removes the default string and sets the field to null. public static Object getDefaultValueForPrimitive( Class <?> clazz) { if (clazz == byte .class) { return Byte .MIN_VALUE; } else if (clazz == short .class) { return Short .MIN_VALUE; } else if (clazz == int .class) { return Integer .MIN_VALUE; } else if (clazz == long .class) { return Long .MIN_VALUE; } else if (clazz == float .class) { return Float .MIN_VALUE; } else if (clazz == double .class) { return Double .MIN_VALUE; } else if (clazz == char .class) { return Character .MIN_VALUE; } else if (clazz == boolean .class) { return false ; } else if (clazz == String .class) { return """"; } else { return null ; } } Using 3.14.1…"
https://issues.apache.org/jira/browse/CAMEL-12840,New Feature,Open,Minor,Unresolved,2.23.0,Future,None,Unknown,Unassigned,Rafal Korytkowski,27/Sep/18 12:35,02/Sep/22 11:14,New FHIR component was added in CAMEL-12625 . We need to add support for OAuth.,
https://issues.apache.org/jira/browse/CAMEL-12201,New Feature,Open,Minor,Unresolved,None,Future,None,Moderate,Unassigned,Ricardo Zanini,26/Jan/18 19:35,02/Sep/22 11:03,"`camel-wordpress` supports only Basic Authentication, which isn't the best approach for production environments. For this to work, the plugin JWT Authentication must be installed on Wordpress. There's a lot of plugins that implement JWT Authentication, but this one seems more reliable and that's the one with more updates and stars. So, we should stick to it.",
https://issues.apache.org/jira/browse/CAMEL-12140,New Feature,Open,Minor,Unresolved,None,Future,eip,Unknown,Unassigned,Nicola Ferraro,12/Jan/18 16:06,02/Sep/22 11:01,"Compensating actions may not be able to complete synchronously. We should add some mechanism to do async (long) compensations. The same for completion callbacks. The LRA framework handle this using the ""status"" callback.","Andrea Cosentino: Andrea Cosentino added a comment - 16/Nov/18 09:52 nferraro what's the status of this one? | Nicola Ferraro: Nicola Ferraro added a comment - 16/Nov/18 10:18 There are some changes in progress in the microprofile LRA spec, it's better to defer until there's a stable release of LRA so we can map the EIP on the new features. | Andrea Cosentino: Andrea Cosentino added a comment - 16/Nov/18 10:19 Thanks for the update. Feel free to modify the fix version as you prefer"
https://issues.apache.org/jira/browse/CAMEL-12132,Improvement,Open,Minor,Unresolved,2.20.1,Future,camel-snmp,Unknown,Unassigned,Ricardo Zanini,09/Jan/18 15:46,02/Sep/22 11:01,we want to use camel with multiple polling endpoints of type SNMP. The restrictions we have are: snmp version 3 with authentication and privacy each endpoint might have different credentials und securityName (user). When we configure two endpoint with the URIs snmp:192.168.56.101:161?snmpVersion=3&type=POLL&oids=1.3.6.1.2.1.7.5.1&authenticationPassphrase=11111111&authenticationProtocol=SHA1 &privacyPassphrase=11111111&privacyProtocol=PrivAES128&securityName=secname111&securityLevel=3 and snmp:192.168.56.102:1612?snmpVersion=3&type=POLL&oids=1.3.6.1.2.1.7.5.1&authenticationPassphrase=22222222&authenticationProtocol=SHA1 &privacyPassphrase=22222222&privacyProtocol=PrivAES128&securityName=secname222&securityLevel=3 We get exceptions when polling the first endpoint 2018-01-08 13:05:12.124 WARN 3076 — [.168.56.101:161] o.a.c.c.s.SnmpOIDPoller : Consumer Consumer [snmp://192.168.56.101:161?authenticationPassphrase=xxxxxx&authenticationProtocol=SHA1&oids=1.3.6.1.2.1.7.5.1&privacyPassphrase=xxxxxx&privacyProtocol=AES128&securityLevel=3&securityName= secname111&snmpVersion=3&type=POLL] failed polling endpoint: snmp://udp:192.168.56.101/161. Will try again at next poll. Caused by: [org.snmp4j.MessageException - Message processing model 3 returned error: Unknown security name] org.snmp4j.MessageException: Message processing model 3 returned error: Unknown security name at org.snmp4j.MessageDispatcherImpl.sendPdu(MessageDispatcherImpl.java:520) ~ [snmp4j-2.5.0.jar:?] at org.snmp4j.Snmp.sendMessage(Snmp.java:1059) ~ [snmp4j-2.5.0.jar:?] at org.snmp4j.Snmp.send(Snmp.java:1029) ~ [snmp4j-2.5.0.jar:?] at org.snmp4j.Snmp.send(Snmp.java:1013) ~ [snmp4j-2.5.0.jar:?] at org.apache.camel.component.snmp.SnmpOIDPoller.poll(SnmpOIDPoller.java:176) ~ [camel-snmp-2.19.4.jar:2.19.4] at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174) [camel-core-2.19.4.jar:2.19.4] at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101) [camel-core-2.19.4.jar:2.19.4] at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source) [?:1.8.0_112] at java.util.concurrent.FutureTask.runAndReset(Unknown Source) [?:1.8.0_112] at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(Unknown Source) [?:1.8.0_112] at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source) [?:1.8.0_112] at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) [?:1.8.0_112] at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) [?:1.8.0_112] at java.lang.Thread.run(Unknown Source) [?:1.8.0_112] It seems that after configuration of the second endpoint the security information of the first endpoint is not found/used anymore. See Nabble: http://camel.465427.n5.nabble.com/Bug-in-component-camel-snmp-td5816536.html,Claus Ibsen: Claus Ibsen added a comment - 02/Sep/22 11:00 Anyone using this and able to help out
https://issues.apache.org/jira/browse/CAMEL-8013,Improvement,Open,Minor,Unresolved,2.14.0,Future,camel-smpp,Unknown,Unassigned,Daniel Pocock,07/Nov/14 15:14,02/Sep/22 08:55,"Some locations, including the US, impose throttling restrictions on SMS Sending more than 1 message per second may violate the throttling rules and result in message delivery errors. If a message is big and it is automatically split by the camel-smpp code (in SmppSubmitSmCommand.java) then this results in a situation where multiple message parts are sent in quick succession, this can violate the throttling limits. It would be useful for camel-smpp to send each part with a delay.","Daniel Pocock: Daniel Pocock added a comment - 05/Jan/15 14:37 Raised by another user on the mailing list http://mail-archives.apache.org/mod_mbox/camel-users/201412.mbox/%3C1418809688431-5760816.post%40n5.nabble.com%3E | Daniel Pocock: Daniel Pocock added a comment - 05/Jan/15 14:40 Splitting is currently done within the endpoint. To allow the Throttler component to work on parts of a split message or to handle per-fragment errors (such as a throttling error from the SMSC rejecting the final fragment of a split message) it would be necessary to divide the producer into two parts: a Processor that converts messages to one or more SMPP PDUs (one or more new exchanges) an endpoint that sends the SMPP PDUs to the wire | Daniel Pocock: Daniel Pocock added a comment - 15/Feb/15 16:32 I'm not aware of any work under way to resolve this. As a workaround, people can use the message splitting polices introduced in CAMEL-8116 to ensure that messages won't be sent out at all if they would be split and violate the rate limits."
https://issues.apache.org/jira/browse/CAMEL-16875,New Feature,Open,Minor,Unresolved,None,None,camel-etcd,Unknown,Unassigned,Hokutor,19/Aug/21 13:14,19/Aug/21 13:14,"Currently, we have implementation listed [here] ( https://camel.apache.org/components/latest/master-component.html#_implementations ) to support clustering. Since etcd is gaining popularity among distributed systems, it would be worth to have a ClusterService implementation to use the same",
https://issues.apache.org/jira/browse/CAMEL-16209,Improvement,Open,Minor,Unresolved,None,None,"camel-aws,(1)camel-aws2",Unknown,Andrea Cosentino,Luca Burgazzoli,15/Feb/21 09:34,25/Feb/21 09:54,"A user reported some issues with aws kinesis on SO: https://stackoverflow.com/questions/66177095/camel-application-re-processing-kinesis-records I think the issues falls into two categories: 1. partitioning: some work is in progress on camel-k side, see: https://github.com/apache/camel-k/issues/1779 and commit 8cc227b65b0 on apache-camel 2. restart from an index: see https://issues.apache.org/jira/browse/CAMEL-15562",
https://issues.apache.org/jira/browse/CAMEL-15597,Improvement,Open,Minor,Unresolved,None,None,camel-servicenow,Unknown,Unassigned,Luca Burgazzoli,30/Sep/20 05:25,30/Sep/20 15:07,As today we use CXF behind the scenes but we can explore a replacement with a modern reactive web client such as Vert.x HTTP,
https://issues.apache.org/jira/browse/CAMEL-10497,Improvement,Open,Minor,Unresolved,2.18.0,Future,"camel-websocket,(1)documentation",Novice,Unassigned,Stuart Ingram,18/Nov/16 13:32,28/Feb/20 09:22,"Improve behavior documentation of this component, specifically around port workflows. While the initial port can be declaratively exposed for clients to connect the component opens up two random ports per client connected rather than communicate through the single exposed port declared. This was not apparent from the documentation and makes this component somewhat inappropriate for containerization which would be useful to consider when evaluating the 3 websocket implementations currently available for Camel.","Claus Ibsen: Claus Ibsen added a comment - 21/Nov/16 09:42 Contributions is welcome to update the docs at https://github.com/apache/camel/blob/master/components/camel-websocket/src/main/docs/websocket-component.adoc | Onder Sezgin: Onder Sezgin added a comment - 04/Apr/17 08:24 singram777 I am not sure i understand what you require in camel-websocket documents.As far as i can see, if port specified, the component uses it, otherwise default port 9292 is in use. | Onder Sezgin: Onder Sezgin added a comment - 10/Apr/17 06:26 singram777 any commen? | Stuart Ingram: Stuart Ingram added a comment - 10/Apr/17 15:50 Apologies for the slow response. To clarify on the issue. The port specified is indeed the primary port used. However the implementation requires 2 other ports per client connection which was unexpected. The effect of this is that if you are running locally and have no network restrictions this implementation detail is invisible. However if you put this in say a container with the primary port specified it does not work because the 2 other ports are not exposed to traffic. This is particularly difficult as the 2 ports created per client connection are random. This was not clear in the documentation and took some time to discover, hence the request to note it in the documentation which may be important selection criteria for another developer looking at this solution. Let me know if this make sense. Thanks for taking a look. | Onder Sezgin: Onder Sezgin added a comment - 18/Apr/17 07:43 singram777 i got what you mean. however, i can not verify that i can see what you meant in the code. if you could provide test env or steps that i can reproduce, i can provide better documentation (i just don't want to add a simple statement to adoc and close the issue.) or why don't you create github PR if you are already able to test and see the issue and maybe you can do a blog post about your experience?"
https://issues.apache.org/jira/browse/CAMEL-11223,Improvement,Open,Minor,Unresolved,2.18.3,None,camel-jpa,Unknown,Unassigned,TEIKITEETINI-VAYSSE Loic,02/May/17 09:52,01/Feb/18 15:00,"Deploying 4 instances of the same app containing a camel-jpa consumer polling on the same database, I noticed that several servers can consume the same entities. The polling is currently done as follow : Poll without lock on the `maxResult` first rows On each row : Apply a lock select ... for update (NOWAIT) Consume entity Release the lock (commit) New Transaction Process exchange End Transaction What can happen with several instances of the consuming on the same database is : Server 1 polls the 10 first rows Server 2 polls the same 10 first rows Server 1 locks row 1 for update and consume it Server 2 locks row 1 for update as the previous lock is already released and consumes it This demand is related to my previous post on the user forum : http://camel.465427.n5.nabble.com/JPA-consumer-component-is-not-handling-multiple-server-concurrent-polling-td5797937.html","TEIKITEETINI-VAYSSE Loic: TEIKITEETINI-VAYSSE Loic added a comment - 03/May/17 14:01 After further analysis, I figured out that the consumeDelete parameter when set to true : By default consumes the entity by deleting it If an @Consumed or @PreConsumed method is defined, applies it (Besides this point is not very clear in the documentation http://camel.apache.org/jpa.html ) In a external POC I managed to use multiple concurrent pollers using consumeDelete=true and @Consumed or @PreConsumed. Reality is, sometimes you want to externalize your model from your app and and just use it as a dependency. In that case, it is currently impossible to scan the @Consumed method. As a workaround it is possible to manually consume the entity setting consumeDelete to false and using a bean to update the entity. In that particular case, the exclusive lock fails. See attached a reproduction of the issue. | TEIKITEETINI-VAYSSE Loic: TEIKITEETINI-VAYSSE Loic added a comment - 03/May/17 14:14 My test data : TRUNCATE TABLE CAMEL.TOTO; TRUNCATE TABLE CAMEL.TOTO_CONSUMED; BEGIN FOR i IN 1..10 LOOP INSERT INTO CAMEL.TOTO VALUES ('Toto' || i, 0); END LOOP; COMMIT; END; SELECT * FROM CAMEL.TOTO_CONSUMED; | Philipp Lang: Philipp Lang added a comment - 20/Oct/17 13:48 - edited I have a similar problem. Some entities are consumed twice. But i have set consumeDelete to true. Have you a solution for the problem?"
https://issues.apache.org/jira/browse/CAMEL-10631,Task,Open,Minor,Unresolved,None,Future,camel-infinispan,Unknown,Andrea Cosentino,Claus Ibsen,21/Dec/16 08:17,21/Dec/16 08:18,"We should document the aggregation repository we have which is both local and remote, and also recoverable https://github.com/apache/camel/tree/master/components/camel-infinispan/src/test/java/org/apache/camel/component/infinispan/processor/aggregate In the docs at https://github.com/apache/camel/blob/master/components/camel-infinispan/src/main/docs/infinispan-component.adoc",
